---
title: "预测和去除单细胞转录组的环境游离RNA污染"
---

> 参考：
>
> [*使用DecontX预测和去除单细胞转录组的环境游离RNA污染*](https://mp.weixin.qq.com/s?__biz=MzAxMDkxODM1Ng==&mid=2247524847&idx=1&sn=0d351498b922f25aef134278d1b3671b&chksm=9b4b2154ac3ca84249b773e01138442d6cdb463f392336d5c421caf1a5c0810d4c83a3d0efde&mpshare=1&scene=1&srcid=0918PFOiDNLm3WW8e3vpiKLM&sharer_shareinfo=0532b6cb2d1ec65e2db68ea5b30a639a&sharer_shareinfo_first=0532b6cb2d1ec65e2db68ea5b30a639a#rd)
>
> [*Decontamination of ambient RNA in single-cell genomic data with DecontX*](https://bioconductor.org/packages/release/bioc/vignettes/decontX/inst/doc/decontX.html)
>
> [*SoupX 帮助文档*](https://rawcdn.githack.com/constantAmateur/SoupX/204b602418df12e9fdb4b68775a8b486c6504fe4/inst/doc/pbmcTutorial.html)

::: callout-note
如果你的UMAP可视化时候总是出现**毛毛躁躁的边缘和大量散在细胞**，还有很多细胞亚群之间有连续的细胞（maybe可能时真是存在的过渡态细胞），就需要考虑这个使用`DecontX`预测和去除单细胞转录组的环境游离RNA污染。

![](images/640-02.png){width="436"}
:::

In droplet based, single cell RNA-seq experiments, there is always a certain amount of **background mRNAs** present in the dilution that **gets distributed into the droplets with cells and sequenced along with them**. The net effect of this is to produce a **background contamination** that represents **expression not from the cell contained within a droplet, but the solution that contained the cells**.

> 在单细胞测序中，由于在处理细胞样品的时候需要用到机械解离或者酶解的步骤，所以免不了会造成细胞的破裂同时产生环境游离RNA。细胞悬液中的环境 RNA 可能会与细胞的原生 mRNA 一起被异常计数，从而导致不同细胞群之间转录本的交叉污染。环境游离RNA污染对细胞测序质量的影响较大，因此，有效地计算和预测游离RNA污染，去除污染严重的低质量细胞对单细胞测序分析具有重要意义。

目前，R包[`SoupX`](https://github.com/constantAmateur/SoupX)就可以实现这样的目的，[*详见：SoupX——去除RNA污染*](https://mp.weixin.qq.com/s/7g9Zo6IPqTafSjKCeAFNIQ)。这篇笔记我们介绍另一个R包[`decontX`](https://bioconductor.org/packages/release/bioc/html/decontX.html) [@Yang2020]。这个包的主要优点是使用方便，步骤简便，且结果容易使用。`DecontX` 是一种新的贝叶斯方法，用于估计和去除单细胞数据中的环境污染，可以整合到 scRNA-seq 工作流中，以改进下游分析**。**`DecontX`既可以用于去除单细胞转录组数据中的环境游离RNA污染（[`decontX`](https://bioconductor.org/packages/release/bioc/vignettes/decontX/inst/doc/decontX.html)），也可以用于单细胞蛋白表达谱中的污染（[`deconPro`](https://bioconductor.org/packages/release/bioc/vignettes/decontX/inst/doc/decontPro.html)）。

安装`SoupX`：

```{r}
#| eval: false
BiocManager::install("decontX")
```

# 加载包

```{r}
library(Seurat)
library(decontX)
library(ggplot2)
library(cowplot)
library(beepr)
```

# 数据导入/质控

`DecontX` can take either a [SingleCellExperiment](https://bioconductor.org/packages/release/bioc/html/SingleCellExperiment.html) object or a counts matrix as input. `decontX` will attempt to convert any input matrix to class `dgCMatrix` from package [`Matrix`](https://cran.r-project.org/web/packages/Matrix/index.html) before starting the analysis. 在Seurat工作流中，评估并去除环境游离RNA的污染一般在质控之后进行。这里我们用[scRNA-seq_online-质控](/single_cell/scRNA-seq_online/04_SC_quality_control.qmd)中已经完成质控的Seurat对象作为演示。最后和[scRNA-seq_online-细胞聚类](/single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.qmd#sec-visualize-clusters-of-cells)中没有进行环境游离RNA去除的细胞分群结果进行比较。

```{r}
filtered_seurat <- readRDS("output/scRNA-seq_online/seurat_filtered.rds")
filtered_seurat
head(filtered_seurat, 5)
```

# 执行`decontX`

In this scenario, `decontX` will estimate the contamination distribution for each cell cluster based on the profiles of the other cell clusters in the filtered dataset. The estimated contamination results can be found in the `colData(sce)$decontX_contamination` and the decontaminated counts can be accessed with `decontXcounts(sce)`.

```{r}
#| fig-height: 5
decontx_result <- decontX(filtered_seurat[["RNA"]]$counts)

# 提取环境RNA污染的预测结果
decontx_result$contamination[1:5]
length(decontx_result$contamination)
summary(decontx_result$contamination)
```

可以看到每个细胞都有一个decontx_result\$contamination结果，即预测的环境游离RNA的比例。因此，接下来我们可以将其直接写入Seurat对象的meta.data中，并根据这一信息进行细胞过滤。

```{r}
# 将环境RNA污染的预测结果写入Seurat对象的meta.data中
filtered_seurat$Contamination <- decontx_result$contamination
head(filtered_seurat, 5)


```

绘图展示污染率的分布情况

```{r}
p1 <- filtered_seurat@meta.data |> 
    ggplot(aes(color = sample, x = Contamination, fill = sample)) + 
    geom_density(alpha = 0.2) + 
    scale_x_log10() + 
    ylab("Cell density") +
    geom_vline(xintercept = 0.2) +
    theme_bw()

p2 <- filtered_seurat@meta.data |> 
  ggplot(aes(x = sample, y = Contamination, fill = sample)) +
    geom_violin(width = 1.4) +
    geom_boxplot(width = 0.1, color = "gray") +
    theme_bw()
```

# 过滤高环境RNA污染的细胞

对于污染率的过滤标准，DecontX官方并没有给予明确的建议，这里参考的了`SoupX`的官方文档，选择`Contamination < 0.2`。

```{r}
low_con_seurat <- subset(filtered_seurat, Contamination < 0.2)
paste0("通过decontX过滤掉了", ncol(filtered_seurat) - ncol(low_con_seurat), "个细胞")
```

重新评估污染率的分布情况

```{r}
#| fig-cap: "去除高环境RNA污染的细胞前（A、B）后（C、D）的环境RNA比例分布"
#| fig-width: 10
p3 <- low_con_seurat@meta.data |> 
    ggplot(aes(color = sample, x = Contamination, fill = sample)) + 
    geom_density(alpha = 0.2) + 
    scale_x_log10() + 
    ylab("Cell density") +
    geom_vline(xintercept = 0.2) +
    theme_bw()

p4 <- low_con_seurat@meta.data |> 
    ggplot(aes(x = sample, y = Contamination, fill = sample)) +
    geom_violin(width = 1.4) +
    geom_boxplot(width = 0.1, color = "gray") +
    theme_bw()

plot_grid(p1, p2, p3, p4,
          ncol = 2, 
          labels = "AUTO")
```

# SCTranform、整合

这里省略细胞周期、线粒体基因等非期望变异来源的评估，省略整合前细胞分群情况的评估。

```{r}
#| cache-lazy: false
# 分割layer，执行SCTranform
low_con_seurat[["RNA"]] <- split(low_con_seurat[["RNA"]], 
                                 f = low_con_seurat$sample) 
low_con_seurat

# SCTranform
low_con_seurat <- SCTransform(
  low_con_seurat, 
  vars.to.regress = c("mitoRatio"),
  verbose = FALSE
  )
low_con_seurat

# Run PCA
low_con_seurat <- RunPCA(low_con_seurat)
names(low_con_seurat@reductions)

# 整合
seurat_integrated <- IntegrateLayers(
  object = low_con_seurat,
  method = CCAIntegration,
  normalization.method = "SCT",
  orig.reduction = "pca",
  verbose = FALSE
); beep()

# 整合后重新合并RNA layer
seurat_integrated[["RNA"]] <- JoinLayers(seurat_integrated[["RNA"]])
# 查看整合后的降维信息
names(seurat_integrated@reductions)
```

# 非线性降维、分群

```{r}
#| cache-lazy: false
#| fig-cap: "去除高环境游离RNA污染细胞后的分群情况"
# Set seed
set.seed(123456)

# Run UMAP
seurat_integrated <- RunUMAP(
  seurat_integrated,
  dims = 1:40,
  reduction = "integrated.dr", # 更改降维来源为整合后的"integrated.dr"
  reduction.name = "umap.integrated"
)

# 分群
seurat_integrated <- FindNeighbors(
  seurat_integrated,
  dims = 1:40,
  reduction = "integrated.dr"
) 

seurat_integrated <- FindClusters(
  seurat_integrated,
  resolution = 0.8 # 这里省略探索分辨率的步骤，为了和此前的章节一致，将分辨率设为0.8
)
head(seurat_integrated, 5)

# Assign identity of clusters
Idents(seurat_integrated) <- "SCT_snn_res.0.8"
table(Idents(seurat_integrated))

# Plot the UMAP
DimPlot(seurat_integrated,
        reduction = "umap.integrated",
        label = FALSE,
        label.size = 6)
```

可以看到和来自[scRNA-seq_online-细胞聚类](/single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.qmd#sec-visualize-clusters-of-cells) （下图）的分群情况相比，去除了高环境RNA污染的细胞后，细胞群边缘的毛刺有所减少，细胞界线更加清晰。

![未去除高环境游离RNA污染细胞的分群情况](images/unnamed-chunk-10-1.png){width="512"}

::: callout-tip
`decontX`可以整合进标准的Seurat工作流中的质控步骤中。但是，也可以在先不进行`decontX`的情况下，进行常规的整合、降维、分群。如果分群效果不理想，即有明显的边缘毛躁和大量散在细胞的情况，可以再提取这时候的counts，执行`decontX`。这时候可以通过`FeaturePlot()`去可视化高游离RNA污染的细胞的分布情况：

```{r}
#| eval: false
FeaturePlot(
  seurat_integrated,
  features = "Contamination",
  raster = FALSE # 细胞过多时候需要加这个参数
) +
  scale_color_viridis_c() +
  theme_bw() +
  theme(
    panel.grid = element_blank(),
    axis.text = element_blank(),
    axis.ticks = element_blank()
  ) +
  xlab("scVI_UMAP_1") +
  ylab("scVI_UMAP_2")
```

![通过`FeaturePlot()`可视化游离RNA分布情况的示例。可以看到，通过可视化Contamination，这些边缘的毛躁就是Contamination较高地细胞。](images/640-2-01.png){width="424"}

然后选择合适的阈值过滤细胞。之后用过滤后的counts和meta.data重新构建Seurat对象：

```{r}
#| eval: false
low_con_seurat <- subset(filtered_seurat, Contamination < 0.2)

new_seurat <- CreateSeuratObject(
  counts = low_con_seurat[["RNA"]]$counts,
  meta.data = low_con_seurat@meta.data)
```

然后重新执行整合、降维、分群等步骤。最后和此前的细胞分群情况进行比较。

```{r}
#| eval: false
#| fig-width: 10
#| fig-cap: 过滤环境RNA污染前（A）后（B）的UMAP图
#| echo: fenced
p2 <- DimPlot(
  low_con_seurat, 
  reduction = "umap",
  label = T
  )
p2

plot_grid(
  p1, p2, 
  labels = "AUTO")
```
:::

------------------------------------------------------------------------

::: {.callout-note collapse="true" icon="false"}
## Session Info

```{r}
#| echo: false
sessionInfo()
```
:::

# References {.unnumbered}

::: {#refs}
:::

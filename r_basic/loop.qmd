---
title: "循环"
---

> 参考：
>
> [*【R语言】优雅的循环迭代：purrr包*](https://zhuanlan.zhihu.com/p/168772624)
>
> <https://purrr.tidyverse.org>

**循环迭代，**就是将一个函数依次应用（映射）到序列的每一个元素上。用R写**循环**从低到高有三种境界：基础的显式`for`循环，到`apply()`函数家族，最后到`purrr`包`map()`函数家族泛函式编程。在R语言中应该尽量避免显式循环的应用。而`apply()`函数家族和`map()`函数家族都能够用于避免显式使用循环结构。`map()`系列函数提供了更多的一致性、规范性和便利性，更容易记住和使用。速度来说，`apply()`家族稍快，但可以忽略不计。

# `apply`函数家族

`lapply()`包含在R的基础包内，返回一个长度与 X（输入）相同的**列表**，其中的每个元素都是将目标函数（FUN）应用于X的相应元素的结果。其基本语法和map()一致，所以参考下面的map()函数的介绍。与之类似的`apply()`函数适合对数据框的操作，能够将目标函数应用于输入数据的行或列，然后输出一个向量或列表。

生成案例数据

```{r}
mydata <- matrix(1:9, ncol = 3,nrow = 6) #生成一个3列、6行的矩阵数据
mydata[3,3] <- NA #生成一个缺失值
mydata <- as.data.frame(mydata) #如果要生成新的一列需要转换为数据框形式
mydata
```

计算mydata数据集中每一行的均值并添加到每一行后面

```{r}
mydata$Row_Means <- apply(
  mydata,
  MARGIN = 1, # 1:对每行进行运算；2:对列进行运算；MARGIN=c(1,2)对行、列运算
  mean, # 要应用的函数
  na.rm = T # 是否忽略缺失值
) 
mydata
```

求mydata数据集每一行第一列和第二列的均值

```{r}
mydata$Row_Means12 <- apply(mydata[, c(1:2)], MARGIN = 1, mean,na.rm = T)
mydata
```

对mydata的每一列进行求和运算

```{r}
Col_Sums <- apply(mydata, MARGIN = 2, sum, na.rm = T)
mydata <- rbind(mydata, Col_Sums)
mydata
```

------------------------------------------------------------------------

# `purrr`包`map()`函数家族

## `map()` {#sec-map_function}

依次应用**一元函数**到**一个序列**的每个元素上，**基本等同 `lapply()`**：

::: callout-tip
序列包括以下的类型：

-   **原子向量**（各个元素都是同类型的），包括 6 种类型：logical、integer、double、character、complex、raw，其中 integer 和 double 也统称为numeric

-   **列表**（包含的元素可以是不同类型的）
:::

![](images/截屏2024-01-23%2017.18.19.png)

```{r}
library(purrr)
chr <- list(x = c("a", "b"), y = c("c", "d"))
chr

# 让chr中的字符降序排列
map(chr, sort, decreasing = TRUE)
```

如过`map()`应用对象是数据框，那么会将函数应用于数据框的**每一列**（**可以把数据框的每一列看作一个元素**）:

```{r}
x_df <- data.frame(a = 1:10, b = 11:20, c = 21:30)
x_df

# 计算x_tab每一列的均值
map(x_df, mean)
```

`mean()`函数还有其它参数，如 `na.rm`，这些需要特别指定的目标函数参数可以放到函数的后面：

```{r}
map(x_df, mean, na.rm = TRUE)  # 因为数据不含NA, 故结果同上
```

## `map2()`

依次应用**二元函数**到**两个序列**的**每对**元素上（要求两个序列有相同的长度）：

![](images/截屏2024-01-23%2017.21.54.png)

```{r}
x <- list(a = 1:10, b = 11:20, c = 21:30)
x
y <- list(1, 2, 3)
y

map2(x, y,\(x, y) x*y)
```

`map2()`应用对象也可以是数据框和向量：

```{r}
y_vec <- c(1:3)
y_vec

# 将y_vec中的每一个元素逐一与x_df中对应的列中的每个值相乘
map2(x_df, y_vec, \(x, y) x*y)
```

```{r}
y_df <- data.frame(d = 21:30, e = 11:20, f = 1:10)
y_df

# 将y_df中的每列逐一与x_df中对应的列中的每个值相乘
map2(x_df, y_df, \(x, y) x*y)
# 输出数据框
map2_df(x_df, y_df, \(x, y) x*y)
```

## `pmap()`

应用**多元函数**到**多个序列**的每组元素上，可以实现对数据框逐行迭代

![](images/截屏2024-01-23%2017.23.05.png)

```{r}
z <- list(4, 5, 6)
pmap(
  list(x, y, z),
  function(first, second, third) first * (second + third)
)
```

也可以应用于数据框，实现对数据框逐行迭代：

```{r}
x_df
pmap_dbl(
  x_df,
  ~ ..1 * (..2 + ..3)
) # 这里用带后缀的形式（pmap_dbl）返回数值型向量（见下文）
```

## 给`map`函数添加后缀

`map`系列函数的运算结果默认是**列表型**的，但是`map`系列函数都有后缀形式，以决定循环迭代之后返回的数据类型，这是 `purrr` 比 `apply`函数族更先进和便利的一大优势。常用后缀如下（这里以`map()`为例，`map2()`和`pmap()`也有与之对应的后缀）：

-   `map_dbl(.x, .f)`: 返回数值型向量

    ![](images/截屏2024-01-23%2017.24.24.png){width="161"}

    【案例】在[上面的map()案例](#sec-map_function)中，求均值返回的结果是数值型，所以更好的做法是将返回结果指定为数值型向量，只需在`map`后加上`_dbl`的后缀：

    ```{r}
    map_dbl(x_df, mean)
    ```

-   `map_int(.x, .f)`: 返回整数型向量

    ![](images/截屏2024-01-23%2017.25.29.png){width="151"}

-   `map_lgl(.x, .f)`: 返回逻辑型向量

    ![](images/截屏2024-01-23%2017.25.57.png){width="155"}

-   `map_chr(.x, .f)`: 返回字符型向量

    ![](images/截屏2024-01-23%2017.23.56.png){width="155"}

-   `map_dfr(.x, .f)`: 返回数据框列表，再 `bind_rows` 按行合并为一个数据框

    【案例】批量读取具有相同列名的数据文件并合并成一个数据框

    ```{r}
    #| eval: false
    files = list.files("datas/", pattern = "xlsx", full.names = TRUE)
    df = map_dfr(files, read_xlsx)    # 批量读取+按行堆叠合并
    ```

    `map_dfr(files, read_xlsx)` 依次将 `read_xlsx()` 函数应用到各个文件路径上，即依次读取数据，返回结果是数据框，同时“dfr”表示再做按行合并，一步到位。若需要设置 `read_xlsx()` 的其它参数，只需在后面设置即可。

-   `map_dfc(.x, .f)`: 返回数据框列表，再 `bind_cols` 按列合并为一个数据框

## **`walk()`系列**

**将函数依次作用到序列上，不返回结果。**有些批量操作是没有或不关心返回结果的，例如批量保存到文件：`save()`, `write_csv()` 、`saveRDS()`等。**`walk()`系列**同样包括了`walk()`、`walk2`和`pwalk()`。

![](images/截屏2024-01-24%2009.48.23.png){width="131"}

【例一】将mpg数据按“manufacturer”分组，每个“manufacturer”的数据分别保存为单独数据文件。

```{r}
# 读取ggplot2包自带mpg数据集（该数据为tibble型）
df <- ggplot2::mpg
head(df)
# 通过group_nest将mpg数据按“manufacturer”分组，每个“manufacturer”的数据分别保存为单独数据
library(dplyr)
df <- group_nest(df, manufacturer) 
df

# 批量输出这些数据
pwalk(df, ~ write.csv(..2, paste0("output/r_basic/", ..1, ".csv")))
```

![](images/截屏2024-01-24%2010.01.53.png){width="179"}

【例二】这个例子来自[读取非标准10X格式文件](/single_cell/sc_supplementary/read_sc_data.qmd)，要实现在"output/r_basic/GSE184880_RAW"中批量建立文件夹的目的。

首先是构建文件夹的目录和名字，这一部分的目的参照[读取非标准10X格式文件](/single_cell/sc_supplementary/read_sc_data.qmd#Read_non-standard_10x_files)。

```{r}
# 列出
files <- list.files("data/sc_supplementary/GSE184880_RAW")
files[1:10]
dirnames <- gsub(pattern = ".barcodes.tsv.gz|.genes.tsv.gz|.matrix.mtx.gz", 
                 replacement = "", 
                 x = files) %>%  
  unique() %>% 
  paste0("output/r_basic/GSE184880_RAW/", .) 
dirnames

# 在“output/r_basic”目标位置先建立一个“GSE184880_RAW”用于存放一会儿构建的文件夹
dir.create("output/r_basic/GSE184880_RAW")
```

通过`pwalk()`根据文件夹的名称“dirnames”建立文件夹。⚠️注意`pwalk()`只能应用于列表对象，所以这里通过`list()`进行了转化：

```{r}
pwalk(list(dirnames), dir.create)
```

![建立好的文件夹](images/截屏2024-01-24%2010.40.53.png){width="423"}

::: callout-tip
更多关于`purr`包的应用，参考：[*【R语言】优雅的循环迭代：purrr包*](https://zhuanlan.zhihu.com/p/168772624)*、*<https://purrr.tidyverse.org>。
:::

::: {.callout-tip collapse="true"}
###### `apply`家族 vs. `map`家族函数

There are two primary differences between the base `apply` family and the purrr `map` family: `purrr` functions are **named more consistently**, and more fully explore the space of input and output variants.

-   `purrr` functions consistently use `.` as prefix to avoid [inadvertently matching arguments](https://adv-r.hadley.nz/functionals.html#argument-names) of the `purrr` function, instead of the function that you’re trying to call. Base functions use a variety of techniques including upper case (e.g. `lapply(X, FUN, ...)`) or require anonymous functions (e.g. `Map()`).

-   All `map` functions are type stable: you can predict the type of the output using little information about the inputs. In contrast, the base functions `sapply()` and `mapply()` automatically simplify making the return value hard to predict.

-   **The map functions all start with the data, followed by the function**, **then any additional constant argument**. Most base apply functions also follow this pattern, but `mapply()` starts with the function, and `Map()` has no way to supply additional constant arguments.

-   purrr functions provide all combinations of input and output variants, and include variants specifically for the common two argument case.

**`apply`家族和`map`家族函数对照表：**

+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Output                        | Input                                 | Base R                                                                     | purrr                                                                                             |
+===============================+=======================================+============================================================================+===================================================================================================+
| List                          | 1 vector                              | `lapply()`                                                                 | `map()`                                                                                           |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| List                          | 2 vectors                             | `mapply()`, `Map()`                                                        | `map2()`                                                                                          |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| List                          | \>2 vectors                           | `mapply()`, `Map()`                                                        | `pmap()`                                                                                          |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Atomic vector of desired type | 1 vector                              | `vapply()`                                                                 | `map_lgl()` (logical)                                                                             |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map_int()` (integer)                                                                             |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map_dbl()` (double)                                                                              |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map_chr()` (character)                                                                           |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map_raw()` (raw)                                                                                 |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Atomic vector of desired type | 2 vectors                             | `mapply()`, `Map()`, then `is.*()` to check type                           | `map2_lgl()` (logical)                                                                            |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_int()` (integer)                                                                            |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_dbl()` (double)                                                                             |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_chr()` (character)                                                                          |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_raw()` (raw)                                                                                |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Atomic vector of desired type | \>2 vectors                           | `mapply()`, `Map()`, then `is.*()` to check type                           | `map2_lgl()` (logical)                                                                            |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_int()` (integer)                                                                            |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_dbl()` (double)                                                                             |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_chr()` (character)                                                                          |
|                               |                                       |                                                                            |                                                                                                   |
|                               |                                       |                                                                            | `map2_raw()` (raw)                                                                                |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Side effect only              | 1 vector                              | loops                                                                      | `walk()`                                                                                          |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Side effect only              | 2 vectors                             | loops                                                                      | `walk2()`                                                                                         |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Side effect only              | \>2 vectors                           | loops                                                                      | `pwalk()`                                                                                         |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Data frame (`rbind`outputs)   | 1 vector                              | `lapply()` then `rbind()`                                                  | `map_dfr()`                                                                                       |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Data frame (`rbind`outputs)   | 2 vectors                             | `mapply()`/`Map()` then`rbind()`                                           | `map2_dfr()`                                                                                      |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Data frame (`rbind`outputs)   | \>2 vectors                           | `mapply()`/`Map()` then`rbind()`                                           | `pmap_dfr()`                                                                                      |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Data frame (`cbind`outputs)   | 1 vector                              | `lapply()` then `cbind()`                                                  | `map_dfc()`                                                                                       |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Data frame (`cbind`outputs)   | 2 vectors                             | `mapply()`/`Map()` then`cbind()`                                           | `map2_dfc()`                                                                                      |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Data frame (`cbind`outputs)   | \>2 vectors                           | `mapply()`/`Map()` then`cbind()`                                           | `pmap_dfc()`                                                                                      |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Any                           | Vector and its names                  | `l/s/vapply(X, function(x) f(x, names(x)))` or`mapply/Map(f, x, names(x))` | `imap()`, `imap_*()` (`lgl`, `dbl`, `dfr`, and etc. just like for`map()`, `map2()`, and `pmap()`) |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| Any                           | Selected elements of the vector       | `l/s/vapply(X[index], FUN, ...)`                                           | `map_if()`, `map_at()`                                                                            |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| List                          | Recursively apply to list within list | `rapply()`                                                                 | `map_depth()`                                                                                     |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+
| List                          | List only                             | `lapply()`                                                                 | `lmap()`, `lmap_at()`,`lmap_if()`                                                                 |
+-------------------------------+---------------------------------------+----------------------------------------------------------------------------+---------------------------------------------------------------------------------------------------+

Since a common use case for map functions is list extracting components, purrr provides a handful of shortcut functions for various uses of `[[`.

+----------------------------+-------------------------------------------------------------------+----------------------------+
| Input                      | base R                                                            | purrr                      |
+============================+===================================================================+============================+
| Extract by name            | `` lapply(x, `[[`, "a") ``                                        | `map(x, "a")`              |
+----------------------------+-------------------------------------------------------------------+----------------------------+
| Extract by position        | `` lapply(x, `[[`, 3) ``                                          | `map(x, 3)`                |
+----------------------------+-------------------------------------------------------------------+----------------------------+
| Extract deeply             | `lapply(x, \(y) y[[1]][["x"]][[3]])`                              | `map(x, list(1, "x", 3))`  |
+----------------------------+-------------------------------------------------------------------+----------------------------+
| Extract with default value | `lapply(x, function(y) tryCatch(y[[3]], error = function(e) NA))` | `map(x, 3, .default = NA)` |
+----------------------------+-------------------------------------------------------------------+----------------------------+
:::

------------------------------------------------------------------------

# 在循环语句中的其他常用函数

## `assign()`函数

`assign`函数能够将某个值赋值给指定名称，从而实现循环中将每次运行的结果保存到一个对象中，而不覆盖上一次运行的结果。

-   `x`：变量名称/赋值对象/最后的新变量的名称

-   `value`：需要赋给`x`的值

下面的案例实现输出"A", "B", "C", "D"四个变量，每个变量就是一次循环的结果：

```{r}
for (x in c("A", "B", "C", "D")){
        y <- paste0(x, x)
        assign(x = x, value = y)
}
```

## `append`函数

`append()`函数被广泛应用于将新的向量添加到现有的向量、列表或数据框中。

-   将新向量添加到已有向量中：

```{r}
v1 <- c(1, 2, 3, 4, 5)
v2 <- c(6, 7, 8)

v3 <- append(v1, v2)
v3

#等价于
v3 <- c(v1, v2)
```

-   将新列表添加到已有列表中：

```{r}
list1 <- list(a = 1, b = 2, c = 3)
list2 <- list(d = 4, e = 5, f = 6)
list3 <- append(list1, list2)
list3
```

实际应用场景：在批量读取构建Seurat对象时，通过append()函数将每次的Seurat对象添加到列表中，最终得到一个包含了所有样本的单细胞数据的列表：

```{r}
#| eval: false
for (file in file_list) {
  # 拼接文件路径
  data.path <- paste0("data/other_single_cell_content/GSE234933_MGH_HNSCC_gex_raw_counts/", file)
  # 读取RDS文件数据
  seurat_data <- readRDS(data.path)
  # 创建Seurat对象，并指定项目名称为文件名（去除后缀）
  sample_name <- file_path_sans_ext(file)
  seurat_obj <- CreateSeuratObject(counts = seurat_data,
                                   project = sample_name,
                                   min.features = 200,
                                   min.cells = 3)
  # 将Seurat对象添加到列表中
  seurat_list <- append(seurat_list, seurat_obj)
}
```

------------------------------------------------------------------------

::: {.callout-note collapse="true" icon="false"}
## Session Info

```{r}
#| echo: false
sessionInfo()
```
:::

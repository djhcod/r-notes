[
  {
    "objectID": "single_cell/sc_supplementary/integrated_analysis_multiple_single_cell_datasets.html#加载包",
    "href": "single_cell/sc_supplementary/integrated_analysis_multiple_single_cell_datasets.html#加载包",
    "title": "\n30  多个单细胞数据集整合分析\n",
    "section": "\n30.1 加载包",
    "text": "30.1 加载包\n\nlibrary(Seurat)\nlibrary(ggplot2)\nlibrary(beepr)\nlibrary(cowplot)\nlibrary(dplyr)\nlibrary(clustree)"
  },
  {
    "objectID": "single_cell/sc_supplementary/integrated_analysis_multiple_single_cell_datasets.html#gse150430",
    "href": "single_cell/sc_supplementary/integrated_analysis_multiple_single_cell_datasets.html#gse150430",
    "title": "\n30  多个单细胞数据集整合分析\n",
    "section": "\n30.2 GSE150430",
    "text": "30.2 GSE150430\n这里我们直接载入 Section 28.4 中构建好的Seurat对象，该案例数据的介绍及读取过程参见该章节。\n数据导入\n\nmerged_seurat &lt;- readRDS(\"output/sc_supplementary/GSE150430_merged_seurat.rds\")\nmerged_seurat\n\nAn object of class Seurat \n24720 features across 48584 samples within 1 assay \nActive assay: RNA (24720 features, 0 variable features)\n 16 layers present: counts.1, counts.2, counts.3, counts.4, counts.5, counts.6, counts.7, counts.8, counts.9, counts.10, counts.11, counts.12, counts.13, counts.14, counts.15, counts.16\n\nhead(merged_seurat, 4)\n\n                       orig.ident nCount_RNA nFeature_RNA samples\nN01_CAGAATCAGTAATCCC.1        N01   3470.970         4173     N01\nN01_TGCGGGTAGTACGTAA.1        N01   3155.725         2994     N01\nN01_AAACCTGAGGGTTTCT.1        N01   2347.034         1946     N01\nN01_AAACCTGAGTTCCACA.1        N01   2362.495         1993     N01\n\nunique(merged_seurat$samples)\n\n [1] \"N01\" \"P01\" \"P02\" \"P03\" \"P04\" \"P05\" \"P06\" \"P07\" \"P08\" \"P09\" \"P10\" \"P11\"\n[13] \"P12\" \"P13\" \"P14\" \"P15\"\n\n\n质控\n\n# Add number of genes per UMI for each cell to metadata\nmerged_seurat$log10GenesPerUMI &lt;- log10(merged_seurat$nFeature_RNA) / log10(merged_seurat$nCount_RNA)\nsummary(merged_seurat$log10GenesPerUMI)\n\n   Min. 1st Qu.  Median    Mean 3rd Qu.    Max. \n 0.8897  0.9488  0.9670  0.9773  0.9971  1.1429 \n\n# Compute percent mito ratio\nmerged_seurat$mitoRatio &lt;- PercentageFeatureSet(object = merged_seurat, \n                                                pattern = \"^MT-\")\nmerged_seurat$mitoRatio &lt;- merged_seurat$mitoRatio / 100\nsummary(merged_seurat$mitoRatio)\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.0006859 0.0106660 0.0127552 0.0129526 0.0150420 0.0407058 \n\nboxplot(merged_seurat$mitoRatio)\n\n\n\n# Add cell IDs to metadata\nmerged_seurat$cells &lt;- rownames(merged_seurat@meta.data)\n\n\n# Visualize the number of cell counts per sample\nmerged_seurat@meta.data  |&gt; \n    ggplot(aes(x = samples, fill = samples)) + \n    geom_bar() +\n    theme_classic() +\n    theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) +\n    theme(plot.title = element_text(hjust = 0.5, face = \"bold\")) +\n    ggtitle(\"NCells\")\n# Visualize the number UMIs/transcripts per cell\nmerged_seurat@meta.data |&gt; \n    ggplot(aes(color = samples, x = nCount_RNA, fill = samples)) + \n    geom_density(alpha = 0.2) + \n    scale_x_log10() + \n    theme_classic() +\n    ylab(\"Cell density\") +\n    geom_vline(xintercept = 500)\n# Visualize the distribution of genes detected per cell via histogram\nmerged_seurat@meta.data |&gt;\n    ggplot(aes(color = samples, x = nFeature_RNA, fill= samples)) + \n    geom_density(alpha = 0.2) + \n    theme_classic() +\n    scale_x_log10() + \n    geom_vline(xintercept = 200)\n# Visualize the overall complexity of the gene expression by visualizing the genes detected per UMI (novelty score)\nmerged_seurat@meta.data |&gt;\n    ggplot(aes(x = log10GenesPerUMI, color = samples, fill=samples)) +\n    geom_density(alpha = 0.2) +\n    theme_classic() +\n    geom_vline(xintercept = 0.8)\n# Visualize the distribution of mitochondrial gene expression detected per cell\nmerged_seurat@meta.data |&gt;\n    ggplot(aes(color = samples, x = mitoRatio, fill = samples)) + \n    geom_density(alpha = 0.2) + \n    scale_x_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 0.2)\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n# Visualize the correlation between genes detected and number of UMIs and determine whether strong presence of cells with low numbers of genes/UMIs\nmerged_seurat@meta.data |&gt; \n    ggplot(aes(x = nCount_RNA, y = nFeature_RNA, color = mitoRatio)) + \n    geom_point() + \n    scale_colour_gradient(low = \"gray90\", high = \"black\") +\n    stat_smooth(method = lm) +\n    scale_x_log10() + \n    scale_y_log10() + \n    theme_classic() +\n    geom_vline(xintercept = 500) +\n    geom_hline(yintercept = 250) +\n    facet_wrap(~samples)\n\n\n\n\n可以看到该数据集已经进行了质控，各项指标均在正常范围内，因此，我们可以跳过细胞/基因过滤，直接进入下面的环节。\n归一化及消除非期望变异来源\n\n\n\n\n\n\nCaution\n\n\n\n由于这里SCTransform的数据量太大，在我的16GB MacBook Pro上超出了R内存分配上限，出现了“Error: vector memory exhausted (limit reached?)”报错。因此，这里在运行下面的脚本之前通过 Section 2.8.2 的方法进行了处理。\n\n\n\n# SCTranform\nmerged_seurat &lt;- SCTransform(merged_seurat, verbose = FALSE); beep()\ngc() # 释放未使用内存\n\n            used   (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb)\nNcells   8269831  441.7   12102744   646.4         NA   12102744   646.4\nVcells 988419958 7541.1 3232715316 24663.7     102400 3232715179 24663.7\n\nmerged_seurat\n\nAn object of class Seurat \n46357 features across 48584 samples within 2 assays \nActive assay: SCT (21637 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 1 other assay present: RNA\n\n# Check which assays are stored in objects\nmerged_seurat@assays\n\n$RNA\nAssay (v5) data with 24720 features for 48584 cells\nFirst 10 features:\n RP11-34P13.7, RP11-34P13.8, AL627309.1, AP006222.2, RP4-669L17.10,\nRP4-669L17.2, RP5-857K21.4, RP11-206L10.3, RP11-206L10.5, RP11-206L10.2 \nLayers:\n counts.1, counts.2, counts.3, counts.4, counts.5, counts.6, counts.7,\ncounts.8, counts.9, counts.10, counts.11, counts.12, counts.13,\ncounts.14, counts.15, counts.16 \n\n$SCT\nSCTAssay data with 21637 features for 48584 cells, and 16 SCTModel(s) \nTop 10 variable features:\n RNASE6, PHACTR1, NR4A3, C1orf162, HMOX1, IFIT2, CD7, CD86, CLNK, CRIP1 \n\n# 查看目前默认的assay\nDefaultAssay(merged_seurat)\n\n[1] \"SCT\"\n\n# 查看默认assay的layers\nLayers(merged_seurat)\n\n[1] \"counts\"     \"data\"       \"scale.data\"\n\n\n评估细胞周期的影响\n\n# Load cell cycle markers\ns.genes &lt;- cc.genes$s.genes\ng2m.genes &lt;- cc.genes$g2m.genes\n\n# Score cells for cell cycle\nmerged_seurat &lt;- CellCycleScoring(merged_seurat, \n                                  g2m.features = g2m.genes, \n                                  s.features = s.genes)\n\n# 现在的meta.data中多出了细胞周期评分“S.Score”和“G2M.Score”，以及推断的细胞所处的周期“Phase”\nhead(merged_seurat@meta.data)\n\n                       orig.ident nCount_RNA nFeature_RNA samples\nN01_CAGAATCAGTAATCCC.1        N01   3470.970         4173     N01\nN01_TGCGGGTAGTACGTAA.1        N01   3155.725         2994     N01\nN01_AAACCTGAGGGTTTCT.1        N01   2347.034         1946     N01\nN01_AAACCTGAGTTCCACA.1        N01   2362.495         1993     N01\nN01_AAACCTGGTTCTCATT.1        N01   2130.465         1459     N01\nN01_AAACGGGGTCCTCCAT.1        N01   2772.010         2573     N01\n                       log10GenesPerUMI   mitoRatio                  cells\nN01_CAGAATCAGTAATCCC.1        1.0225953 0.008644269 N01_CAGAATCAGTAATCCC.1\nN01_TGCGGGTAGTACGTAA.1        0.9934705 0.009895666 N01_TGCGGGTAGTACGTAA.1\nN01_AAACCTGAGGGTTTCT.1        0.9758564 0.015183419 N01_AAACCTGAGGGTTTCT.1\nN01_AAACCTGAGTTCCACA.1        0.9781039 0.014965958 N01_AAACCTGAGTTCCACA.1\nN01_AAACCTGGTTCTCATT.1        0.9506023 0.017437508 N01_AAACCTGGTTCTCATT.1\nN01_AAACGGGGTCCTCCAT.1        0.9906021 0.011233365 N01_AAACGGGGTCCTCCAT.1\n                       nCount_SCT nFeature_SCT     S.Score    G2M.Score Phase\nN01_CAGAATCAGTAATCCC.1       1840         1674 -0.05179250 -0.070444626    G1\nN01_TGCGGGTAGTACGTAA.1       2840         2604 -0.04341940 -0.074302336    G1\nN01_AAACCTGAGGGTTTCT.1       2443         1931 -0.02396942 -0.007239586    G1\nN01_AAACCTGAGTTCCACA.1       2488         1972 -0.01294260 -0.021167805    G1\nN01_AAACCTGGTTCTCATT.1       2104         1451 -0.05440456 -0.049531592    G1\nN01_AAACGGGGTCCTCCAT.1       2892         2520 -0.10189203 -0.087537749    G1\n\n# 查看一下细胞周期的分布情况\ntable(merged_seurat$Phase)\n\n\n   G1   G2M     S \n33941  5147  9496 \n\n# 执行PCA\nmerged_seurat &lt;- RunPCA(merged_seurat)\n\n# Plot the PCA colored by cell cycle phase\np1 &lt;- DimPlot(merged_seurat,\n              reduction = \"pca\",\n              group.by= \"Phase\")\np2 &lt;- DimPlot(merged_seurat,\n              reduction = \"pca\",\n              group.by= \"Phase\",\n              split.by = \"Phase\")\nplot_grid(p1, p2, ncol = 2, labels = \"AUTO\")\n\n\n\n\n可以看到细胞周期不是变异来源。\n评估线粒体基因的影响\n\n# Check quartile values\nmito_sum &lt;- summary(merged_seurat$mitoRatio)\nmito_sum\n\n     Min.   1st Qu.    Median      Mean   3rd Qu.      Max. \n0.0006859 0.0106660 0.0127552 0.0129526 0.0150420 0.0407058 \n\n# Turn mitoRatio into categorical factor vector based on quartile values\nmerged_seurat$mitoFr &lt;- cut(merged_seurat$mitoRatio, \n                            breaks=c(-Inf, mito_sum[2], mito_sum[3], mito_sum[5], Inf),\n                            labels=c(\"Low\", \"Medium\", \"Medium high\", \"High\"))\nplot(merged_seurat$mitoFr)\n\n\n\n\n\n# Plot the PCA colored by cell cycle phase\np1 &lt;- DimPlot(merged_seurat,\n              reduction = \"pca\",\n              group.by= \"mitoFr\")\np2 &lt;- DimPlot(merged_seurat,\n              reduction = \"pca\",\n              group.by= \"mitoFr\",\n              split.by = \"mitoFr\")\nplot_grid(p1, p2, ncol = 2, labels = \"AUTO\")\n\n\n\n\n可以看到线粒体基因比例不是变异来源。\n由于细胞周期和线粒体基因比例都不是非期望变异来源，所以我们这里不需要再次运行SCTransform来回归这些变量。接下来，直接进入数据整合环节。\n数据整合\n不进行整合时检验细胞分群情况\n\n# 查看降维信息\nnames(merged_seurat@reductions)\n\n[1] \"pca\"\n\n# Run UMAP\nmerged_seurat &lt;- RunUMAP(merged_seurat, \n                         dims = 1:40, \n                         reduction = \"pca\",\n                         reduction.name = \"umap.unintegrated\"); beep()\n\n# 分群\n# Determine the K-nearest neighbor graph\nmerged_seurat &lt;- FindNeighbors(merged_seurat, \n                               dims = 1:40, \n                               reduction = \"pca\")\nmerged_seurat &lt;- FindClusters(merged_seurat, \n                              cluster.name = \"unintegrated_clusters\")\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 48584\nNumber of edges: 1937300\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9298\nNumber of communities: 38\nElapsed time: 6 seconds\n\n# Plot UMAP\np1 &lt;- DimPlot(merged_seurat, \n              reduction = \"umap.unintegrated\",\n              group.by = \"samples\")\np2 &lt;- DimPlot(merged_seurat, \n              reduction = \"umap.unintegrated\",\n              split.by = \"samples\")\nplot_grid(p1, p2, \n          ncol = 1, labels = \"AUTO\")\n\n\n\n# 由于样本数较多，我们再按照样本类型“Normal” vs. “Cancer”画一下UMAP图\nmerged_seurat$groups &lt;- ifelse(merged_seurat$samples == \"N01\", \"Normal\", \"Cancer\")\np1a &lt;- DimPlot(merged_seurat, \n               reduction = \"umap.unintegrated\",\n               group.by = \"groups\")\np2a &lt;- DimPlot(merged_seurat, \n               reduction = \"umap.unintegrated\",\n               split.by = \"groups\")\nplot_grid(p1a, p2a, \n          ncol = 1, labels = \"AUTO\")\n\n\n\n\n整合\n这里我们用Harmony整合算法。\n\n# 整合，比较耗时间，进度条会一直显示0%直至运算完成\nseurat_integrated &lt;- IntegrateLayers(object = merged_seurat,\n                                     method = HarmonyIntegration,\n                                     assay = \"SCT\", # Integrating SCTransformed data\n                                     orig.reduction = \"pca\",\n                                     verbose = FALSE); beep()\n\n\n# 整合后合并RNA layer\nseurat_integrated[[\"RNA\"]] &lt;- JoinLayers(seurat_integrated[[\"RNA\"]])\n\n# 查看整合后的降维信息\nnames(seurat_integrated@reductions)\n\n[1] \"pca\"               \"umap.unintegrated\" \"harmony\"          \n\n\n整合后检验细胞分群情况\n\nset.seed(123456)\n# Run UMAP\nseurat_integrated &lt;- RunUMAP(seurat_integrated, \n                             dims = 1:40,\n                             reduction = \"harmony\", # 更改降维来源为整合后的\"harmony\"\n                             reduction.name = \"umap.integrated\"); beep()\nnames(seurat_integrated@reductions)\n\n[1] \"pca\"               \"umap.unintegrated\" \"harmony\"          \n[4] \"umap.integrated\"  \n\n# 分群\nseurat_integrated &lt;- FindNeighbors(seurat_integrated, \n                                   dims = 1:40, \n                                   reduction = \"harmony\") #更改降维来源为\"harmony\"\nseurat_integrated &lt;- FindClusters(seurat_integrated, \n                                  cluster.name = \"integrated_clusters\")\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 48584\nNumber of edges: 2161498\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9121\nNumber of communities: 24\nElapsed time: 8 seconds\n\ncolnames(seurat_integrated@meta.data)\n\n [1] \"orig.ident\"            \"nCount_RNA\"            \"nFeature_RNA\"         \n [4] \"samples\"               \"log10GenesPerUMI\"      \"mitoRatio\"            \n [7] \"cells\"                 \"nCount_SCT\"            \"nFeature_SCT\"         \n[10] \"S.Score\"               \"G2M.Score\"             \"Phase\"                \n[13] \"mitoFr\"                \"unintegrated_clusters\" \"seurat_clusters\"      \n[16] \"groups\"                \"integrated_clusters\"  \n\n# Plot UMAP                             \np3 &lt;- DimPlot(seurat_integrated, \n              reduction = \"umap.integrated\", \n              group.by = \"samples\")\np4 &lt;- DimPlot(seurat_integrated, \n              reduction = \"umap.integrated\", \n              split.by = \"samples\")\nplot_grid(p1, p3, p2, p4, \n          ncol = 1, \n          labels = c(\"Before Harmony\", \"After Harmony\", \n                     \"Before Harmony\", \"After Harmony\"))\n\n\n\n# 保存\nsaveRDS(seurat_integrated, \n        file = \"output/sc_supplementary/GSE150430_seurat_integrated.RDS\"); beep()\n\n聚类\n\nrm(list = ls())\ngc()\n\n             used   (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb)\nNcells    8423688  449.9   15406287   822.8         NA   12102744   646.4\nVcells 1189109624 9072.2 3232715316 24663.7     102400 3232715179 24663.7\n\nseurat_integrated &lt;- readRDS(\"output/sc_supplementary/GSE150430_seurat_integrated.RDS\")\n\n\n# Determine the clusters for various resolutions                                \nseurat_integrated &lt;- FindClusters(seurat_integrated,\n                                  resolution = c(0.01, 0.05, 0.1, 0.2, 0.3, 0.4, 0.5, 0.8, 1),\n                                  verbose = F); beep()\n# Explore resolutions\nhead(seurat_integrated@meta.data, 5)\n\n                       orig.ident nCount_RNA nFeature_RNA samples\nN01_CAGAATCAGTAATCCC.1        N01   3470.970         4173     N01\nN01_TGCGGGTAGTACGTAA.1        N01   3155.725         2994     N01\nN01_AAACCTGAGGGTTTCT.1        N01   2347.034         1946     N01\nN01_AAACCTGAGTTCCACA.1        N01   2362.495         1993     N01\nN01_AAACCTGGTTCTCATT.1        N01   2130.465         1459     N01\n                       log10GenesPerUMI   mitoRatio                  cells\nN01_CAGAATCAGTAATCCC.1        1.0225953 0.008644269 N01_CAGAATCAGTAATCCC.1\nN01_TGCGGGTAGTACGTAA.1        0.9934705 0.009895666 N01_TGCGGGTAGTACGTAA.1\nN01_AAACCTGAGGGTTTCT.1        0.9758564 0.015183419 N01_AAACCTGAGGGTTTCT.1\nN01_AAACCTGAGTTCCACA.1        0.9781039 0.014965958 N01_AAACCTGAGTTCCACA.1\nN01_AAACCTGGTTCTCATT.1        0.9506023 0.017437508 N01_AAACCTGGTTCTCATT.1\n                       nCount_SCT nFeature_SCT     S.Score    G2M.Score Phase\nN01_CAGAATCAGTAATCCC.1       1840         1674 -0.05179250 -0.070444626    G1\nN01_TGCGGGTAGTACGTAA.1       2840         2604 -0.04341940 -0.074302336    G1\nN01_AAACCTGAGGGTTTCT.1       2443         1931 -0.02396942 -0.007239586    G1\nN01_AAACCTGAGTTCCACA.1       2488         1972 -0.01294260 -0.021167805    G1\nN01_AAACCTGGTTCTCATT.1       2104         1451 -0.05440456 -0.049531592    G1\n                            mitoFr unintegrated_clusters seurat_clusters groups\nN01_CAGAATCAGTAATCCC.1         Low                    20              20 Normal\nN01_TGCGGGTAGTACGTAA.1         Low                    32              20 Normal\nN01_AAACCTGAGGGTTTCT.1        High                     0               0 Normal\nN01_AAACCTGAGTTCCACA.1 Medium high                     1               3 Normal\nN01_AAACCTGGTTCTCATT.1        High                     1               8 Normal\n                       integrated_clusters SCT_snn_res.0.01 SCT_snn_res.0.05\nN01_CAGAATCAGTAATCCC.1                  18                2                2\nN01_TGCGGGTAGTACGTAA.1                  18                2                2\nN01_AAACCTGAGGGTTTCT.1                   0                1                1\nN01_AAACCTGAGTTCCACA.1                   0                1                1\nN01_AAACCTGGTTCTCATT.1                   7                1                1\n                       SCT_snn_res.0.1 SCT_snn_res.0.2 SCT_snn_res.0.3\nN01_CAGAATCAGTAATCCC.1               2               2               1\nN01_TGCGGGTAGTACGTAA.1               2               2               1\nN01_AAACCTGAGGGTTTCT.1               0               0               0\nN01_AAACCTGAGTTCCACA.1               0               0               0\nN01_AAACCTGGTTCTCATT.1               0               0               0\n                       SCT_snn_res.0.4 SCT_snn_res.0.5 SCT_snn_res.0.8\nN01_CAGAATCAGTAATCCC.1               1              15              18\nN01_TGCGGGTAGTACGTAA.1               1              15              18\nN01_AAACCTGAGGGTTTCT.1               0               0               0\nN01_AAACCTGAGTTCCACA.1               0               0               0\nN01_AAACCTGGTTCTCATT.1               0               8               7\n                       SCT_snn_res.1\nN01_CAGAATCAGTAATCCC.1            20\nN01_TGCGGGTAGTACGTAA.1            20\nN01_AAACCTGAGGGTTTCT.1             0\nN01_AAACCTGAGTTCCACA.1             3\nN01_AAACCTGGTTCTCATT.1             8\n\n# 查看各个分辨率下的细胞分群情况\nselect(seurat_integrated@meta.data, starts_with(match = \"SCT_snn_res.\")) %&gt;%  \n  lapply(levels)\n\n$SCT_snn_res.0.01\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\"\n\n$SCT_snn_res.0.05\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\"\n\n$SCT_snn_res.0.1\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\"\n\n$SCT_snn_res.0.2\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\"\n\n$SCT_snn_res.0.3\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\"\n[16] \"15\" \"16\"\n\n$SCT_snn_res.0.4\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\"\n[16] \"15\" \"16\" \"17\"\n\n$SCT_snn_res.0.5\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\"\n[16] \"15\" \"16\" \"17\" \"18\" \"19\" \"20\"\n\n$SCT_snn_res.0.8\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\"\n[16] \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\"\n\n$SCT_snn_res.1\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\" \"13\" \"14\"\n[16] \"15\" \"16\" \"17\" \"18\" \"19\" \"20\" \"21\" \"22\" \"23\" \"24\" \"25\"\n\n\n绘制聚类树展示不同分辨率下的细胞分群情况及相互关系\n\ntree &lt;- clustree(seurat_integrated@meta.data, \n                 prefix = \"SCT_snn_res.\")#指定包含聚类信息的列\ntree\n\n\n\n\n通常情况下，为了决定合适的聚类分辨率，可使用以下两种策略：\n\n选择透明箭头出现较少的分辨率聚类结果\n基于marker基因表达选择有生物学意义的分辨率聚类结果\n\n接下来分析，按照分辨率为0.5进行\n\nIdents(seurat_integrated) &lt;- \"SCT_snn_res.0.5\"\n\n聚类可视化\n\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap.integrated\",\n        label = FALSE)\n\n\n\n\n细胞分群质量评估\n分析样本类型是否影响细胞分群\n\n# 先简单查看不同cluster的细胞数\ntable(seurat_integrated@active.ident)\n\n\n    0     1     2     3     4     5     6     7     8     9    10    11    12 \n10830  5756  5526  5321  4161  3765  2388  2365  1952  1478   986   792   759 \n   13    14    15    16    17    18    19    20 \n  707   398   388   232   214   198   189   179 \n\n# 查看不同样本类型中的细胞分群情况\nDimPlot(seurat_integrated, \n        reduction = \"umap.integrated\",\n        label = TRUE, \n        split.by = \"groups\") + \n  NoLegend()\n\n\n\n\n分析细胞周期是否影响细胞分群\n\n# Explore whether clusters segregate by cell cycle phase\nDimPlot(seurat_integrated,\n        reduction = \"umap.integrated\",\n        label = TRUE, \n        split.by = \"Phase\") + \n  NoLegend()\n\n\n\n\n分析其他非期望变异来源是否会影响细胞分群\n\n# Determine metrics to plot present in seurat_clustered@meta.data\nmetrics &lt;-  c(\"nCount_RNA\", \"nFeature_RNA\", \"S.Score\", \"G2M.Score\", \"mitoRatio\")\n\nFeaturePlot(seurat_integrated, \n            reduction = \"umap.integrated\", \n            features = metrics,\n            pt.size = 0.4, \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n保存\n\nsaveRDS(seurat_integrated, \n        file = \"output/sc_supplementary/GSE150430_seurat_clustered.RDS\"); beep()\n\n细胞注释\n探索cell type markers的表达\n这里的marker基因选用 Section 29.3 中的细胞初步分群通用marker。\n\nrm(list = ls())\ngc()\n\n             used   (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb)\nNcells    8509717  454.5   15406287   822.8         NA   15406287   822.8\nVcells 1006106395 7676.0 3232715316 24663.7     102400 3232715179 24663.7\n\nseurat_clustered &lt;- readRDS(\"output/sc_supplementary/GSE150430_seurat_clustered.RDS\")\n\ngenes_to_check = c('PTPRC', \n                   \"CD163\",\"AIF1\", \n                   'CD3D', 'CD3E', 'CD4', 'CD8A', \n                   'CD19', 'CD79A', 'MS4A1', \"SDC1\", \"CD27\", \"CD38\",\n                   'IGHG1', 'MZB1', 'SDC1', \"JCHAIN\", \n                   'CD68', 'CD163', 'CD14', \n                   'S100A9', 'S100A8', 'MMP19',\n                   'C1QA',  'C1QB', \n                   'TPSAB1', 'TPSB2', \n                   'KLRB1', \"KLRD1\", 'NCR1', \"GNLY\", \"NKG7\", \n                   'FGF7', 'MME', 'ACTA2', \"COL3A1\", \n                   'PECAM1', 'VWF', \n                   'EPCAM', 'KRT19', 'PROM1', 'ALDH1A1') |&gt; unique()\n\nDotPlot(seurat_clustered, \n        features = genes_to_check) + \n  coord_flip()\n\n\n\n\n手动注释\n\nseurat_clustered &lt;- RenameIdents(seurat_clustered, \n                                 \"0\" = \"B cells\",\n                                 \"1\" = \"T cells\",\n                                 \"2\" = \"Epithelial/cancer\",\n                                 \"3\" = \"T cells\",\n                                 \"4\" = \"T cells\",\n                                 \"5\" = \"Macrophages\",\n                                 \"6\" = \"T cells\",\n                                 \"7\" = \"Plasma cells\",\n                                 \"8\" = \"B cells\",\n                                 \"9\" = \"Epithelial/cancer\",\n                                 \"10\" = \"B cells\",\n                                 \"11\" = \"B cells\",\n                                 \"12\" = \"Unknown\",\n                                 \"13\" = \"NK cells\",\n                                 \"14\" = \"Unknown\",\n                                 \"15\" = \"Epithelial/cancer\",\n                                 \"16\" = \"Myeloid (unspecific)\",\n                                 \"17\" = \"Epithelial/cancer\",\n                                 \"18\" = \"Epithelial/cancer\",\n                                 \"19\" = \"Epithelial/cancer\",\n                                 \"20\" = \"B cells\")\ntable(Idents(seurat_clustered))\n\n\n             B cells              T cells    Epithelial/cancer \n               14739                17626                 7993 \n         Macrophages         Plasma cells              Unknown \n                3765                 2365                 1157 \n            NK cells Myeloid (unspecific) \n                 707                  232 \n\n# Plot the UMAP\nDimPlot(seurat_clustered, \n        reduction = \"umap.integrated\", \n        label = T)\n\n\n\n\n在注释好的数据中再次检查marker基因的表达情况：\n\nDotPlot(seurat_clustered, \n        features = genes_to_check) + \n  coord_flip() +\n  theme(axis.text.x = element_text(angle = 30,vjust = 0.85,hjust = 0.75)\n) \n\n\n\n\n因为接下来我们要提取髓系细胞进一步分析，所以通过几种可视化方法检查一下髓系细胞通用marker（CD163和AIF1）的表达情况：\n\nRidgePlot(seurat_clustered, features = c(\"CD163\", \"AIF1\"), ncol = 1)\n\n\n\n\n\nVlnPlot(seurat_clustered, features = c(\"CD163\", \"AIF1\"))\n\n\n\n\n\nFeaturePlot(seurat_clustered, features = c(\"CD163\", \"AIF1\"), label = T)\n\n\n\n\n保存\n\nsaveRDS(seurat_clustered, \n        file = \"output/sc_supplementary/GSE150430_seurat_annotated.RDS\"); beep()\n\n提取髓系细胞\n\nsub_seurat &lt;- subset(seurat_clustered, \n                     idents = c(\"Macrophages\", \n                                \"Myeloid (unspecific)\"))\nsub_seurat\n\nAn object of class Seurat \n46357 features across 3997 samples within 2 assays \nActive assay: SCT (21637 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 1 other assay present: RNA\n 4 dimensional reductions calculated: pca, umap.unintegrated, harmony, umap.integrated\n\ncolnames(sub_seurat@meta.data)\n\n [1] \"orig.ident\"            \"nCount_RNA\"            \"nFeature_RNA\"         \n [4] \"samples\"               \"log10GenesPerUMI\"      \"mitoRatio\"            \n [7] \"cells\"                 \"nCount_SCT\"            \"nFeature_SCT\"         \n[10] \"S.Score\"               \"G2M.Score\"             \"Phase\"                \n[13] \"mitoFr\"                \"unintegrated_clusters\" \"seurat_clusters\"      \n[16] \"groups\"                \"integrated_clusters\"   \"SCT_snn_res.0.01\"     \n[19] \"SCT_snn_res.0.05\"      \"SCT_snn_res.0.1\"       \"SCT_snn_res.0.2\"      \n[22] \"SCT_snn_res.0.3\"       \"SCT_snn_res.0.4\"       \"SCT_snn_res.0.5\"      \n[25] \"SCT_snn_res.0.8\"       \"SCT_snn_res.1\"        \n\nmyeloid_seurat &lt;- CreateSeuratObject(counts = sub_seurat@assays[[\"RNA\"]],\n                                     meta.data = sub_seurat@meta.data[,c(1:7, 10:13, 16)])\nmyeloid_seurat\n\nAn object of class Seurat \n24720 features across 3997 samples within 1 assay \nActive assay: RNA (24720 features, 0 variable features)\n 1 layer present: counts\n\n\n\n\n\n\n\n\nWarning\n\n\n\n可以看到在重新创建Seurat之后，默认的“RNA” assay之中只有一个layer。为了后面执行SCTransform及整合，这里需要将其按照样本拆分成不同的layers。\n\nmyeloid_seurat[[\"RNA\"]] &lt;- split(myeloid_seurat[[\"RNA\"]], \n                                 f = myeloid_seurat$samples)\nmyeloid_seurat\n\nAn object of class Seurat \n24720 features across 3997 samples within 1 assay \nActive assay: RNA (24720 features, 0 variable features)\n 16 layers present: counts.N01, counts.P01, counts.P02, counts.P03, counts.P04, counts.P05, counts.P06, counts.P07, counts.P08, counts.P09, counts.P10, counts.P11, counts.P12, counts.P13, counts.P14, counts.P15\n\n\n\n\n\n# 补充原细胞注释信息\nmyeloid_seurat$old_clusters &lt;- Idents(sub_seurat)\ntable(myeloid_seurat$old_clusters)\n\n\n         Macrophages Myeloid (unspecific) \n                3765                  232 \n\n# 保存\nsaveRDS(myeloid_seurat, file = \"output/sc_supplementary/GSE150430_myeloid_seurat.RDS\")\n\n髓系细胞进一步归一化、整合、降维、分群\nSCTransform、PCA\n\nrm(list = ls())\ngc()\n\n             used   (Mb) gc trigger    (Mb) limit (Mb)   max used    (Mb)\nNcells    8542995  456.3   15406287   822.8         NA   15406287   822.8\nVcells 1003510688 7656.2 3232715316 24663.7     102400 3232715179 24663.7\n\nmyeloid_seurat &lt;- readRDS(\"output/sc_supplementary/GSE150430_myeloid_seurat.RDS\")\n\n# SCTranform\nmyeloid_seurat &lt;- SCTransform(myeloid_seurat, verbose = FALSE)\nmyeloid_seurat\n\nAn object of class Seurat \n39690 features across 3997 samples within 2 assays \nActive assay: SCT (14970 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 1 other assay present: RNA\n\n# Check which assays are stored in objects\nmyeloid_seurat@assays\n\n$RNA\nAssay (v5) data with 24720 features for 3997 cells\nFirst 10 features:\n RP11-34P13.7, RP11-34P13.8, AL627309.1, AP006222.2, RP4-669L17.10,\nRP4-669L17.2, RP5-857K21.4, RP11-206L10.3, RP11-206L10.5, RP11-206L10.2 \nLayers:\n counts.N01, counts.P01, counts.P02, counts.P03, counts.P04, counts.P05,\ncounts.P06, counts.P07, counts.P08, counts.P09, counts.P10, counts.P11,\ncounts.P12, counts.P13, counts.P14, counts.P15 \n\n$SCT\nSCTAssay data with 14970 features for 3997 cells, and 16 SCTModel(s) \nTop 10 variable features:\n IL1RN, CLEC10A, PKIB, HBEGF, MSR1, IER3, LGMN, CA2, CFD, GLUL \n\n# 查看目前默认的assay\nDefaultAssay(myeloid_seurat)\n\n[1] \"SCT\"\n\n# 查看默认assay的layers\nLayers(myeloid_seurat)\n\n[1] \"counts\"     \"data\"       \"scale.data\"\n\n# 执行PCA\nmyeloid_seurat &lt;- RunPCA(myeloid_seurat)\n\n不进行整合时检查细胞分群情况：\n\n# 查看降维信息\nnames(myeloid_seurat@reductions)\n\n[1] \"pca\"\n\n# Run UMAP\nmyeloid_seurat &lt;- RunUMAP(myeloid_seurat, \n                          dims = 1:40, \n                          reduction = \"pca\",\n                          reduction.name = \"umap.unintegrated\")\n\n# 分群\n# Determine the K-nearest neighbor graph\nmyeloid_seurat &lt;- FindNeighbors(myeloid_seurat, \n                                dims = 1:40, \n                                reduction = \"pca\")\nmyeloid_seurat &lt;- FindClusters(myeloid_seurat, \n                               cluster.name = \"unintegrated_clusters\")\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 3997\nNumber of edges: 211202\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.7202\nNumber of communities: 8\nElapsed time: 0 seconds\n\n# Plot UMAP\np1 &lt;- DimPlot(myeloid_seurat, \n              reduction = \"umap.unintegrated\",\n              group.by = \"samples\")\np2 &lt;- DimPlot(myeloid_seurat, \n              reduction = \"umap.unintegrated\",\n              split.by = \"samples\")\nplot_grid(p1, p2, \n          ncol = 1, labels = \"AUTO\")\n\n\n\n\n整合\n\n# 整合\nmyeloid_integrated &lt;- IntegrateLayers(object = myeloid_seurat,\n                                      method = HarmonyIntegration,\n                                      verbose = FALSE)\n\n\n# 整合后合并RNA layer\nmyeloid_integrated[[\"RNA\"]] &lt;- JoinLayers(myeloid_integrated[[\"RNA\"]])\n\n# 查看整合后的降维信息\nnames(myeloid_integrated@reductions)\n\n[1] \"pca\"               \"umap.unintegrated\" \"harmony\"          \n\n\n整合后检验细胞分群情况\n\nset.seed(123456)\n# Run UMAP\nmyeloid_integrated &lt;- RunUMAP(myeloid_integrated, \n                              dims = 1:40,\n                              reduction = \"harmony\", # 更改降维来源为整合后的\"harmony\"\n                              reduction.name = \"umap.integrated\")\nnames(myeloid_integrated@reductions)\n\n[1] \"pca\"               \"umap.unintegrated\" \"harmony\"          \n[4] \"umap.integrated\"  \n\n# 分群\nmyeloid_integrated &lt;- FindNeighbors(myeloid_integrated, \n                                    dims = 1:40, \n                                    reduction = \"harmony\") #更改降维来源为\"harmony\"\nmyeloid_integrated &lt;- FindClusters(myeloid_integrated, \n                                   cluster.name = \"integrated_clusters\")\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 3997\nNumber of edges: 290917\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.7795\nNumber of communities: 10\nElapsed time: 0 seconds\n\ncolnames(myeloid_integrated@meta.data)\n\n [1] \"orig.ident\"            \"nCount_RNA\"            \"nFeature_RNA\"         \n [4] \"samples\"               \"log10GenesPerUMI\"      \"mitoRatio\"            \n [7] \"cells\"                 \"S.Score\"               \"G2M.Score\"            \n[10] \"Phase\"                 \"mitoFr\"                \"groups\"               \n[13] \"old_clusters\"          \"nCount_SCT\"            \"nFeature_SCT\"         \n[16] \"unintegrated_clusters\" \"seurat_clusters\"       \"integrated_clusters\"  \n\n# Plot UMAP                             \np3 &lt;- DimPlot(myeloid_integrated, \n              reduction = \"umap.integrated\", \n              group.by = \"samples\")\np4 &lt;- DimPlot(myeloid_integrated, \n              reduction = \"umap.integrated\", \n              split.by = \"samples\")\nplot_grid(p1, p3, p2, p4, \n          ncol = 1, \n          labels = c(\"Before Harmony\", \"After Harmony\", \n                     \"Before Harmony\", \"After Harmony\"))\n\n\n\n\n聚类\n\n# Determine the clusters for various resolutions                                \nmyeloid_integrated &lt;- FindClusters(myeloid_integrated,\n                                   resolution = c(0.01, 0.05, 0.1, 0.2, 0.3, \n                                                  0.4, 0.5, 0.8, 1),\n                                   verbose = F)\n# Explore resolutions\nhead(myeloid_integrated@meta.data, 5)\n\n                       orig.ident nCount_RNA nFeature_RNA samples\nN01_AGCGTCGAGTGAAGAG.1        N01   2691.228         2086     N01\nN01_GCAATCATCAGCCTAA.1        N01   2139.759         1566     N01\nN01_CGTGTAATCCCACTTG.1        N01   2251.166         1803     N01\nN01_AAACGGGCATTTCAGG.1        N01   1909.545         1226     N01\nN01_AAAGATGCAATGTAAG.1        N01   1796.109         1360     N01\n                       log10GenesPerUMI   mitoRatio                  cells\nN01_AGCGTCGAGTGAAGAG.1        0.9677441 0.010726702 N01_AGCGTCGAGTGAAGAG.1\nN01_GCAATCATCAGCCTAA.1        0.9592918 0.018235699 N01_GCAATCATCAGCCTAA.1\nN01_CGTGTAATCCCACTTG.1        0.9712410 0.017482940 N01_CGTGTAATCCCACTTG.1\nN01_AAACGGGCATTTCAGG.1        0.9413461 0.011039803 N01_AAACGGGCATTTCAGG.1\nN01_AAAGATGCAATGTAAG.1        0.9628822 0.006095955 N01_AAAGATGCAATGTAAG.1\n                            S.Score   G2M.Score Phase mitoFr groups\nN01_AGCGTCGAGTGAAGAG.1 -0.093324147 -0.04497299    G1 Medium Normal\nN01_GCAATCATCAGCCTAA.1  0.008569604 -0.03484456     S   High Normal\nN01_CGTGTAATCCCACTTG.1 -0.013729028 -0.05064395    G1   High Normal\nN01_AAACGGGCATTTCAGG.1 -0.005136538 -0.03723796    G1 Medium Normal\nN01_AAAGATGCAATGTAAG.1 -0.039476505 -0.04625311    G1    Low Normal\n                               old_clusters nCount_SCT nFeature_SCT\nN01_AGCGTCGAGTGAAGAG.1          Macrophages       2455         1929\nN01_GCAATCATCAGCCTAA.1          Macrophages       2252         1505\nN01_CGTGTAATCCCACTTG.1          Macrophages       2359         1712\nN01_AAACGGGCATTTCAGG.1          Macrophages       2044         1197\nN01_AAAGATGCAATGTAAG.1 Myeloid (unspecific)       2271         1322\n                       unintegrated_clusters seurat_clusters\nN01_AGCGTCGAGTGAAGAG.1                     0               5\nN01_GCAATCATCAGCCTAA.1                     0               6\nN01_CGTGTAATCCCACTTG.1                     0               5\nN01_AAACGGGCATTTCAGG.1                     6               7\nN01_AAAGATGCAATGTAAG.1                     5              10\n                       integrated_clusters SCT_snn_res.0.01 SCT_snn_res.0.05\nN01_AGCGTCGAGTGAAGAG.1                   3                0                0\nN01_GCAATCATCAGCCTAA.1                   3                0                0\nN01_CGTGTAATCCCACTTG.1                   3                0                0\nN01_AAACGGGCATTTCAGG.1                   1                0                0\nN01_AAAGATGCAATGTAAG.1                   7                0                1\n                       SCT_snn_res.0.1 SCT_snn_res.0.2 SCT_snn_res.0.3\nN01_AGCGTCGAGTGAAGAG.1               0               0               3\nN01_GCAATCATCAGCCTAA.1               0               0               3\nN01_CGTGTAATCCCACTTG.1               0               0               3\nN01_AAACGGGCATTTCAGG.1               1               1               1\nN01_AAAGATGCAATGTAAG.1               3               4               5\n                       SCT_snn_res.0.4 SCT_snn_res.0.5 SCT_snn_res.0.8\nN01_AGCGTCGAGTGAAGAG.1               3               3               3\nN01_GCAATCATCAGCCTAA.1               3               3               3\nN01_CGTGTAATCCCACTTG.1               3               3               3\nN01_AAACGGGCATTTCAGG.1               1               1               1\nN01_AAAGATGCAATGTAAG.1               6               7               7\n                       SCT_snn_res.1\nN01_AGCGTCGAGTGAAGAG.1             5\nN01_GCAATCATCAGCCTAA.1             6\nN01_CGTGTAATCCCACTTG.1             5\nN01_AAACGGGCATTTCAGG.1             7\nN01_AAAGATGCAATGTAAG.1            10\n\n# 查看各个分辨率下的细胞分群情况\nselect(myeloid_integrated@meta.data, \n       starts_with(match = \"SCT_snn_res.\")) %&gt;%  \n  lapply(levels)\n\n$SCT_snn_res.0.01\n[1] \"0\"\n\n$SCT_snn_res.0.05\n[1] \"0\" \"1\"\n\n$SCT_snn_res.0.1\n[1] \"0\" \"1\" \"2\" \"3\"\n\n$SCT_snn_res.0.2\n[1] \"0\" \"1\" \"2\" \"3\" \"4\"\n\n$SCT_snn_res.0.3\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\"\n\n$SCT_snn_res.0.4\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\"\n\n$SCT_snn_res.0.5\n[1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\"\n\n$SCT_snn_res.0.8\n [1] \"0\" \"1\" \"2\" \"3\" \"4\" \"5\" \"6\" \"7\" \"8\" \"9\"\n\n$SCT_snn_res.1\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\"\n\n\n绘制聚类树展示不同分辨率下的细胞分群情况及相互关系\n\ntree &lt;- clustree(myeloid_integrated@meta.data, \n                 prefix = \"SCT_snn_res.\") # 指定包含聚类信息的列\ntree\n\n\n\n\n这里，选取分辨为0.2\n\nIdents(myeloid_integrated) &lt;- \"SCT_snn_res.0.2\"\n\n聚类可视化\n\n# Plot the UMAP\nDimPlot(myeloid_integrated,\n        reduction = \"umap.integrated\",\n        label = FALSE)\n\n\n\n\n细胞分群质量评估\n分析样本类型是否影响细胞分群\n\n# 先简单查看不同cluster的细胞数\ntable(myeloid_integrated@active.ident)\n\n\n   0    1    2    3    4 \n1708 1133  613  352  191 \n\n# 查看不同样本类型中的细胞分群情况\nDimPlot(myeloid_integrated, \n        reduction = \"umap.integrated\",\n        label = TRUE, \n        split.by = \"groups\") + \n  NoLegend()\n\n\n\n\n分析细胞周期是否影响细胞分群\n\n# Explore whether clusters segregate by cell cycle phase\nDimPlot(myeloid_integrated,\n        reduction = \"umap.integrated\",\n        label = TRUE, \n        split.by = \"Phase\") + \n  NoLegend()\n\n\n\n\n分析其他非期望变异来源是否会影响细胞分群\n\n# Determine metrics to plot present in seurat_clustered@meta.data\nmetrics &lt;-  c(\"nCount_RNA\", \"nFeature_RNA\", \"S.Score\", \"G2M.Score\", \"mitoRatio\")\n\nFeaturePlot(myeloid_integrated, \n            reduction = \"umap.integrated\", \n            features = metrics,\n            pt.size = 0.4, \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n\n\n\n\n保存\n\nsaveRDS(myeloid_integrated, \n        file = \"output/sc_supplementary/GSE150430_myeloid_clustered.RDS\")\n\n亚群细胞注释\n\n\n\n\n\n\nGong, Lanqi, Jie Luo, Yu Zhang, Yuma Yang, Shanshan Li, Xiaona Fang, Baifeng Zhang, et al. 2023. “Nasopharyngeal Carcinoma Cells Promote Regulatory T Cell Development and Suppressive Activity via CD70-CD27 Interaction.” Nature Communications 14 (1). https://doi.org/10.1038/s41467-023-37614-6."
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#安装shinylive包",
    "href": "quarto_foundation/quarto_shiny.html#安装shinylive包",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.1 安装shinylive包",
    "text": "35.1 安装shinylive包\n要实现Shiny应用程序的嵌入，需要依赖shinylive包，可以从CRAN直接安装该包：\ninstall.packages(\"shinylive\")"
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#建立quarto-project",
    "href": "quarto_foundation/quarto_shiny.html#建立quarto-project",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.2 建立Quarto Project",
    "text": "35.2 建立Quarto Project\n创建Quarto项目的方法详见 Section 31.1 。需要注意的是，shinylive 扩展程序必须在 Quarto 项目目录内使用，否则在尝试渲染文档时会报错。错误信息如下：\nERROR:\nThe shinylive extension must be used in a Quarto project directory\n(with a _quarto.yml file)."
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#安装shinylive扩展程序",
    "href": "quarto_foundation/quarto_shiny.html#安装shinylive扩展程序",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.3 安装shinylive扩展程序\n",
    "text": "35.3 安装shinylive扩展程序\n\n为Quarto安装shinylive扩展程序。在Rstudio终端（Terminal）面板中输入：\nquarto add quarto-ext/shinylive"
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#yaml设置",
    "href": "quarto_foundation/quarto_shiny.html#yaml设置",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.4 YAML设置",
    "text": "35.4 YAML设置\n为了让Quarto能够调用Shiny应用程序，需要在Quarto文档的YAML设置中加上filters-shinylive命令，如下：\ntitle: \"Our first r-shinylive Quarto document!\"\nfilters:\n  - shinylive\n---"
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#编写shiny程序",
    "href": "quarto_foundation/quarto_shiny.html#编写shiny程序",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.5 编写Shiny程序",
    "text": "35.5 编写Shiny程序\n我们需要把Shiny程序的代码放到一个特殊的{shinylive-r}代码块内：\n```{shinylive-r}\n#| standalone: true\n\nlibrary(shiny)\n\n# Define your Shiny UI here\nui &lt;- fluidPage(\n  # Your UI components go here\n)\n\n# Define your Shiny server logic here\nserver &lt;- function(input, output, session) {\n  # Your server code goes here\n}\n\n# Create and launch the Shiny app\nshinyApp(ui, server)\n```\n\n\n\n\n\n\nCaution\n\n\n\n{shinylive-r}代码块必须包含 #| standalone: true，这表示代码代表了一个完整的独立 Shiny 应用程序。目前，我们需要把完整的Shiny应用程序的代码，包括ui、server等全部包括进一个代码块内。未来，Quarto可能会支持在一个qmd文档内的多个代码块内分别包含ui、server等结构。"
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#渲染quarto文档",
    "href": "quarto_foundation/quarto_shiny.html#渲染quarto文档",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.6 渲染Quarto文档",
    "text": "35.6 渲染Quarto文档\n编写好所有内容后，我们即可以通过点击“Render”按钮渲染嵌入了Shiny应用程序的Quarto文档了。渲染后，会在我们的Quarto项目根目录下生成一个_extensions文件夹，其结构如下："
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#发布quarto文档",
    "href": "quarto_foundation/quarto_shiny.html#发布quarto文档",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.7 发布Quarto文档",
    "text": "35.7 发布Quarto文档\n一旦制作完成了令人满意的Quarto文档，就可以GitHub Pages和Quarto Pub等通过多种途径发布您的作品了。后面，我们对如何发布GitHub Pages有详细的说明（ Chapter 37 ）。\n\n\n\n\n\n\nTip\n\n\n\n更多关于shinylive的信息，参阅：R-shinylive app in Quarto!"
  },
  {
    "objectID": "quarto_foundation/quarto_shiny.html#案例",
    "href": "quarto_foundation/quarto_shiny.html#案例",
    "title": "\n35  在Quarto中嵌入Shiny应用程序\n",
    "section": "\n35.8 案例",
    "text": "35.8 案例\n案例一\n下面是一个来自Shiny官方入门指南中的案例：\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\n\n# Define UI ----\nui &lt;- fluidPage(\n\n  # App title ----\n  titlePanel(\"Hello World!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 5,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver &lt;- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot &lt;- renderPlot({\n\n    x    &lt;- faithful$waiting\n    bins &lt;- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"#007bc2\", border = \"orange\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\")\n\n    })\n\n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n代码：\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n案例二\n来自：shinylive-in-book-test\n#| standalone: true\n#| viewerHeight: 500\n#| label: fig-shiny-spline\n\nlibrary(ggplot2)\nlibrary(htmltools)\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    imageOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\n\nserver &lt;- function(input, output, session) {\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations on GitHub\n  \n  pred_path &lt;-\n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"predicted_values.RData\",                     \n      sep = \"/\"                                             \n    )                                                       \n  data_path &lt;-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"sim_val.RData\",                              \n      sep = \"/\"                                             \n    )                                                       \n  \n  rdata_file &lt;- tempfile()\n  download.file(pred_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  download.file(data_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  \n  # Set some ranges for the plot\n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n  \n  output$spline_contours &lt;-\n    renderImage({\n      \n      preds &lt;- predicted_values[predicted_values$deg_free == input$deg_free,]\n      \n      p &lt;-\n        ggplot(preds, aes(A, B)) +\n        # Plot the validation set\n        geom_point(\n          data = sim_val, \n          aes(col = class, pch = class), \n          alpha = 1 / 2,\n          cex = 3\n        ) +\n        # Show the class boundary\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1 / 2,\n          linewidth = 3 / 2,\n          col = \"black\"\n        ) +\n        # Formatting\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n      \n      file &lt;-\n        htmltools::capturePlot(\n          print(p), \n          tempfile(fileext = \".svg\"),\n          grDevices::svg,\n          width = 4, \n          height = 4\n        )\n      list(src = file)\n    }, \n    deleteFile = TRUE)\n}\n\nshinyApp(ui = ui, server = server)\n代码：\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| label: fig-shiny-spline\n\nlibrary(ggplot2)\nlibrary(htmltools)\n\nui &lt;- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    imageOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\n\nserver &lt;- function(input, output, session) {\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations on GitHub\n  \n  pred_path &lt;-\n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"predicted_values.RData\",                     \n      sep = \"/\"                                             \n    )                                                       \n  data_path &lt;-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"sim_val.RData\",                              \n      sep = \"/\"                                             \n    )                                                       \n  \n  rdata_file &lt;- tempfile()\n  download.file(pred_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  download.file(data_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  \n  # Set some ranges for the plot\n  rngs &lt;- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n  \n  output$spline_contours &lt;-\n    renderImage({\n      \n      preds &lt;- predicted_values[predicted_values$deg_free == input$deg_free,]\n      \n      p &lt;-\n        ggplot(preds, aes(A, B)) +\n        # Plot the validation set\n        geom_point(\n          data = sim_val, \n          aes(col = class, pch = class), \n          alpha = 1 / 2,\n          cex = 3\n        ) +\n        # Show the class boundary\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1 / 2,\n          linewidth = 3 / 2,\n          col = \"black\"\n        ) +\n        # Formatting\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n      \n      file &lt;-\n        htmltools::capturePlot(\n          print(p), \n          tempfile(fileext = \".svg\"),\n          grDevices::svg,\n          width = 4, \n          height = 4\n        )\n      list(src = file)\n    }, \n    deleteFile = TRUE)\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] shiny_1.8.0\n\nloaded via a namespace (and not attached):\n [1] digest_0.6.33     later_1.3.2       R6_2.5.1          httpuv_1.6.13    \n [5] fastmap_1.1.1     xfun_0.41         magrittr_2.0.3    knitr_1.45       \n [9] htmltools_0.5.7   rmarkdown_2.25    lifecycle_1.0.4   promises_1.2.1   \n[13] cli_3.6.2         xtable_1.8-4      compiler_4.3.2    rstudioapi_0.15.0\n[17] tools_4.3.2       ellipsis_0.3.2    mime_0.12         evaluate_0.23    \n[21] Rcpp_1.0.11       yaml_2.3.8        rlang_1.1.2       jsonlite_1.8.8   \n[25] htmlwidgets_1.6.4"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#项目设置",
    "href": "quarto_foundation/quarto_books.html#项目设置",
    "title": "36  Quarto Books",
    "section": "\n36.1 项目设置",
    "text": "36.1 项目设置\n\n---\nproject:\n  type: book\n  output-dir: \"docs\" \n  execute-dir: project \n---\n\n\nproject：项目类型。定义了项目编译后的文档类型，包括default, website（Quarto Websites）和book（Quarto Book）。这里我们在新建项目时选择了Quarto Books，所以这里自动填写了book。\noutput-dir：输出文件夹。编译后的HTML文件、PDF文件以及运行code chunk后产生的图像、数据等的输出文件夹。上面的例子中将输出文件夹指定为”docs”文件夹可以方便将输出的HTML文件通过GitHub Pages发布（详见 Chapter 37 ）。\nexecute-dir：在编译时，各个qmd文件内的code chunk脚本运行的根目录，默认是file，即当前qmd文档所在目录，可设置为 “project”，这样在编译过程中执行代码块时会将脚本运行根目录设置为项目根目录。"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#书结构设置",
    "href": "quarto_foundation/quarto_books.html#书结构设置",
    "title": "36  Quarto Books",
    "section": "\n36.2 书结构设置",
    "text": "36.2 书结构设置\nbook参数定义了Quarto Book的章节结构以及顶栏、导航栏等内容。是Quarto Books的YAML配置的核心。\n标题/作者/日期信息\n\n---\nbook:\n  title: \"R语言数据科学\"\n  subtitle: \"从数据清洗到高级统计学和生物信息学\"\n  author: \"杜俊宏\"\n  date: 2023/11/10\n  date-format: \"YYYY[年]M[月]D[日]\"\n  cover-image: images/book_cover.png\n---\n\n\ntitle：标题。\nsubtitle：副标题。在标题下方以较小字号展示。\nauthor：作者姓名。\ndate：文档发行日期。日期既可以手动添加，如”2023/11/10”，也可以通过now（输出样式：2023年11月11日 19:01）或today（输出样式：2023年11月11日）自动生成日期。\ndate-format：日期格式（详见： Section 31.2.1 ）。\ncover-image：封面图片。\n\n\n\n\n\n\n\nTip\n\n\n\n上面列出的信息也可以在index.qmd文件中定义。\n\n\n\nchapter章节\n章节的定义是Quarto Books的YAML配置的核心。通过chapter函数将多个不同的qmd文件（章节）按照指定的顺序结合起来就形成了一本书或者网站。\n\n---\nbook:\n  chapters:\n    - text: 主页\n      file: index.qmd\n    - intro.qmd\n    - text: \"---\" \n    - part: r_basic/r_basics.qmd\n      chapters:\n        - r_basic/environment_configuration.qmd\n        - r_basic/data_input_output.qmd\n    - part: bioinformatics/single_cell/r_single_cell.qmd\n      chapters:\n        - bioinformatics/single_cell/seurat_command_list.qmd\n        - bioinformatics/single_cell/seurat_tutorial.qmd\n        - bioinformatics/single_cell/data_visualization_methods_in_seurat.qmd\n        - bioinformatics/single_cell/sctransform.qmd\n        - bioinformatics/single_cell/integration.qmd\n    - part: quarto_foundation/quarto_foundation.qmd\n      chapters:\n        - quarto_foundation/yaml_settings.qmd\n        - quarto_foundation/images_settings.qmd\n        - quarto_foundation/cross_references.qmd\n        - quarto_foundation/insert_other_content.qmd\n        - quarto_foundation/quarto_books.qmd\n        - quarto_foundation/github_pages.qmd\n    - text: \"---\"\n    - part: \"参考文献\"\n      chapters:\n        - references.qmd\n---\n\n\n\npart：如果一本书有大量的qmd文件（章节），那么我们可以按照不同的主题将这些qmd文件分成不同的篇章。part可以用qmd文件或者字符定义。如果提供的是qmd文件，那么该qmd文件在编译后会是该篇章的首页，并以单独的一个页面显示。每个篇章可由多个不同的qmd文件（章节）组成。篇章的首页内容会以单独的一个页面显示，一般写该篇章的内容概要。如果提供的是字符，那么这个篇章只会反映在左侧导航栏上，而不会有单独的篇章首页。如上面的part: \"参考文献\"。\n\nchapters：章节。在其下方列出需要包含的所有qmd文件。part和chapters共同完成对章节的组织。\n\ntext： “---”：分隔符。会在导航栏对应位置上显示一条横线。\n\n上面的配置在编译后的效果：\n\n侧边栏\n侧边栏是传统意义上的总目录，默认在网页的左侧显示，其内容反映了上面chapter中定义的章节编排。通过sidebar对侧边栏的样式、内容等进行进一步的设定。\n\n---\nbook:\n  sidebar:\n    style: \"docked\" \n    collapse-level: 1 \n    search: true \n    logo: images/logo.png \n    tools:\n      - icon: twitter \n        href: https://twitter.com \n      - icon: youtube\n        href: https://youtube.com\n---\n\n\nstyle：侧边导航栏的风格。默认为docked，固定导航栏。也可以选择浮动导航栏，floating。\ncollapse-level：侧边导航栏初始显示到多少级标题，默认显示到一级标题，只有当浏览到某一篇章时才会展开该篇章下的2级标题。\nsearch：是否打开侧边栏上的搜索框。注意如果开启了顶栏（见下一节顶部导航栏），那么搜索按钮会默认在顶栏显示。\nlogo：在侧边导航栏上方显示图像。\ntools：定制侧边栏工具。语法同下一节顶部导航栏中的left和right内的定义类似。\n\n采用上述配置后的侧边栏样式：\n\n顶部导航栏\n除了添加侧边导航栏之外，还可以通过navbar参数添加顶部导航栏。\n\n---\nbook:\n  navbar:\n    logo: images/logo.jpg\n    background: \"#f1f1f3\" \n    foreground: \"black\" \n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - file: intro.qmd\n      - text: \"Parts\"\n        menu:\n          - r_basic/r_basics.qmd\n          - bioinformatics/single_cell/r_single_cell.qmd\n          - quarto_foundation/quarto_foundation.qmd\n      - file: references.qmd\n    right:\n      - icon: book-fill\n        text: Bookdown\n        href: https://bookdown.org\n      - icon: github\n        text: GitHub\n        menu:\n          - text: Source Code\n            url: https://github.com/djhcod/r-notes\n          - text: Report a Bug\n            url: https://github.com/djhcod/r-notes/issues\n          - text: Pull Request\n            url: https://github.com/djhcod/r-notes/pulls\n---\n\n\nlogo：顶栏左侧的logo。\nbackground：顶栏背景色（默认为primary，网页主色）。\nforeground：顶栏字体颜色。\nsearch：是否在顶栏右侧显示搜索按钮。\n\nleft和right：分别定义顶栏左侧和右侧显示的内容：\n\nfile：qmd文件。qmd文件内的一级标题就是编译后显示在导航栏上的文字。\ntext：显示文字。在其下方添加qmd文件即可将文字链接到对应的qmd文件编译后的页面。这可以用于自定义某个qmd文件在导航栏上显示的文字。例如这里的index.qmd的标题是”主页”（title：主页），如果我们直接用file把它列出来，那么在导航栏上就会显示index.qmd的标题，即”主页”。但是我们通过text: \"Home\"，并在其下方接file: index.qmd，那么在编译后的HTML中顶栏上会显示”Home”文字，点击后还是链接到index.qmd编译后的首页。如果text下方提供的是url，那么点击该文字后就会跳转到指定网站。\nicon：图标，和text的作用类似。Quarto可以调用Bootstrap Icons图标库，只需指定图标在Bootstrap Icons网站中的的官方名字，如”github”、“twitter”，就可以直接调用该图标。\n\n\n\nFigure 36.1: Bootstrap Icons图标库\n\n\nmenu：下拉菜单。效果如 Figure 36.2 所示。\nurl和herf：效果类似，都是添加外部网址。\n\n\n\n\n\nFigure 36.2: 顶栏示例\n\n\n\n\n\n\n\nTip\n\n\n\n顶栏和侧边导航栏的更多设置，参考Quarto官方指南。\n\n\n右侧页内导航\n右侧页内导航显示的是当前页面的目录。可在book内的page-navigation和format-html内的toc相关函数中共同配置。\n\n\n---\nbook:\n  page-navigation: true\n  repo-url: https://github.com/djhcod/r-notes \n  repo-actions: [source, issue, edit] \n---\n\n\npage-navigation：是否打开右侧的页内导航。\nrepo-url：（可选）GitHub仓库的链接。\nrepo-actions：（可选）在右侧页内导航的下方显示导航到GitHub仓库各板块的链接。可选的值有source、issue、edit。如果是source，repo-actions会首先根据当前所浏览的页面，在repo-url定义的URL后加上当前页面源码的后缀（如”/blob/main/quarto_foundation/quarto_books.qmd”），这样就会得到一个指向GitHub项目中编译该页面的源码的链接。如果是edit则会在此链接的基础上再加上编辑该页面源码的后缀（“/edit/main/quarto_foundation/quarto_books.qmd”）。如果是issue则会在GitHub仓库链接的基础上加上定位到问题报告的后缀（“/issues/new”）。\n搜索框设置\nsearch可以用来指定搜索按钮的样式。同时，对于既有顶栏又有左侧导航栏的book，可以通过search来指定搜索按钮出现的位置。\n\n---\nbook:\n  search:\n    location: sidebar\n    type: textbox\n---\n\n\nlocation：搜索按钮的位置。默认为出现在顶栏（ ）最右侧（navbar）；也可以定义为sidebar，让其在侧边栏（ Section 36.2.3 ）的上方显示。\ntype：搜索按钮的样式。可以仅搜索图标（overlay），也可以展示搜索框（textbox）。\n页脚设置\n页脚出现在每个页面的最下面，通过page-footer统一配置。\n\n\nFigure 36.3: 页脚示例\n\n\n---\nbook:\n  page-footer:\n    left:\n      - text: \"This book was built with Quarto\"\n    center: \"Copyright 2023, Du Junhong\"\n    right:\n      - icon: github\n        href: https://github.com/djhcod\n    border: true  \n---\n\n页脚的配置和 Section 36.2.4 的语法基本一致，此处不再赘述。\n网站分享设置\n\n---\nbook:\n  favicon: images/logo.png # \n  sharing: [twitter, facebook] # \n  twitter-card: true\n  site-url: https://example.com\n---\n\n\n\nfavicon：网页的图标。会在标签页上显示。\n\n\n\n\nsharing：显示分享到社交网络图标。调用的是Bootstrap Icons图标库。效果如下：\n\n\n\n用户批注功能\nQuarto Books编译后的HTML网页支持配置Hypothesis标注功能。配置后不同的读者在登录Hypothesis账号后可以在页面上进行标注和评论。效果如下：\n\n\n---\nbook:\n  comments:\n    hypothesis:\n      theme: classic\n      openSidebar: false\n      showHighlights: always\n      enableExperimentalNewNoteButton: true\n---"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#format编译设置",
    "href": "quarto_foundation/quarto_books.html#format编译设置",
    "title": "36  Quarto Books",
    "section": "\n36.3 format编译设置",
    "text": "36.3 format编译设置\nformat定义了Quarto Books最终编译成的格式。Quarto Books可以编译成各种格式，如HTML、PDF、MS Word、EPub，或AsciiDoc。最常用和最好的编译格式是HTML。HTML books实际上是一种特殊类型的Quarto Website，因此支持包括全文搜索在内的网站功能。这两者最重要的一个区别是，HTML books能够使用章节编号，因此支持不同章节之间的交叉引用。因此下面只介绍编译成HTML的相关设置。\n\n---\nformat:\n  html:\n    theme:\n      light: Flatly \n      dark: darkly\n    embed-resources: false \n    code-tools: true\n    code-link: true\n    anchor-sections: true \n    link-external-newwindow: true \n    toc-depth: 3 \n    toc-expand: 1 \n---\n\n\ntheme：定义了编译文档的主题（详见： Section 31.3 ）。\nembed-resources：是否将所有源文件嵌入HTML文件以方便分享。默认为”false”。\ncode-tools：是否在网页右上角显示”&lt;code&gt;“按钮。点击该按钮可以看到Quarto文档的原始markdown代码。\ncode-link: 是否自动为函数加上超链接。该功能基于downlit包，可以自动为识别到的函数加上一个链接到官方文档的超链接。\nanchor-sections: 设置为true时，当鼠标移到各级标题上时会显示anchor link，方便我们复制直接定位到该标题的超链接。\nlink-external-icon：设置为true时会在外部链接上显示一个小图标。\nlink-external-newwindow：是否在新标签页打开外部链接。\ntoc：是否显示页内目录。对于HTML格式的Quarto Books，开启该选项后会在每个网页的右侧显示一个页面内的导航目录（ Section 36.2.5 ）。\ntoc-title：页内目录的标题。\ntoc-depth：设置页内目录显示的最低层级（默认为显示到3级标题）。\ntoc-expand：设置页内目录在一开始显示到多少级，默认显示到一级标题。当向下浏览内容时目录会自动展开到toc-depth所设置的层级。设置为true时，则在一开始就展开所有目录；设置为false则在一开始折叠所有目录。\ntoc-location：设置页内目录的位置。默认在右侧（right）,可以设置为left或body（在文稿最开头显示）。"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#代码块执行设置",
    "href": "quarto_foundation/quarto_books.html#代码块执行设置",
    "title": "36  Quarto Books",
    "section": "\n36.4 代码块执行设置",
    "text": "36.4 代码块执行设置\nexecute用来指定代码块的执行行为，例如是否运行、是否显示警告信息和是否缓存运行结果等。\n\n---\nexecute:\n  eval: true\n  warning: false\n  cache: true\n---\n\n\neval：设置为false时只显示代码，不运行。默认为true。\necho：设置为false时在输出文件中不显示代码，仅显示代码的运行结果。设置为fenced，会将代码块的设置，即”#|“符号后的内容，也展示出来。Figure 31.1 这个代码块就用了echo: fenced这个设定，可以看一下效果。默认为true。\noutput：设置为false时，只运行代码不显示运行结果。默认为true。\nwarning：是否显示代码运行的警告信息。默认为true。\ncache：是否开启运算结果缓存。默认为false。如果设置为true，就会在编译时将源代码的运算结果保存到文件目录中后缀为”_cache”的文件夹中。这样在重新编译同一个文档时会加快编译速度。"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#sec-number_sections",
    "href": "quarto_foundation/quarto_books.html#sec-number_sections",
    "title": "36  Quarto Books",
    "section": "\n36.5 标题编号设置",
    "text": "36.5 标题编号设置\n\n---\nnumber-sections: true \nnumber-depth: 2 \n---\n\n\nnumber-sections：设置为true时会给各级标题编号。默认为false。\nnumber-depth：编号的最低标题层级。默认给所有级别的标题编号。\n{.unnumbered}：如果想要某一个标题不编号，则把这行命令粘贴到该标题后面。如”第三章{.unnumbered}“。\n{.unlisted}：将某个标题设置为不在目录中列出。如”第三章{.unlisted}“。如果想要某个标题既不编号也不在目录中列出就可以这样写：”标题{.unnumbered .unlisted}“。"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#交叉引用设置",
    "href": "quarto_foundation/quarto_books.html#交叉引用设置",
    "title": "36  Quarto Books",
    "section": "\n36.6 交叉引用设置",
    "text": "36.6 交叉引用设置\n\n---\ncrossref:\n  appendix-title: \"附录\" \n  appendix-delim: \":\" \n  fig-title: 图    \n  tbl-title: 表    \n  fig-prefix: 图  \n  tbl-prefix: 表   \n  fig-labels: arabic   \n  tbl-labels: arabic   \n  subref-labels: alpha A \n---\n\n\nappendix-title: 附录的标签文字\nappendix-delim: 附录标签文字和附录标题的分隔符\nfig-title: 图的默认标签文字（默认是”Figure”）\ntbl-title: 表的默认标签文字（默认是”Table”）\ntitle-delim: 图、表标签文字和后面的图、表标题之间的连接符（默认是”:“）\nfig-prefix: 图的默认引用样式（默认是”Figure”）\ntbl-prefix: 表的默认引用样式（默认是”Table”）\nsec-prefix: 章节的默认引用样式（默认是”Section”）\nref-hyperlink: 是否为交叉引用加上内部链接（默认是”true”）\nfig-labels: 图片的编号类型（默认是阿拉伯数字：arabic)\ntbl-labels: 表格的编号类型（默认是阿拉伯数字：arabic）\nsubref-labels: 次级引用编号类型，如组图中的小图（默认是小写字母：alpha a）\n\n可用的编号类型包括：\n\narabic (1, 2, 3)\nroman (I, II, III, IV)\nroman i (i, ii, iii, iv)\nalpha x (start from letter ‘x’)\nalpha X (start from letter ‘X’)"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#排版设置",
    "href": "quarto_foundation/quarto_books.html#排版设置",
    "title": "36  Quarto Books",
    "section": "\n36.7 排版设置",
    "text": "36.7 排版设置\n\n---\nfig-cap-location: bottom\ntbl-cap-location: top\nreference-location: margin \ncitation-location: document \n---\n\n\n\nfig-cap-location：图片标题的位置。默认在图片底部（bottom）。\n\ntbl-cap-location：表格标题的位置。默认在表格上方（top）。\n\nreference-location：脚注的默认展示位置。默认为文档最后 (document)。\n\ncitation-location：参考文献的默认展示位置。默认为文档最后 (document)。\n\n\n\n\n\n\n\nOption\nDescription\n\n\n\nreference-location\nWhere to place footnotes. Defaults to document.\n[document | section | block | margin ]\n\n\ncitation-location\nWhere to place citations. Defaults to document.\n[document | margin ]\n\n\ncap-location\nWhere to place figure and table captions. Defaults to bottom for figures and top for tables. | [top | bottom | margin]\n\n\nfig-cap-location\nWhere to place figure captions. Defaults to bottom.\n[top | bottom | margin]\n\n\ntbl-cap-location\nWhere to place table captions. Defaults to top.\n[top | bottom | margin]"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#参考文献设置",
    "href": "quarto_foundation/quarto_books.html#参考文献设置",
    "title": "36  Quarto Books",
    "section": "\n36.8 参考文献设置",
    "text": "36.8 参考文献设置\n\n---\nbibliography: references.bib # 参考文献目录\n---\n\n只要在编辑qmd文档时插入了参考文献，YAML中会新增参考文献的配置选项：bibliography: references.bib。同时根目录下会生成一个名为”references.bib”的参考文献配置文件。该配置文件包括了qmd文档中所插入的所有参考文献的列表。以BibTeX/Citation风格语言编写。bibliography指定了这个参考文献配置文件所在的路径。\n\n\n\n\n\n\nTip\n\n\n\n关于Quarto Books的详细指南，参考：https://quarto.org/docs/books/book-structure.html。"
  },
  {
    "objectID": "quarto_foundation/quarto_books.html#附制作about-pages",
    "href": "quarto_foundation/quarto_books.html#附制作about-pages",
    "title": "36  Quarto Books",
    "section": "\n36.9 附：制作About Pages",
    "text": "36.9 附：制作About Pages\nindex.qmd文件会编译形成首页/封面文件（index.html），如果我们将书籍/网页发布（详见： Chapter 37 ），这是打开网站链接后首先看到的页面。我们可以通过Quarto提供的About Pages模板来快速创建一个美观的首页，其核心是about命令。下面是一个采用了About Pages模板的index.qmd文件的示例：\n\n---\ntitle: \"关于这本笔记\"\nsidebar: false # 关闭左侧栏\ntoc: false # 关闭右侧的页面目录\nnumber-sections: false # 取消对标题的编号\ncode-tools: false # 关闭代码工具\nabout:\n  template: trestles # 模板\n  image: images/book_cover.jpg # 封面图片\n  # 添加链接\n  links:\n    - icon: book-fill # 添加图标（https://icons.getbootstrap.com）\n      text: Bookdown # 图标的文字\n      href: https://bookdown.org # 图标的链接\n    - icon: github\n      text: Github\n      href: https://github.com/djhcod/r-notes\n    - text: Email\n      href: mailto::du.jh@icloud.com\n---\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana.\n\n------------------------------------------------------------------------ # 分割线\n\n## Education\n\nUniversity of California, San Diego \\| San Diego, CA PhD in Mathematics \\| Sept 2011 - June 2015\n\nMacalester College \\| St. Paul MA B.A in Economics \\| Sept 2007 - June 2011\n\n------------------------------------------------------------------------\n\n## Experience\n\nWengo Analytics \\| Head Data Scientist \\| April 2018 - present\n\nGeoScynce \\| Chief Analyst \\| Spet 2012 - April 2018\n\n\n\n\n\n\n\nNote\n\n\n\nmailto是一种特殊的超链接，其语法是mailto::youremail.com。点击mailto::后的邮箱地址之后会打开设备的邮件应用，并且自动填写邮箱地址。\n\n\n\n\n\n\n\n\nTip\n\n\n\n更多关于About Pages的技巧，参考：Creating your personal website using Quarto。"
  },
  {
    "objectID": "quarto_foundation/github_pages.html",
    "href": "quarto_foundation/github_pages.html",
    "title": "37  发布到GitHub Pages",
    "section": "",
    "text": "38 .gitignore在 Git 中忽略文件和文件夹\n如上面的@sec-将本地静态html文件发布到github-pages 所述，我们通过git add .命令将项目中的新文件或有变动的文件信息暂存到Git库，然后用git commit -m \"my commit message\"命令提交文件。其中git add后面跟的是需要提交的文件目录，这里我们用了”.”，表示把Git文件夹内的所有文件变动信息都记录下来。当继续使用git commit命令时，每一个文件都会被添加。但是，我们有时候不想将某些特定的文件或文件夹上传，或者某些文件超出了GitHub允许的单个文件容量上限（100MB），这个时候我们就需要通过新建一个.gitignore隐藏文件来告诉Git忽略和不要追踪某些特定文件。\n.gitignore文件是一个纯文本文件，里面列出我们要求Git忽略和不追踪的的文件的列表。在.gitignore中，可以通过提及特定文件或文件夹的名称或模式来告诉Git只忽略一个文件或一个文件夹。也可以用同样的方法告诉Git忽略多个文件或文件夹。\n通常，将.gitignore文件放在仓库的根目录下。我们可以通过命令行工具来创建一个.gitignore文件。要在基于 Unix 的系统（如 macOS 或 Linux）上用命令行创建一个.gitignore文件，打开终端程序（如 macOS 上的 Terminal.app）。然后，用cd命令导航到包含项目的根文件夹（或者通过RStudio打开.Rproject项目文件，然后打开RStudio内的终端面板）。然后输入以下命令：\ntouch .gitignore\n这和 Section 37.7 一样，不会返回任何信息，但是会在项目根目录中生成一个文件名为.gitignore的隐藏文件：\n我们用文本编辑工具或者RStudio打开这个文件。会发现里面已经有一些自动帮我们填好的文件列表："
  },
  {
    "objectID": "quarto_foundation/github_pages.html#注册github账户",
    "href": "quarto_foundation/github_pages.html#注册github账户",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.1 注册GitHub账户",
    "text": "37.1 注册GitHub账户\n关于注册GitHub账户的详细指南，参考：https://happygitwithr.com/github-acct。"
  },
  {
    "objectID": "quarto_foundation/github_pages.html#安装git",
    "href": "quarto_foundation/github_pages.html#安装git",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.2 安装Git",
    "text": "37.2 安装Git\n在终端APP或者RStudio的终端面板输入：\n\nwhich git\n\n如果返回”/usr/bin/git”，则表示Git已被安装到电脑上。如果返回”git: command not found”则表示Git未安装，则参阅《Happy Git and GitHub for the useR》进行安装。\n可以通过运行下面的命令进一步查看Git的版本：\n\ngit --version\n\n会返回”git version 2.39.3 (Apple Git-145)“这样的信息。"
  },
  {
    "objectID": "quarto_foundation/github_pages.html#配置git",
    "href": "quarto_foundation/github_pages.html#配置git",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.3 配置Git",
    "text": "37.3 配置Git\n在终端（RStudio的终端面板或系统的终端）中逐个运行下面的命令，把其中的user.name和user.email替换成自己的用户名和GItHub账户的邮箱。这里的用户名不一定要和GitHub账户的的用户名一致，它会给本的Git仓库提供一个便于识别的标记。\n\ngit config --global user.name \"dujunhong\"\ngit config --global user.email \"du.jh@icloud.com\"\n\n或者，通过usethis包在R中进行配置：\n\nlibrary(usethis)\nuse_git_config(user.name = \"djhcod\", user.email = \"du.jh@icloud.com\")\n\n\n\n\n\n\n\nNote\n\n\n\nusethis is a package that facilitates interactive workflows for R project creation and development\n\n\n然后通过在终端中运行git config –global –list查看配好的Git信息。或者通过usethis包的git_sitrep函数查看：\n\nusethis::git_sitrep()"
  },
  {
    "objectID": "quarto_foundation/github_pages.html#获取github个人访问令牌personal-access-tokenpat",
    "href": "quarto_foundation/github_pages.html#获取github个人访问令牌personal-access-tokenpat",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.4 获取GitHub个人访问令牌（personal access token，PAT）",
    "text": "37.4 获取GitHub个人访问令牌（personal access token，PAT）\nPAT相当于GitHub账户的密码，所以通过PAT才能让本地的Git仓库和远程的GitHub个人仓库建立连接。需要为每台想连接GitHub的电脑配置一个专属PAT。可以通过https://github.com/settings/tokens进行配置，或者运行下面的代码直接进入配置页面：\n\ncreate_github_token()\n\n在配置页面的”NOTE”中填写这个PAT的备注，建议写此PAT将要应用的设备的名称。在它的下方可以选择该PAT的到期时间：\n\n其他的设置保持默认，然后滑到页面最下方，点击”Generate token”：\n\n现在就会看到我们生成的PAT，记得把它即时复制下来，因为只要关闭了这个页面就无法再查看该密钥了：\n\n接下来，通过运行gitcreds包内的gitcreds_set函数来将PAT存储到本地：\n\ngitcreds::gitcreds_set()\n\n运行该函数后会在Console中要求我们输入token，输入刚刚获取的PAT密钥点击回车即可。\n\n如果此前已经存储了PAT，运行这个函数后会出现如下的对话框，可以选择更新已到期的PAT也可以查看已经存储的PAT。\n\n接下来我们再次运行git_sitrep函数，\n\nusethis::git_sitrep()\n\n如果看到如下红框内的信息，证明已经成功连接到了GitHub：\n\n\n\n\n\n\n\nNote\n\n\n\n更多关于PAT的获取指南，参考：https://ucsb-meds.github.io/meds-install-mac.html。"
  },
  {
    "objectID": "quarto_foundation/github_pages.html#将r-project文件夹初始化为git存储库",
    "href": "quarto_foundation/github_pages.html#将r-project文件夹初始化为git存储库",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.5 将R Project文件夹初始化为Git存储库",
    "text": "37.5 将R Project文件夹初始化为Git存储库\n创建Quarto Books项目的内容参考 Chapter 36 。\n\n\n\n\n\n\nCaution\n\n\n\n项目文件夹的名称就是最终上传到GitHub库的名称，所以不要使用中文和空格，并起一个简单和有意义的名字。\n对于Quarto Books或者Quarto Websites项目，为了方便项目管理和GitHub Pages的转换应该在项目的YAML配置文件中将编译文件的输出文件夹设置为”docs”（ Chapter 36 ）：\nproject:\n  type: book\n  output-dir: \"book\" \n这样qmd文件编译后生成的HTML文件、脚本文件以及图片等文件都被存放在docs文件夹内。后面我们就可以指定GitHub Pages将这个docs文件夹作为构建网页的依据。\n\n\n\n通过运行use_git函数以将R Project文件夹初始化为Git存储库：\n\nusethis::use_git()\n\nConsole中会提示已经将当前项目文件夹设置为了Git存储库。当系统询问是否可以提交任何未提交的文件时，请选择是，则会将所有文件进行上传。如果要求重新启动R，请选择是。\n\n重启后，会看到RStudio的右下角窗格中出现了一个新的Git选项卡。里面列出了Git存储库，也就是我们的项目文件夹里面的所有文件，左侧用不同的颜色标注了文件的状态。\n\n这个函数的原理是在项目文件夹中生成了一个名为”.git”的隐藏文件夹，从而将其认定为Git本地存储库。在Mac上通过快捷键Command+Shift+句号可以显示/隐藏这些隐藏文件。\n\n\n\nGit存储库的结构"
  },
  {
    "objectID": "quarto_foundation/github_pages.html#连接本地git仓库和远程github仓库",
    "href": "quarto_foundation/github_pages.html#连接本地git仓库和远程github仓库",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.6 连接本地Git仓库和远程GitHub仓库",
    "text": "37.6 连接本地Git仓库和远程GitHub仓库\n运行use_github函数后会首先创建一个项目同名的GitHub仓库，然后将所有本地Git库的文件上传到这个GitHub库中，完成后会自动打开浏览器并导航到建好的GitHub项目仓库。\n\nusethis::use_github()\n\n\n为了和GitHub统一，现在需要通过在RStusio的终端中运行下面的命令来检查一下当前项目的主分枝的名称是不是”main”。\n\ngit branch\n\n或者在RStudio中检查Git面板右上角的标签是不是”main”：\n\n同时，GitHub项目主页左上角的默认分枝也应该是”main”：\n\n如果是，则可以直接进入下一步。否则，如果当前分支的名称为”master”，需要通过运行git_default_branch_rename函数将默认分枝的名称更新为”main”。\n\nusethis::git_default_branch_rename(from = \"master\", to = \"main\")\n\n或者在终端中输入：\n\ngit config --global init.defaultBranch main\n\n然后通过git status再次检查默认分枝的名称，并回到GitHub项目主页刷新后查看默认分枝的名称是否已同步更改为”main”。"
  },
  {
    "objectID": "quarto_foundation/github_pages.html#sec-Publish_html_files_to_github_pages",
    "href": "quarto_foundation/github_pages.html#sec-Publish_html_files_to_github_pages",
    "title": "37  发布到GitHub Pages",
    "section": "\n37.7 将本地静态HTML文件发布到GitHub Pages",
    "text": "37.7 将本地静态HTML文件发布到GitHub Pages\n首先，在项目根目录中创建一个名为.nojekyll的文件，该文件告诉GitHub Pages不要使用Jekyll（GitHub默认网页生成工具）对我们的文件进行额外处理。有两种方法可以做到这一点：\n\n\n在RStudio终端中运行下面的命令：\n\ntouch .nojekyll\n\n该命令运行后不会有任何提示，但是在项目的根目录中会创建一个名为.nojekyll的隐藏文件：\n\n\n在RStudio中依次点击File&gt;New File&gt;Text File，然后点击保存，文件名写成”.nojekyll”即可。\n\n\n\n然后在Git面板中选中所有的文件（Git面板中列出的都是监测到有变动的文件）。这一操作等价于在终端输入：git add .。之后点击”Commit”（等价：git commit -m \"my commit message\"）。\n\n这会打开commit说明窗口，填写右侧的commit说明后点击右下角的”Commit”就会上传所有的文件更改。\n\n上传完成后关闭窗口，这时Git面板中不会有任何文件，是因为我们已经提交了所有更改。最后点击”Push”，就会把所有文件上传到GitHub仓库（等价：git push）。\n\n完成上述操作后，我们打开浏览器进入GitHub项目主页，点击设置按钮。\n\n点击左侧导航栏的”Pages”选项，然后将GitHub Pages的创建来源选择为docs文件夹。\n\n一段时间的等待后，我们就会在这个页面的上方看到已经生成的GitHub Pages的链接。\n\n点击进去之后就可以看到我们的在线网页了。\n\n\n\n\n\n\n\nWarning\n\n\n\n不要更改docs文件夹内的任何内容。\n不要更改index.qmd文件的名称。"
  },
  {
    "objectID": "references.html",
    "href": "references.html",
    "title": "References",
    "section": "",
    "text": "Bill, Ruben, Pratyaksha Wirapati, Marius Messemaker, Whijae Roh,\nBeatrice Zitti, Florent Duval, Máté Kiss, et al. 2023.\n“CXCL9:SPP1 Macrophage Polarity Identifies a\nNetwork of Cellular Programs That Control Human Cancers.”\nScience 381 (6657): 515–24. https://doi.org/10.1126/science.ade2292.\n\n\nBlondel, Vincent D, Jean-Loup Guillaume, Renaud Lambiotte, and Etienne\nLefebvre. 2008. “Fast Unfolding of Communities in Large\nNetworks.” Journal of Statistical Mechanics: Theory and\nExperiment 2008 (10): P10008. https://doi.org/10.1088/1742-5468/2008/10/p10008.\n\n\nBrennecke, Philip, Simon Anders, Jong Kyoung Kim, Aleksandra A\nKołodziejczyk, Xiuwei Zhang, Valentina Proserpio, Bianka Baying, et al.\n2013. “Accounting for Technical Noise in Single-Cell RNA-Seq\nExperiments.” Nature Methods 10 (11): 1093–95. https://doi.org/10.1038/nmeth.2645.\n\n\nChoudhary, Saket, and Rahul Satija. 2022a. “Comparison and\nEvaluation of Statistical Error Models for scRNA-Seq.” Genome\nBiology 23 (1). https://doi.org/10.1186/s13059-021-02584-9.\n\n\n———. 2022b. “Comparison and Evaluation of Statistical Error Models\nfor scRNA-Seq.” Genome Biology 23 (1). https://doi.org/10.1186/s13059-021-02584-9.\n\n\n———. 2022c. “Comparison and Evaluation of Statistical Error Models\nfor scRNA-Seq.” Genome Biology 23 (1). https://doi.org/10.1186/s13059-021-02584-9.\n\n\nCrowell, Helena L., Charlotte Soneson, Pierre-Luc Germain, Daniela\nCalini, Ludovic Collin, Catarina Raposo, Dheeraj Malhotra, and Mark D.\nRobinson. 2020. “Muscat Detects Subpopulation-Specific State\nTransitions from Multi-Sample Multi-Condition Single-Cell\nTranscriptomics Data.” Nature Communications 11 (1). https://doi.org/10.1038/s41467-020-19894-4.\n\n\nDing, Jiarui, Xian Adiconis, Sean K. Simmons, Monika S. Kowalczyk,\nCynthia C. Hession, Nemanja D. Marjanovic, Travis K. Hughes, et al.\n2020. “Systematic Comparison of Single-Cell and Single-Nucleus\nRNA-Sequencing Methods.” Nature Biotechnology 38 (6):\n737–46. https://doi.org/10.1038/s41587-020-0465-8.\n\n\nFujii, Kouichi, Jin Kikuchi, Masatoshi Uchida, Masanari Machida, Midori\nTsuchiya, Kentaro Hayashi, Nana Maekawa, Hajime Houzumi, Arata Honda,\nand Koji Wake. 2023. “Tiger Attack at a Japanese Safari Park: A\nCase Report.” International Journal of Emergency\nMedicine 16 (1). https://doi.org/10.1186/s12245-023-00556-3.\n\n\nGong, Lanqi, Jie Luo, Yu Zhang, Yuma Yang, Shanshan Li, Xiaona Fang,\nBaifeng Zhang, et al. 2023. “Nasopharyngeal Carcinoma Cells\nPromote Regulatory T Cell Development and Suppressive Activity via\nCD70-CD27 Interaction.” Nature Communications 14 (1). https://doi.org/10.1038/s41467-023-37614-6.\n\n\nIlicic, Tomislav, Jong Kyoung Kim, Aleksandra A. Kolodziejczyk, Frederik\nOtzen Bagger, Davis James McCarthy, John C. Marioni, and Sarah A.\nTeichmann. 2016. “Classification of Low Quality Cells from\nSingle-Cell RNA-Seq Data.” Genome Biology 17 (1). https://doi.org/10.1186/s13059-016-0888-1.\n\n\nJunttila, Sini, Johannes Smolander, and Laura L Elo. 2022.\n“Benchmarking Methods for Detecting Differential States Between\nConditions from Multi-Subject Single-Cell RNA-Seq Data.”\nBriefings in Bioinformatics 23 (5). https://doi.org/10.1093/bib/bbac286.\n\n\nKang, Hyun Min, Meena Subramaniam, Sasha Targ, Michelle Nguyen, Lenka\nMaliskova, Elizabeth McCarthy, Eunice Wan, et al. 2017.\n“Multiplexed Droplet Single-Cell RNA-Sequencing Using Natural\nGenetic Variation.” Nature Biotechnology 36 (1): 89–94.\nhttps://doi.org/10.1038/nbt.4042.\n\n\nLause, Jan, Philipp Berens, and Dmitry Kobak. 2021. “Analytic\nPearson Residuals for Normalization of Single-Cell RNA-Seq UMI\nData.” Genome Biology 22 (1). https://doi.org/10.1186/s13059-021-02451-7.\n\n\nLevine, Jacob H., Erin F. Simonds, Sean C. Bendall, Kara L. Davis,\nEl-ad D. Amir, Michelle D. Tadmor, Oren Litvin, et al. 2015.\n“Data-Driven Phenotypic Dissection of AML Reveals Progenitor-Like\nCells That Correlate with Prognosis.” Cell 162 (1):\n184–97. https://doi.org/10.1016/j.cell.2015.05.047.\n\n\nLi, Yanming, Pingping Ren, Ashley Dawson, Hernan G. Vasquez, Waleed\nAgeedi, Chen Zhang, Wei Luo, et al. 2020. “Single-Cell\nTranscriptome Analysis Reveals Dynamic Cell Populations and Differential\nGene Expression Patterns in Control and Aneurysmal Human Aortic\nTissue.” Circulation 142 (14): 1374–88. https://doi.org/10.1161/circulationaha.120.046528.\n\n\nMacosko, Evan Z., Anindita Basu, Rahul Satija, James Nemesh, Karthik\nShekhar, Melissa Goldman, Itay Tirosh, et al. 2015a. “Highly\nParallel Genome-Wide Expression Profiling of Individual Cells Using\nNanoliter Droplets.” Cell 161 (5): 1202–14. https://doi.org/10.1016/j.cell.2015.05.002.\n\n\n———, et al. 2015b. “Highly Parallel Genome-Wide Expression\nProfiling of Individual Cells Using Nanoliter Droplets.”\nCell 161 (5): 1202–14. https://doi.org/10.1016/j.cell.2015.05.002.\n\n\nNestorowa, Sonia, Fiona K. Hamey, Blanca Pijuan Sala, Evangelia\nDiamanti, Mairi Shepherd, Elisa Laurenti, Nicola K. Wilson, David G.\nKent, and Berthold Göttgens. 2016. “A Single-Cell Resolution Map\nof Mouse Hematopoietic Stem and Progenitor Cell Differentiation.”\nBlood 128 (8): e20–31. https://doi.org/10.1182/blood-2016-05-716480.\n\n\nSprumont, Adrien, Ana Rodrigues, Simon J. McGowan, Colin Bannard, and\nOliver Bannard. 2023. “Germinal Centers Output Clonally Diverse\nPlasma Cell Populations Expressing High- and Low-Affinity\nAntibodies.” Cell, November. https://doi.org/10.1016/j.cell.2023.10.022.\n\n\nSquair, Jordan W., Matthieu Gautier, Claudia Kathe, Mark A. Anderson,\nNicholas D. James, Thomas H. Hutson, Rémi Hudelle, et al. 2021.\n“Confronting False Discoveries in Single-Cell Differential\nExpression.” Nature Communications 12 (1). https://doi.org/10.1038/s41467-021-25960-2.\n\n\nStuart, Tim, Andrew Butler, Paul Hoffman, Christoph Hafemeister,\nEfthymia Papalexi, William M. Mauck, Yuhan Hao, Marlon Stoeckius, Peter\nSmibert, and Rahul Satija. 2019. “Comprehensive Integration of\nSingle-Cell Data.” Cell 177 (7): 1888–1902.e21. https://doi.org/10.1016/j.cell.2019.05.031.\n\n\nTirosh, Itay, Benjamin Izar, Sanjay M. Prakadan, Marc H. Wadsworth,\nDaniel Treacy, John J. Trombetta, Asaf Rotem, et al. 2016.\n“Dissecting the Multicellular Ecosystem of Metastatic Melanoma by\nSingle-Cell RNA-Seq.” Science 352 (6282): 189–96. https://doi.org/10.1126/science.aad0501.\n\n\nXu, Junfen, Yifeng Fang, Kelie Chen, Sen Li, Sangsang Tang, Yan Ren,\nYixuan Cen, et al. 2022. “Single-Cell RNA Sequencing Reveals the\nTissue Architecture in Human High-Grade Serous Ovarian Cancer.”\nClinical Cancer Research: An Official Journal of the American\nAssociation for Cancer Research 28 (16): 3590–3602. https://doi.org/10.1158/1078-0432.CCR-22-0296.\n\n\nZimmerman, Kip D., Mark A. Espeland, and Carl D. Langefeld. 2021.\n“A Practical Solution to Pseudoreplication Bias in Single-Cell\nStudies.” Nature Communications 12 (1). https://doi.org/10.1038/s41467-021-21038-1."
  },
  {
    "objectID": "r_basic/r_basics.html",
    "href": "r_basic/r_basics.html",
    "title": "R语言基础",
    "section": "",
    "text": "本章主要介绍R语言的环境配置以及数据的导入、导出等R语言的基本操作。"
  },
  {
    "objectID": "r_basic/environment_configuration.html#更新r",
    "href": "r_basic/environment_configuration.html#更新r",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.1 更新R",
    "text": "2.1 更新R\n在R原软件中逐个运行下面的代码（仅适用Windows系统）。macOS直接打开https://cran.r-project.org/bin/macosx/下载最新版本的R覆盖安装，重启RStudio即可完成R的更新，原R包都在。\n\ninstall.packages(\"installr\")\nlibrary(installr)\nupdateR()"
  },
  {
    "objectID": "r_basic/environment_configuration.html#更新r包",
    "href": "r_basic/environment_configuration.html#更新r包",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.2 更新R包",
    "text": "2.2 更新R包\n运行下面的代码或通过右下角的Packages选项卡进行R包的更新\n\nold.packages() # 检查是否有需要更新的R包\nupdate.packages(ask = F) # 更新所有R包\nnews(package = \"limma\") # 参看R包的更新内容\nBiocManager::valid() # 查看是否有需要更新的bioconductor包。根据提示安装更新"
  },
  {
    "objectID": "r_basic/environment_configuration.html#从bioconductor安装r包",
    "href": "r_basic/environment_configuration.html#从bioconductor安装r包",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.3 从bioconductor安装R包",
    "text": "2.3 从bioconductor安装R包\n\nBiocManager::install(\"biomaRt\",update = TRUE,ask = FALSE)"
  },
  {
    "objectID": "r_basic/environment_configuration.html#更改当前r脚本运行目录",
    "href": "r_basic/environment_configuration.html#更改当前r脚本运行目录",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.5 更改当前R脚本运行目录",
    "text": "2.5 更改当前R脚本运行目录\n\nsetwd(\"/Users/totoshihiro/Library/Mobile Documents/com~apple~CloudDocs/Documents/科研/医学统计学/数据基本处理与标准化\")\ngetwd()#查看当前R脚本运行目录"
  },
  {
    "objectID": "r_basic/environment_configuration.html#环境查看和清理",
    "href": "r_basic/environment_configuration.html#环境查看和清理",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.6 环境查看和清理",
    "text": "2.6 环境查看和清理\n\nrm(mydata)\nrm(list = ls())#移除当前环境中的所有对象\ncat(\"\\014\")#清空所有输出结果\nsessionInfo()#收集有关当前R项目的信息"
  },
  {
    "objectID": "r_basic/environment_configuration.html#自动安装所需的r包",
    "href": "r_basic/environment_configuration.html#自动安装所需的r包",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.7 自动安装所需的R包",
    "text": "2.7 自动安装所需的R包\n\npackages &lt;-c(\"GEOquery\", \"limma\",\"ggplot2\", \"pheatmap\")#列出所需的R包\n\n#检查所需的R包是否已安装，若未安装则从CRAN或Bioconductor安装包\npackagecheck &lt;- function(x) {\n  if (!require(\"BiocManager\")) {\n    install.packages(\"BiocManager\")\n  } else if (!require(x, character.only = T)) {\n    CRANpackages &lt;- available.packages()\n    if (x %in% rownames(CRANpackages)) {\n      install.packages(x)\n    } else {\n      BiocManager::install(x, update = TRUE, ask = FALSE)\n    }\n  }\n}\nlapply(packages, packagecheck)"
  },
  {
    "objectID": "r_basic/environment_configuration.html#调整矢量内存分配上限",
    "href": "r_basic/environment_configuration.html#调整矢量内存分配上限",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.8 调整矢量/内存分配上限",
    "text": "2.8 调整矢量/内存分配上限\n提高矢量大小上限\n在R语言中如果我们要处理的数据集较大，如在处理单细胞数据时（ Section 23.3.5.1 ），可能会出现如下报错：\nError: cannot allocate vector of size *** Mb\n这是因为 R 中有对象大小的限制（默认值为 500 1024 ^ 2 = 500 Mb）。可以通过如下代码进行调整：\n\n# 调整允许对象大小限制为6GB\noptions(future.globals.maxSize = 6 * 1024 * 1024^2)\n\n提高R内存分配上限（macOS）\n如果在运行大量的数据处理时，出现如下报错：\nError: vector memory exhausted (limit reached?)\n那么说明脚本的运行超出了R语言内存分配的上限，这一般就是Mac的物理内存大小。但是，我们可以通过如下的方式来通过分配SWAP虚拟内存的方式，使得代码能够继续运行（来自stackoverflow上的这篇帖子）。\n【方法一：通过usethis包配置】\n在R中运行：\n\nusethis::edit_r_environ()\n\n\n\n\n\n\n\nTip\n\n\n\nusethis is a package that facilitates interactive workflows for R project creation and development\n\n\n运行后会在RStudio中以新标签页的方式打开一个.Renviron文件。在其中输入：\nR_MAX_VSIZE=50Gb\n\n\n\n\n\n\nCaution\n\n\n\n注意这里的内存数值包括了物理内存和虚拟内存，所以如果你的电脑的实际内存为16GB，那么在这里需要输入比16GB更大的数值，输入16GB是不会有帮助的。\n\n\n保存这个文件后，重启RStudio，这时候内存上限就被修改好了。\n\n\nRStudio调用虚拟内存执行脚本\n\n【方法二：通过终端配置】\n打开终端（Terminal），在其中输入：\ncd ~\ntouch .Renviron\nopen .Renviron\n这时会打开.Renviron文件，在其中输入：\nR_MAX_VSIZE=50Gb\n保存文件，重启RStudio。"
  },
  {
    "objectID": "r_basic/environment_configuration.html#自动整理代码",
    "href": "r_basic/environment_configuration.html#自动整理代码",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.9 自动整理代码",
    "text": "2.9 自动整理代码\nThe tidyverse style guide对代码编写时的规范格式进行了详细说明。通过styler包可以实现对代码的自动整理，有助于保持不同项目之间的代码风格一致，并促进协作。安装styler后通过运行下面的命令即可自动整理当前打开的文档的代码。\n\ninstall.packages(\"styler\")\nstyler:::style_active_file()\n\n也可以用通过打开Rstudio的插件（Addins），选择”Style active file”来实现对当前R脚本的代码整理。或者选择一段代码后，点击”Style selection”来对选中的代码进行整理。\n\n\nFigure 2.1: Rstudio插件"
  },
  {
    "objectID": "r_basic/environment_configuration.html#rstudio主题",
    "href": "r_basic/environment_configuration.html#rstudio主题",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.10 Rstudio主题",
    "text": "2.10 Rstudio主题\nrsthemes包提供了多种额外的主题。\n\n该包通过r-universe进行安装：\n\ninstall.packages(\n  \"rsthemes\",\n  repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption(\"repos\"))\n)\n\n然后安装主题：\n\nrsthemes::install_rsthemes()\n\n使用：\n\n# 列出所有来自rsthemes的主题\nrsthemes::list_rsthemes()\n\n# 依次尝试所有主题\nrsthemes::try_rsthemes()\n\n# 只尝试浅色主题\nrsthemes::try_rsthemes(\"light\")\n\n通过Tools &gt; Global Options &gt; Appearance也可以浏览和应用这些主题。\n安装该包后还会在Rstudio的插件中显示，可以方便的进行深色和浅色模式的切换。要实现这一点，需要打开R的配置文件（~/.Rprofile），可以通过下面的方式快速打开：\n\nusethis::edit_r_profile()\n\n然后将下面的代码粘贴进配置文件：\n\nif (interactive()) {\n  rsthemes::set_theme_light(\"Chrome\") # 默认的浅色主题\n  rsthemes::set_theme_dark(\"Cobalt\") # 默认的深色主题\n  rsthemes::set_theme_favorite( # 再添加一些主题作为备选\n    c(\n      \"GitHub {rsthemes}\",\n      \"Material Palenight {rsthemes}\"\n    )\n  )\n}\n\n现在就可以通过点击插件中的”Toggle Dark Mode”来一键切换深色和浅色主题了（Figure 2.1 ）。同时，点击”Next Favorite Theme”可以切换上面设置的set_theme_favorite()里面的主题。"
  },
  {
    "objectID": "single_cell/seurat/seurat_command_list.html#标准seurat流程基本函数",
    "href": "single_cell/seurat/seurat_command_list.html#标准seurat流程基本函数",
    "title": "7  Seurat常用函数清单",
    "section": "\n7.1 标准Seurat流程基本函数",
    "text": "7.1 标准Seurat流程基本函数\n见 Chapter 8 。\n\npbmc &lt;- NormalizeData(object = pbmc)\npbmc &lt;- FindVariableFeatures(object = pbmc)\npbmc &lt;- ScaleData(object = pbmc)\npbmc &lt;- RunPCA(object = pbmc)\npbmc &lt;- FindNeighbors(object = pbmc, dims = 1:30)\npbmc &lt;- FindClusters(object = pbmc)\npbmc &lt;- RunUMAP(object = pbmc, dims = 1:30)\nDimPlot(object = pbmc, reduction = \"umap\")\n\n采用SCtransform标准化时的流程：\n见 Chapter 10 。\n\npbmc &lt;- SCTransform(object = pbmc, verbose = F)\npbmc &lt;- RunPCA(object = pbmc, verbose = F)\npbmc &lt;- FindNeighbors(object = pbmc, dims = 1:30, verbose = F)\npbmc &lt;- FindClusters(object = pbmc, verbose = F)\npbmc &lt;- RunUMAP(object = pbmc, dims = 1:30, verbose = F)\nDimPlot(object = pbmc, reduction = \"umap\")\n\n\n\n\n或者通过管道函数：\n\npbmc &lt;- SCTransform(pbmc) %&gt;%\n    RunPCA() %&gt;%\n    FindNeighbors(dims = 1:30) %&gt;%\n    FindClusters() %&gt;%\n    RunUMAP(dims = 1:30)"
  },
  {
    "objectID": "single_cell/seurat/seurat_command_list.html#提取seurat对象内的各数据",
    "href": "single_cell/seurat/seurat_command_list.html#提取seurat对象内的各数据",
    "title": "7  Seurat常用函数清单",
    "section": "\n7.2 提取Seurat对象内的各数据",
    "text": "7.2 提取Seurat对象内的各数据\n获取细胞、基因、assays、layers名称\n获取细胞的barcode：\n\ncolnames(pbmc)[1:10]\n\n [1] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\"\n [5] \"AAACCGTGTATGCG-1\" \"AAACGCACTGGTAC-1\" \"AAACGCTGACCAGT-1\" \"AAACGCTGGTTCTT-1\"\n [9] \"AAACGCTGTAGCCA-1\" \"AAACGCTGTTTCTG-1\"\n\nCells(pbmc)[1:10] # 效果同上\n\n [1] \"AAACATACAACCAC-1\" \"AAACATTGAGCTAC-1\" \"AAACATTGATCAGC-1\" \"AAACCGTGCTTCCG-1\"\n [5] \"AAACCGTGTATGCG-1\" \"AAACGCACTGGTAC-1\" \"AAACGCTGACCAGT-1\" \"AAACGCTGGTTCTT-1\"\n [9] \"AAACGCTGTAGCCA-1\" \"AAACGCTGTTTCTG-1\"\n\n\n获取基因（feature）名。\n\nFeatures(pbmc)[1:10]\n\n [1] \"AL627309.1\"    \"RP11-206L10.2\" \"LINC00115\"     \"NOC2L\"        \n [5] \"KLHL17\"        \"PLEKHN1\"       \"HES4\"          \"ISG15\"        \n [9] \"AGRN\"          \"C1orf159\"     \n\nrownames(pbmc)[1:10] # 同上\n\n [1] \"AL627309.1\"    \"RP11-206L10.2\" \"LINC00115\"     \"NOC2L\"        \n [5] \"KLHL17\"        \"PLEKHN1\"       \"HES4\"          \"ISG15\"        \n [9] \"AGRN\"          \"C1orf159\"     \n\n\n可以指定提取哪一个assay下的基因名，如果未指定，则提取默认assay内的基因名。这里的pbmc数据经过了SCTransform，所以有两个assay，默认的归一化之后的“SCT”assay，另一个是原始的“RNA”assay。\n\n# 获取“SCT” assay下的基因名\nFeatures(pbmc[[\"SCT\"]])[1:10]\n\n [1] \"AL627309.1\"    \"RP11-206L10.2\" \"LINC00115\"     \"NOC2L\"        \n [5] \"KLHL17\"        \"PLEKHN1\"       \"HES4\"          \"ISG15\"        \n [9] \"AGRN\"          \"C1orf159\"     \n\n# 获取“RNA” assay下的基因名\nFeatures(pbmc[[\"RNA\"]])[1:10]\n\n [1] \"AL627309.1\"    \"AP006222.2\"    \"RP11-206L10.2\" \"RP11-206L10.9\"\n [5] \"LINC00115\"     \"NOC2L\"         \"KLHL17\"        \"PLEKHN1\"      \n [9] \"RP11-54O7.17\"  \"HES4\"         \n\n# 或\nFeatures(pbmc, assay = \"RNA\")[1:10]\n\n [1] \"AL627309.1\"    \"AP006222.2\"    \"RP11-206L10.2\" \"RP11-206L10.9\"\n [5] \"LINC00115\"     \"NOC2L\"         \"KLHL17\"        \"PLEKHN1\"      \n [9] \"RP11-54O7.17\"  \"HES4\"         \n\n\n也可以通过添加layer参数，提取指定layer下的基因名：\n\n# 提取“counts” layer下的基因名\nFeatures(pbmc, layer = \"counts\")[1:10]\n\n [1] \"AL627309.1\"    \"RP11-206L10.2\" \"LINC00115\"     \"NOC2L\"        \n [5] \"KLHL17\"        \"PLEKHN1\"       \"HES4\"          \"ISG15\"        \n [9] \"AGRN\"          \"C1orf159\"     \n\n# 提取\"scale.data\"的基因名\nFeatures(pbmc, layer = \"scale.data\")[1:10]\n\n [1] \"NOC2L\"    \"HES4\"     \"ISG15\"    \"TNFRSF18\" \"TNFRSF4\"  \"CPSF3L\"  \n [7] \"MRPL20\"   \"ATAD3C\"   \"SSU72\"    \"MIB2\"    \n\n\n获取细胞和基因的数量：\n\nncol(pbmc) # 细胞数量\n\n[1] 2700\n\nnrow(pbmc) # 基因（feature）数量\n\n[1] 12572\n\n\n获取高变基因列表\n详见 Section 8.4 。\n\nVariableFeatures(pbmc)[1:10]\n\n [1] \"S100A9\" \"GNLY\"   \"LYZ\"    \"S100A8\" \"NKG7\"   \"FTL\"    \"GZMB\"   \"IGLL5\" \n [9] \"FTH1\"   \"CCL5\"  \n\n\n列出layers\n\n# 列出所有的layers\nLayers(pbmc)\n\n[1] \"counts\"     \"data\"       \"scale.data\"\n\n\n获取/设定assay：\n列出所有的assay，如”RNA” assay、运行SCTransform之后的”SCT” assay。一个Seurat对象可以包括多个assay对象，但是在某个时刻，只有一个assay对象是默认激活的。\n实际应用场景见 Section 14.2 。\n\n# 列出所有的assay\nAssays(pbmc)\n\n[1] \"RNA\" \"SCT\"\n\n# 获取目前的默认assay名称\nDefaultAssay(pbmc)\n\n[1] \"SCT\"\n\n# 设定默认assay\nDefaultAssay(pbmc) &lt;- \"RNA\"\nDefaultAssay(pbmc) &lt;- \"SCT\"\n\n转换不同版本的Seurat对象：\n上面我们使用的pbmc对象使用V5版本的Seurat包创建的，可以通过如下命令查看：\n\n# 查看Seurat对象是用哪个版本的Seurat包创建的\npbmc@version\n\n[1] '5.0.1'\n\n\n这里我们导入在 Section 25.4.1 中用到的案例数据，这个Seurat对象是使用V4版本的Seurat包创建的。\n\nload(bzfile(\"data/scRNA-seq_online/additional_data/seurat_integrated.RData.bz2\"))\nseurat_integrated\n\nAn object of class Seurat \n31130 features across 29629 samples within 3 assays \nActive assay: integrated (3000 features, 3000 variable features)\n 2 layers present: data, scale.data\n 2 other assays present: RNA, SCT\n 2 dimensional reductions calculated: pca, umap\n\nseurat_integrated@version\n\n[1] '4.1.0'\n\n\n\n可以看到，这个seurat_integrated对象的“RNA” assay没有layers结构，是典型的V5版本之前的Seurat对象的结构。我们可以通过as()函数将V4或V3版本的“RNA” assay转换成V5版本的“RNA” assay：\n\n# convert a v4 or v3 assay to a v5 assay\nseurat_integrated[[\"RNA5\"]] &lt;- as(object = seurat_integrated[[\"RNA\"]], \n                                  Class = \"Assay5\")\nDefaultAssay(seurat_integrated) = \"RNA5\"\n\n\n转换后seurat_integrated[[“RNA5”]]里面是V5版的Seurat结构。如果不想要原来的“RNA” assay可以将其删除：\n\nseurat_integrated[[\"RNA\"]] &lt;- NULL\n\n也可以将V5版本的“RNA” assay转换成V4或V3版本的“RNA” assay：\n\n# convert a v5 assay to a v4 or v3 assay\npbmc[[\"RNA3\"]] &lt;- as(object = pbmc[[\"RNA\"]], Class = \"Assay\")\n\n\n获取细胞注释信息（cell identities）\n查看cell identities：\n即细胞的类型，在Seurat对象中，细胞可能有好几种不同方法注释的类型，但是在某一时刻，只有一种细胞类型是默认激活的。\n\nIdents(pbmc)[1:5]\n\nAAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n               4                2                0                5 \nAAACCGTGTATGCG-1 \n               6 \nLevels: 0 1 2 3 4 5 6 7 8 9 10 11 12\n\ntable(Idents(pbmc))\n\n\n  0   1   2   3   4   5   6   7   8   9  10  11  12 \n491 485 361 316 229 182 157 153 138 100  42  34  12 \n\n# 查看目前cell identities的水平\nlevels(pbmc)\n\n [1] \"0\"  \"1\"  \"2\"  \"3\"  \"4\"  \"5\"  \"6\"  \"7\"  \"8\"  \"9\"  \"10\" \"11\" \"12\"\n\n\n设定细胞identities：\n实际应用场景见 Section 14.2 。\n\n# 将meta.data中的\"seurat_clusters\"列设置为cell identities\nIdents(pbmc) &lt;- \"seurat_clusters\"\n\n# 重命名细胞注释标签或重新排序细胞类型标签\nIdents(pbmc) &lt;- factor(Idents(pbmc), \n                       levels = levels(pbmc),\n                       labels = c(\"pDC\", \"Mk\", \"DC\", \"CD14 Mono\", \"CD16 Mono\", \n                                  \"B Activated\", \"B\", \"CD8 T\", \"NK\", \"T activated\", \n                                  \"CD4 Naive T\", \"CD4 Memory T\", \"epi\"))\nIdents(pbmc) |&gt; unique()\n\n [1] CD16 Mono    DC           pDC          B Activated  B           \n [6] CD8 T        Mk           CD14 Mono    T activated  CD4 Naive T \n[11] CD4 Memory T NK           epi         \n13 Levels: pDC Mk DC CD14 Mono CD16 Mono B Activated B CD8 T NK ... epi\n\n\n将目前的cell identities保存到meta.data新的一列中：\n\n# 将目前的cell identities储存到meta.data的\"old.ident\"列中\npbmc[[\"old.ident\"]] &lt;- Idents(pbmc) \n\n重命名某个cell identities：\n\npbmc &lt;- RenameIdents(pbmc, \n                     \"B\" = \"B cell\")\nIdents(pbmc) |&gt; unique()\n\n [1] CD16 Mono    DC           pDC          B Activated  B cell      \n [6] CD8 T        Mk           CD14 Mono    T activated  CD4 Naive T \n[11] CD4 Memory T NK           epi         \n13 Levels: B cell pDC Mk DC CD14 Mono CD16 Mono B Activated CD8 T ... epi\n\n\n获取meta.data\n\n# View metadata data frame, stored in object@meta.data\npbmc@meta.data |&gt; head()\n\n                 orig.ident nCount_RNA nFeature_RNA nCount_SCT nFeature_SCT\nAAACATACAACCAC-1     pbmc3k       2419          779       2275          769\nAAACATTGAGCTAC-1     pbmc3k       4903         1352       2597         1126\nAAACATTGATCAGC-1     pbmc3k       3147         1129       2469         1111\nAAACCGTGCTTCCG-1     pbmc3k       2639          960       2343          942\nAAACCGTGTATGCG-1     pbmc3k        980          521       1901          551\nAAACGCACTGGTAC-1     pbmc3k       2163          781       2148          767\n                 SCT_snn_res.0.8 seurat_clusters nCount_RNA3 nFeature_RNA3\nAAACATACAACCAC-1               4               4        2419           779\nAAACATTGAGCTAC-1               2               2        4903          1352\nAAACATTGATCAGC-1               0               0        3147          1129\nAAACCGTGCTTCCG-1               5               5        2639           960\nAAACCGTGTATGCG-1               6               6         980           521\nAAACGCACTGGTAC-1               0               0        2163           781\n                   old.ident\nAAACATACAACCAC-1   CD16 Mono\nAAACATTGAGCTAC-1          DC\nAAACATTGATCAGC-1         pDC\nAAACCGTGCTTCCG-1 B Activated\nAAACCGTGTATGCG-1           B\nAAACGCACTGGTAC-1         pDC\n\n# 或\npbmc[[]] |&gt; head()\n\n                 orig.ident nCount_RNA nFeature_RNA nCount_SCT nFeature_SCT\nAAACATACAACCAC-1     pbmc3k       2419          779       2275          769\nAAACATTGAGCTAC-1     pbmc3k       4903         1352       2597         1126\nAAACATTGATCAGC-1     pbmc3k       3147         1129       2469         1111\nAAACCGTGCTTCCG-1     pbmc3k       2639          960       2343          942\nAAACCGTGTATGCG-1     pbmc3k        980          521       1901          551\nAAACGCACTGGTAC-1     pbmc3k       2163          781       2148          767\n                 SCT_snn_res.0.8 seurat_clusters nCount_RNA3 nFeature_RNA3\nAAACATACAACCAC-1               4               4        2419           779\nAAACATTGAGCTAC-1               2               2        4903          1352\nAAACATTGATCAGC-1               0               0        3147          1129\nAAACCGTGCTTCCG-1               5               5        2639           960\nAAACCGTGTATGCG-1               6               6         980           521\nAAACGCACTGGTAC-1               0               0        2163           781\n                   old.ident\nAAACATACAACCAC-1   CD16 Mono\nAAACATTGAGCTAC-1          DC\nAAACATTGATCAGC-1         pDC\nAAACCGTGCTTCCG-1 B Activated\nAAACCGTGTATGCG-1           B\nAAACGCACTGGTAC-1         pDC\n\n# 如果是展示前6行的话也可以直接这样写：\nhead(pbmc)\n\n                 orig.ident nCount_RNA nFeature_RNA nCount_SCT nFeature_SCT\nAAACATACAACCAC-1     pbmc3k       2419          779       2275          769\nAAACATTGAGCTAC-1     pbmc3k       4903         1352       2597         1126\nAAACATTGATCAGC-1     pbmc3k       3147         1129       2469         1111\nAAACCGTGCTTCCG-1     pbmc3k       2639          960       2343          942\nAAACCGTGTATGCG-1     pbmc3k        980          521       1901          551\nAAACGCACTGGTAC-1     pbmc3k       2163          781       2148          767\nAAACGCTGACCAGT-1     pbmc3k       2175          782       2158          764\nAAACGCTGGTTCTT-1     pbmc3k       2260          790       2204          773\nAAACGCTGTAGCCA-1     pbmc3k       1275          532       1905          523\nAAACGCTGTTTCTG-1     pbmc3k       1103          550       1988          557\n                 SCT_snn_res.0.8 seurat_clusters nCount_RNA3 nFeature_RNA3\nAAACATACAACCAC-1               4               4        2419           779\nAAACATTGAGCTAC-1               2               2        4903          1352\nAAACATTGATCAGC-1               0               0        3147          1129\nAAACCGTGCTTCCG-1               5               5        2639           960\nAAACCGTGTATGCG-1               6               6         980           521\nAAACGCACTGGTAC-1               0               0        2163           781\nAAACGCTGACCAGT-1               4               4        2175           782\nAAACGCTGGTTCTT-1               4               4        2260           790\nAAACGCTGTAGCCA-1               4               4        1275           532\nAAACGCTGTTTCTG-1               7               7        1103           550\n                   old.ident\nAAACATACAACCAC-1   CD16 Mono\nAAACATTGAGCTAC-1          DC\nAAACATTGATCAGC-1         pDC\nAAACCGTGCTTCCG-1 B Activated\nAAACCGTGTATGCG-1           B\nAAACGCACTGGTAC-1         pDC\nAAACGCTGACCAGT-1   CD16 Mono\nAAACGCTGGTTCTT-1   CD16 Mono\nAAACGCTGTAGCCA-1   CD16 Mono\nAAACGCTGTTTCTG-1       CD8 T\n\n# Retrieve specific values from the metadata\npbmc$nCount_RNA[1:5]\n\nAAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n            2419             4903             3147             2639 \nAAACCGTGTATGCG-1 \n             980 \n\npbmc[[c(\"nCount_RNA\", \"nFeature_RNA\")]][1:5,]\n\n                 nCount_RNA nFeature_RNA\nAAACATACAACCAC-1       2419          779\nAAACATTGAGCTAC-1       4903         1352\nAAACATTGATCAGC-1       3147         1129\nAAACCGTGCTTCCG-1       2639          960\nAAACCGTGTATGCG-1        980          521\n\n# Add metadata, see ?AddMetaData\nrandom_group_labels &lt;- c(rep(\"Cancer\", nrow(pbmc@meta.data)/2), \n                         rep(\"Control\", nrow(pbmc@meta.data)/2))\npbmc$groups &lt;- random_group_labels\n\n获取表达量信息 (stored as layers in Seurat v5)\n\n# Retrieve data in an expression matrix RNA counts matrix\npbmc[[\"RNA\"]]$counts[1:5, 1:5]\n\n5 x 5 sparse Matrix of class \"dgCMatrix\"\n              AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1\nAL627309.1                   .                .                .\nAP006222.2                   .                .                .\nRP11-206L10.2                .                .                .\nRP11-206L10.9                .                .                .\nLINC00115                    .                .                .\n              AAACCGTGCTTCCG-1 AAACCGTGTATGCG-1\nAL627309.1                   .                .\nAP006222.2                   .                .\nRP11-206L10.2                .                .\nRP11-206L10.9                .                .\nLINC00115                    .                .\n\n# 或\nLayerData(pbmc, assay = \"RNA\", layer = \"counts\")[1:5, 1:5]\n\n5 x 5 sparse Matrix of class \"dgCMatrix\"\n              AAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1\nAL627309.1                   .                .                .\nAP006222.2                   .                .                .\nRP11-206L10.2                .                .                .\nRP11-206L10.9                .                .                .\nLINC00115                    .                .                .\n              AAACCGTGCTTCCG-1 AAACCGTGTATGCG-1\nAL627309.1                   .                .\nAP006222.2                   .                .\nRP11-206L10.2                .                .\nRP11-206L10.9                .                .\nLINC00115                    .                .\n\n\n\n# Set expression data assume new.data is a new expression matrix\npbmc[[\"RNA\"]]$counts &lt;- new.data\n# 或\nLayerData(pbmc, assay = \"RNA\", layer = \"counts\") &lt;- new.data\n\n获取PCA降维信息\n实际应用场景见 Section 26.6 。\n\n# 获取细胞在所有主成分上的评分（坐标）\nEmbeddings(pbmc, reduction = \"pca\")[1:5, 1:5]\n\n                       PC_1       PC_2       PC_3       PC_4        PC_5\nAAACATACAACCAC-1 -10.165852   1.087645   5.471643 -0.4546899  0.41257085\nAAACATTGAGCTAC-1  -5.814405 -11.244759 -13.092125 -0.4389098  0.05922870\nAAACATTGATCAGC-1  -8.565823   1.643337   5.732506  2.4871682  2.55774745\nAAACCGTGCTTCCG-1  25.632631  -1.695688  -2.335731  3.8829838  0.02413971\nAAACCGTGTATGCG-1  -2.536685  21.282498  -9.103048 -5.1031745 -2.71944035\n\n# 或\npbmc[['pca']]@cell.embeddings[1:5, 1:5]\n\n                       PC_1       PC_2       PC_3       PC_4        PC_5\nAAACATACAACCAC-1 -10.165852   1.087645   5.471643 -0.4546899  0.41257085\nAAACATTGAGCTAC-1  -5.814405 -11.244759 -13.092125 -0.4389098  0.05922870\nAAACATTGATCAGC-1  -8.565823   1.643337   5.732506  2.4871682  2.55774745\nAAACCGTGCTTCCG-1  25.632631  -1.695688  -2.335731  3.8829838  0.02413971\nAAACCGTGTATGCG-1  -2.536685  21.282498  -9.103048 -5.1031745 -2.71944035\n\n# 获取基因在所有主成分上的评分（坐标）\nLoadings(pbmc, reduction = \"pca\")[1:5, 1:5]\n\n              PC_1         PC_2        PC_3        PC_4         PC_5\nS100A9  0.19825859 -0.008571611  0.09650808 -0.28883733 -0.005721886\nGNLY   -0.02330150  0.195582622 -0.10436066 -0.06562367 -0.093134754\nLYZ     0.23833773 -0.023491803  0.06414334 -0.26984270 -0.010442604\nS100A8  0.16884448 -0.007179440  0.09962703 -0.29729996 -0.001143372\nNKG7   -0.04601942  0.296816129 -0.13906341 -0.08608150 -0.061192287\n\n# 或\npbmc[[\"pca\"]]@feature.loadings[1:5, 1:5]\n\n              PC_1         PC_2        PC_3        PC_4         PC_5\nS100A9  0.19825859 -0.008571611  0.09650808 -0.28883733 -0.005721886\nGNLY   -0.02330150  0.195582622 -0.10436066 -0.06562367 -0.093134754\nLYZ     0.23833773 -0.023491803  0.06414334 -0.26984270 -0.010442604\nS100A8  0.16884448 -0.007179440  0.09962703 -0.29729996 -0.001143372\nNKG7   -0.04601942  0.296816129 -0.13906341 -0.08608150 -0.061192287\n\n# 提取PCA信息中的第二主成分，并展示对该主成分影响最大的前5个基因名\nprint(pbmc[[\"pca\"]], dims = 2, nfeatures = 5)\n\nPC_ 2 \nPositive:  NKG7, CCL5, GZMB, GNLY, GZMA \nNegative:  HLA-DRA, CD74, CD79A, HLA-DPB1, HLA-DQA1 \n\n\n\n# Create custom dimensional reduction loadings matrix is optional\nnew_reduction &lt;- CreateDimReducObject(embeddings = new.embeddings, \n                                      loadings = new.loadings, \n                                      key = \"custom_pca\")\n# 或\npbmc[[\"custom_pca\"]] &lt;- new_reduction\n\n通过FetchData从Seurat对象中获取任意信息\nFetchData can access anything from expression matrices, cell embeddings, or metadata use the previously listed commands to access entire matrices。通过FetchData可以提取包括表达量数据、PCA分数以及meta.data内的任何变量并形成一个数据框。实际应用场景见 Section 26.6 。\n\nFetchData(object = pbmc, \n          vars = c(\"PC_1\", \"nFeature_RNA\", \"MS4A1\"), \n          layer = \"counts\") |&gt; head()\n\n                       PC_1 nFeature_RNA MS4A1\nAAACATACAACCAC-1 -10.165852          779     0\nAAACATTGAGCTAC-1  -5.814405         1352     4\nAAACATTGATCAGC-1  -8.565823         1129     0\nAAACCGTGCTTCCG-1  25.632631          960     0\nAAACCGTGTATGCG-1  -2.536685          521     0\nAAACGCACTGGTAC-1  -6.559842          781     0"
  },
  {
    "objectID": "single_cell/seurat/seurat_command_list.html#seurat对象取子集和合并",
    "href": "single_cell/seurat/seurat_command_list.html#seurat对象取子集和合并",
    "title": "7  Seurat常用函数清单",
    "section": "\n7.3 Seurat对象取子集和合并",
    "text": "7.3 Seurat对象取子集和合并\n取子集\n实际应用见 Section 20.3 。\n\n# 根据meta data中的信息取子集\nsubset(x = pbmc, subset = groups == \"Cancer\")\n\nAn object of class Seurat \n40000 features across 1350 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n# 提取特定cell identities, also see ?SubsetData\nsubset(x = pbmc, idents = \"B cell\")\n\nAn object of class Seurat \n40000 features across 157 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n# 反选\nsubset(x = pbmc, idents = c(\"CD4 Naive T\", \"CD8 T\"), invert = TRUE)\n\nAn object of class Seurat \n40000 features across 2505 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n# 根据特定gene/feature表达水平取子集\nsubset(x = pbmc, subset = S100A9 &gt; 1.5)\n\nAn object of class Seurat \n40000 features across 519 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n# 采用多个标准取子集\nsubset(x = pbmc, subset = S100A9 &gt; 1.5 & PC_1 &gt; 5)\n\nAn object of class Seurat \n40000 features across 517 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\nsubset(x = pbmc, subset = S100A9 &gt; 1.5, idents = \"CD8 T\")\n\nAn object of class Seurat \n40000 features across 45 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n# Downsample the number of cells per identity class\nsubset(x = pbmc, downsample = 100)\n\nAn object of class Seurat \n40000 features across 1088 samples within 3 assays \nActive assay: SCT (12572 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 2 other assays present: RNA, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n\n分割layers\nIn Seurat v5, users can now split in object directly into different layers keeps expression data in one object, but splits multiple samples into layers can proceed directly to integration workflow after splitting layers。实际应用场景见 Chapter 12 。\n\nDefaultAssay(pbmc) &lt;- \"RNA\"\n# 按照meta.data中的stim列分割layer\npbmc[[\"RNA\"]] &lt;- split(pbmc[[\"RNA\"]], f = pbmc$groups)\n\n\n如果需要，例如在整合之后，可以将各layers再次合并在一起：\n\npbmc[[\"RNA\"]] &lt;- JoinLayers(pbmc[[\"RNA\"]])\n\n分割Seurat\nIn line with prior workflows, you can also split your Seurat object into a list of multiple objects based on a metadata column creates a list of two objects。通过SplitObject()分割Seurat之后生成的是包含多个Seurat对象的列表。\n\nseurat_list &lt;- SplitObject(pbmc, split.by = \"groups\")\nseurat_list\n\n$Cancer\nAn object of class Seurat \n40000 features across 1350 samples within 3 assays \nActive assay: RNA (13714 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: SCT, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n$Control\nAn object of class Seurat \n40000 features across 1350 samples within 3 assays \nActive assay: RNA (13714 features, 0 variable features)\n 1 layer present: counts\n 2 other assays present: SCT, RNA3\n 2 dimensional reductions calculated: pca, umap\n\n\n\nMerge objects (without integration)\nIn Seurat v5, merging creates a single object, but keeps the expression information split into different layers for integration. If not proceeding with integration, rejoin the layers after merging. 实际应用场景，见此链接。\n\n# Merge two Seurat objects\nmerged_pbmc &lt;- merge(x = seurat_list[[\"Control\"]], \n                     y = seurat_list[[\"Cancer\"]])\n\n\n\n# Example to merge more than two Seurat objects\nmerge(x = pbmc1, \n      y = list(pbmc2, pbmc3))\n\nMerge objects (with integration)\n关于单细胞数据的整合，参考： Chapter 12 。\n\nmerged_pbmc &lt;- NormalizeData(merged_pbmc, verbose = F)\nmerged_pbmc &lt;- FindVariableFeatures(merged_pbmc, verbose = F)\nmerged_pbmc &lt;- ScaleData(merged_pbmc, verbose = F)\nmerged_pbmc &lt;- RunPCA(merged_pbmc, verbose = F)\nmerged_pbmc &lt;- IntegrateLayers(object = merged_pbmc, \n                               method = RPCAIntegration, \n                               orig.reduction = \"pca\", \n                               new.reduction = \"integrated.rpca\",\n                               verbose = FALSE)\n\n# now that integration is complete, rejoin layers\nmerged_pbmc[[\"RNA\"]] &lt;- JoinLayers(merged_pbmc[[\"RNA\"]])\nmerged_pbmc\n\nAn object of class Seurat \n40000 features across 2700 samples within 3 assays \nActive assay: RNA (13714 features, 2000 variable features)\n 3 layers present: data, counts, scale.data\n 2 other assays present: SCT, RNA3\n 2 dimensional reductions calculated: pca, integrated.rpca\n\n\n\n\n\n\n\n\n\nAdditional resources\n\n\n\nUsers who are particularly interested in some of the technical changes to data storage in Seurat v5 can explore the following resources:\n\nSeuratObject manual\nSeurat v5 and Assay5 introductory vignette\n\n\n\n\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] Seurat_5.0.1       SeuratObject_5.0.1 sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-2           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.2            magrittr_2.0.3         RcppAnnoy_0.0.21      \n  [7] spatstat.geom_3.2-7    matrixStats_1.2.0      ggridges_0.5.5        \n [10] compiler_4.3.2         png_0.1-8              vctrs_0.6.5           \n [13] reshape2_1.4.4         stringr_1.5.1          pkgconfig_2.0.3       \n [16] fastmap_1.1.1          ellipsis_0.3.2         utf8_1.2.4            \n [19] promises_1.2.1         rmarkdown_2.25         purrr_1.0.2           \n [22] xfun_0.41              jsonlite_1.8.8         goftest_1.2-3         \n [25] later_1.3.2            spatstat.utils_3.0-4   irlba_2.3.5.1         \n [28] parallel_4.3.2         cluster_2.1.6          R6_2.5.1              \n [31] ica_1.0-3              stringi_1.8.3          RColorBrewer_1.1-3    \n [34] spatstat.data_3.0-3    reticulate_1.34.0      parallelly_1.36.0     \n [37] lmtest_0.9-40          scattermore_1.2        Rcpp_1.0.11           \n [40] knitr_1.45             tensor_1.5             future.apply_1.11.0   \n [43] zoo_1.8-12             sctransform_0.4.1      httpuv_1.6.13         \n [46] Matrix_1.6-4           splines_4.3.2          igraph_1.6.0          \n [49] tidyselect_1.2.0       abind_1.4-5            rstudioapi_0.15.0     \n [52] yaml_2.3.8             spatstat.random_3.2-2  codetools_0.2-19      \n [55] miniUI_0.1.1.1         spatstat.explore_3.2-5 listenv_0.9.0         \n [58] lattice_0.22-5         tibble_3.2.1           plyr_1.8.9            \n [61] shiny_1.8.0            ROCR_1.0-11            evaluate_0.23         \n [64] Rtsne_0.17             future_1.33.0          fastDummies_1.7.3     \n [67] survival_3.5-7         polyclip_1.10-6        fitdistrplus_1.1-11   \n [70] pillar_1.9.0           KernSmooth_2.23-22     plotly_4.10.3         \n [73] generics_0.1.3         RcppHNSW_0.5.0         ggplot2_3.4.4         \n [76] munsell_0.5.0          scales_1.3.0           globals_0.16.2        \n [79] xtable_1.8-4           glue_1.6.2             lazyeval_0.2.2        \n [82] tools_4.3.2            data.table_1.14.10     RSpectra_0.16-1       \n [85] RANN_2.6.1             leiden_0.4.3.1         dotCall64_1.1-1       \n [88] cowplot_1.1.2          grid_4.3.2             tidyr_1.3.0           \n [91] colorspace_2.1-0       nlme_3.1-164           patchwork_1.1.3       \n [94] cli_3.6.2              spatstat.sparse_3.0-3  spam_2.10-0           \n [97] fansi_1.0.6            viridisLite_0.4.2      dplyr_1.1.4           \n[100] uwot_0.1.16            gtable_0.3.4           digest_0.6.33         \n[103] progressr_0.14.0       ggrepel_0.9.4          htmlwidgets_1.6.4     \n[106] htmltools_0.5.7        lifecycle_1.0.4        httr_1.4.7            \n[109] mime_0.12              MASS_7.3-60"
  },
  {
    "objectID": "r_basic/environment_configuration.html#清除当前加载的程序包",
    "href": "r_basic/environment_configuration.html#清除当前加载的程序包",
    "title": "\n2  Rstudio环境配置\n",
    "section": "\n2.4 清除当前加载的程序包",
    "text": "2.4 清除当前加载的程序包\n\ndetach(\"package:dplyr\", unload=TRUE)\n# 或用pacman包内的p_unload函数\npacman::p_unload(\"dplyr\")\n\n如果要从环境中移除所有用户包，则可通过pacman包的p_loaded()+p_unload()函数实现：\n\npacman::p_unload(pacman::p_loaded(), character.only = TRUE)"
  },
  {
    "objectID": "single_cell/seurat/data_visualization_methods_in_seurat.html#种可视化marker-gene的方法",
    "href": "single_cell/seurat/data_visualization_methods_in_seurat.html#种可视化marker-gene的方法",
    "title": "9  Seurat中的数据可视化方法",
    "section": "\n9.1 5种可视化marker gene的方法",
    "text": "9.1 5种可视化marker gene的方法\n定义要检查的marker gene：\n\nfeatures &lt;- c(\"LYZ\", \"CCL5\", \"IL32\", \"PTPRCAP\", \"FCGR3A\", \"PF4\")\n\nRidge plots\nRidge plots - from ggridges. Visualize single cell expression distributions in each cluster\n\nlibrary(Seurat)\nRidgePlot(pbmc3k.final, features = features, ncol = 2)\n\n\n\n\nViolin plot\n\nVlnPlot(pbmc3k.final, features = features)\n\n\n\n\nViolin plots can be split on some variable. Simply add the splitting variable to object metadata and pass it to the split.by argument. 通过添加split.by参数，展示marker gene在不同的样本组别中的表达。\n\nVlnPlot(pbmc3k.final, \n        features = \"percent.mt\", \n        split.by = \"groups\")\n\n\n\n\nFeature plot\nVisualize feature expression in low-dimensional space\n\nFeaturePlot(pbmc3k.final, features = features)\n\n\n\n\n对FeaturePlot的进一步修饰\n原始图像：\n\nFeaturePlot(pbmc3k.final, features = \"MS4A1\")\n\n\n\n\nAdjust the contrast in the plot。通过min.cutoff和max.cutoff调整颜色范围。\n\nFeaturePlot(pbmc3k.final, features = \"MS4A1\", \n            min.cutoff = 1, max.cutoff = 3)\n\n\n\n\n调整颜色：\n\nFeaturePlot(pbmc3k.final, features = \"MS4A1\", cols = c(\"lightblue\", \"red\"))\n\n\n\n# 通过RColorBrewer包取色\nlibrary(RColorBrewer)\nFeaturePlot(pbmc3k.final, features = \"MS4A1\", cols = brewer.pal(n = 10, name = \"RdBu\"))\n\n\n\n\n也可以通过ggplot语法修改颜色：\n\nlibrary(ggplot2)\nFeaturePlot(pbmc3k.final, features = \"MS4A1\") +\n  scale_colour_gradientn(colours = rev(brewer.pal(n = 10, name = \"RdBu\")))\n\n\n\n\nCalculate feature-specific contrast levels based on quantiles of non-zero expression. Particularly useful when plotting multiple markers。\n\nFeaturePlot(pbmc3k.final, \n            features = c(\"MS4A1\", \"PTPRCAP\"), \n            min.cutoff = \"q10\", \n            max.cutoff = \"q90\")\n\n\n\n\n多基因FeaturePlot：\n通过添加split.by参数，来按照不同的样本组别来分别展示marker gene的表达。\n\nFeaturePlot(pbmc3k.final, \n            features = c(\"CD3D\", \"MS4A1\", \"CD79A\"), \n            split.by = \"groups\")\n\n\n\n\nFeaturePlot()中还提供了blend 参数，来可视化两个基因的共表达情况（添加blend = TRUE）。注意blend = TRUE只能适用于2个基因，多个基因会报错 。\n\nFeaturePlot(pbmc3k.final, \n            features = c(\"MS4A1\", \"CD79A\"), \n            blend = TRUE)\n\n\n\n\n如果想实现多个基因的话，可以使用scCustomize包中的Plot_Density_Joint_Only()函数绘制多基因联合密度图。该函数还依赖于Nebulosa包，因此还需要先从BiocManager安装该包：\n\ninstall.packages(\"scCustomize\")\nBiocManager::install(\"Nebulosa\")\n\n\nlibrary(scCustomize)\nPlot_Density_Joint_Only(seurat_object = pbmc3k.final, \n                        features = c(\"CD3D\", \"MS4A1\", \"CD79A\"),\n                        custom_palette = BlueAndRed())\n\n\n\n\nDot plots\nThe size of the dot corresponds to the percentage of cells expressing the feature in each cluster. The color represents the average expression level\n\nDotPlot(pbmc3k.final, \n        features = features) + \n  RotatedAxis()\n\n\n\n\n通过添加split.by参数，来按照不同的样本组别来分别展示marker gene的表达。\n\nDotPlot(pbmc3k.final, \n        features = features, \n        split.by = \"groups\") + \n  RotatedAxis()\n\n\n\n\nHeatmap\n\nDoHeatmap(subset(pbmc3k.final, downsample = 100), \n          features = features, \n          size = 3)\n\n\n\n\nDoHeatmap now shows a grouping bar, splitting the heatmap into groups or clusters. This can be changed with the group.by parameter. 默认的group.by为细胞分群信息，即按照细胞的分群作为分组依据来绘制热图：\n\nDoHeatmap(pbmc3k.final, \n          features = VariableFeatures(pbmc3k.final)[1:30], \n          cells = 1:1000, \n          size = 4, # 分组文字的大小\n          angle = 45) +  # 分组文字角度\n  NoLegend()\n\n\n\n\n我们用meta.data中的任何列作为分群依据。例如这里的”groups”列：\n\ncolnames(pbmc3k.final@meta.data)\n\n[1] \"orig.ident\"         \"nCount_RNA\"         \"nFeature_RNA\"      \n[4] \"seurat_annotations\" \"percent.mt\"         \"RNA_snn_res.0.5\"   \n[7] \"seurat_clusters\"    \"groups\"            \n\nDoHeatmap(pbmc3k.final, \n          features = VariableFeatures(pbmc3k.final)[1:30], \n          group.by = \"groups\",\n          cells = 1:1000, \n          size = 4, # 分组文字的大小\n          angle = 0) +  # 分组文字角度\n  NoLegend()"
  },
  {
    "objectID": "single_cell/seurat/data_visualization_methods_in_seurat.html#细胞分群图",
    "href": "single_cell/seurat/data_visualization_methods_in_seurat.html#细胞分群图",
    "title": "9  Seurat中的数据可视化方法",
    "section": "\n9.2 细胞分群图",
    "text": "9.2 细胞分群图\n\nDimPlot(pbmc3k.final, reduction = \"pca\")\n\n\n\nDimPlot(pbmc3k.final, reduction = \"umap\")\n\n\n\n\n进一步修饰\n\nlibrary(ggplot2)\nDimPlot(pbmc3k.final, reduction = \"umap\") + \n  labs(title = \"Clustering of 2,700 PBMCs\") +\n  theme_bw()\n\n\n\n\n\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\nsessionInfo()\n\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] scCustomize_2.0.1  RColorBrewer_1.1-3 ggplot2_3.4.4      Seurat_5.0.1      \n[5] SeuratObject_5.0.1 sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] RcppAnnoy_0.0.21            splines_4.3.2              \n  [3] later_1.3.2                 bitops_1.0-7               \n  [5] tibble_3.2.1                polyclip_1.10-6            \n  [7] janitor_2.2.0               fastDummies_1.7.3          \n  [9] lifecycle_1.0.4             globals_0.16.2             \n [11] lattice_0.22-5              MASS_7.3-60.0.1            \n [13] magrittr_2.0.3              plotly_4.10.4              \n [15] rmarkdown_2.25              yaml_2.3.8                 \n [17] httpuv_1.6.13               sctransform_0.4.1          \n [19] spam_2.10-0                 spatstat.sparse_3.0-3      \n [21] reticulate_1.34.0           cowplot_1.1.2              \n [23] pbapply_1.7-2               lubridate_1.9.3            \n [25] abind_1.4-5                 zlibbioc_1.48.0            \n [27] Rtsne_0.17                  GenomicRanges_1.54.1       \n [29] purrr_1.0.2                 BiocGenerics_0.48.1        \n [31] RCurl_1.98-1.14             pracma_2.4.4               \n [33] circlize_0.4.15             GenomeInfoDbData_1.2.11    \n [35] IRanges_2.36.0              S4Vectors_0.40.2           \n [37] ggrepel_0.9.5               irlba_2.3.5.1              \n [39] listenv_0.9.0               spatstat.utils_3.0-4       \n [41] goftest_1.2-3               RSpectra_0.16-1            \n [43] spatstat.random_3.2-2       fitdistrplus_1.1-11        \n [45] parallelly_1.36.0           leiden_0.4.3.1             \n [47] codetools_0.2-19            DelayedArray_0.28.0        \n [49] tidyselect_1.2.0            shape_1.4.6                \n [51] farver_2.1.1                matrixStats_1.2.0          \n [53] stats4_4.3.2                spatstat.explore_3.2-5     \n [55] jsonlite_1.8.8              ks_1.14.2                  \n [57] ellipsis_0.3.2              progressr_0.14.0           \n [59] ggridges_0.5.5              survival_3.5-7             \n [61] tools_4.3.2                 ica_1.0-3                  \n [63] Rcpp_1.0.12                 glue_1.7.0                 \n [65] gridExtra_2.3               SparseArray_1.2.3          \n [67] xfun_0.41                   MatrixGenerics_1.14.0      \n [69] GenomeInfoDb_1.38.5         dplyr_1.1.4                \n [71] withr_2.5.2                 fastmap_1.1.1              \n [73] fansi_1.0.6                 digest_0.6.34              \n [75] timechange_0.2.0            R6_2.5.1                   \n [77] mime_0.12                   ggprism_1.0.4              \n [79] colorspace_2.1-0            scattermore_1.2            \n [81] tensor_1.5                  spatstat.data_3.0-4        \n [83] Nebulosa_1.12.0             utf8_1.2.4                 \n [85] tidyr_1.3.0                 generics_0.1.3             \n [87] data.table_1.14.10          httr_1.4.7                 \n [89] htmlwidgets_1.6.4           S4Arrays_1.2.0             \n [91] uwot_0.1.16                 pkgconfig_2.0.3            \n [93] gtable_0.3.4                lmtest_0.9-40              \n [95] SingleCellExperiment_1.24.0 XVector_0.42.0             \n [97] htmltools_0.5.7             dotCall64_1.1-1            \n [99] scales_1.3.0                Biobase_2.62.0             \n[101] png_0.1-8                   snakecase_0.11.1           \n[103] knitr_1.45                  rstudioapi_0.15.0          \n[105] reshape2_1.4.4              nlme_3.1-164               \n[107] zoo_1.8-12                  GlobalOptions_0.1.2        \n[109] stringr_1.5.1               KernSmooth_2.23-22         \n[111] parallel_4.3.2              miniUI_0.1.1.1             \n[113] vipor_0.4.7                 ggrastr_1.0.2              \n[115] pillar_1.9.0                grid_4.3.2                 \n[117] vctrs_0.6.5                 RANN_2.6.1                 \n[119] promises_1.2.1              xtable_1.8-4               \n[121] cluster_2.1.6               beeswarm_0.4.0             \n[123] paletteer_1.5.0             evaluate_0.23              \n[125] mvtnorm_1.2-4               cli_3.6.2                  \n[127] compiler_4.3.2              rlang_1.1.3                \n[129] crayon_1.5.2                future.apply_1.11.1        \n[131] labeling_0.4.3              mclust_6.0.1               \n[133] rematch2_2.1.2              plyr_1.8.9                 \n[135] forcats_1.0.0               ggbeeswarm_0.7.2           \n[137] stringi_1.8.3               viridisLite_0.4.2          \n[139] deldir_2.0-2                munsell_0.5.0              \n[141] lazyeval_0.2.2              spatstat.geom_3.2-7        \n[143] Matrix_1.6-5                RcppHNSW_0.5.0             \n[145] patchwork_1.2.0             future_1.33.1              \n[147] shiny_1.8.0                 SummarizedExperiment_1.32.0\n[149] ROCR_1.0-11                 igraph_1.6.0"
  },
  {
    "objectID": "single_cell/scRNA-seq_online/06_integration.html#不进行整合时检验细胞分群情况",
    "href": "single_cell/scRNA-seq_online/06_integration.html#不进行整合时检验细胞分群情况",
    "title": "24  单细胞数据整合（Integration）",
    "section": "\n24.1 不进行整合时检验细胞分群情况",
    "text": "24.1 不进行整合时检验细胞分群情况\nGenerally, we always look at our clustering without integration before deciding whether we need to perform any alignment. Do not just always perform integration because you think there might be differences - explore the data. If we had performed the normalization on both conditions together in a Seurat object and visualized the similarity between cells, we would have seen condition-specific clustering.\n数据导入\nWe use the split_seurat object from the previous lesson ( Chapter 23 ).\n\nlibrary(Seurat)\nsplit_seurat &lt;- readRDS(\"output/scRNA-seq_online/split_seurat.rds\")\nsplit_seurat\n\nAn object of class Seurat \n28130 features across 29629 samples within 2 assays \nActive assay: SCT (14065 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 1 other assay present: RNA\n 1 dimensional reduction calculated: pca\n\n# Check which assays are stored in objects\nsplit_seurat@assays\n\n$RNA\nAssay (v5) data with 14065 features for 29629 cells\nFirst 10 features:\n AL627309.1, AL669831.5, LINC00115, FAM41C, NOC2L, KLHL17, PLEKHN1,\nHES4, ISG15, AGRN \nLayers:\n counts.ctrl, counts.stim \n\n$SCT\nSCTAssay data with 14065 features for 29629 cells, and 2 SCTModel(s) \nTop 10 variable features:\n FTL, IGKC, CCL2, GNLY, IGLC2, CCL3, CCL4, CXCL10, CCL7, TIMP1 \n\n# 查看目前默认的assay\nDefaultAssay(split_seurat)\n\n[1] \"SCT\"\n\n# 查看默认assay的layers\nLayers(split_seurat)\n\n[1] \"counts\"     \"data\"       \"scale.data\"\n\n# 查看每种样本包含多少细胞\ntable(split_seurat$sample)\n\n\n ctrl  stim \n14847 14782 \n\n# 查看降维信息\nnames(split_seurat@reductions)\n\n[1] \"pca\"\n\n\n\n降维、分群\n\n# Run PCA\nsplit_seurat &lt;- RunPCA(split_seurat)\n# Run UMAP\nsplit_seurat &lt;- RunUMAP(split_seurat, \n                        dims = 1:40, \n                        reduction = \"pca\", \n                        reduction.name = \"umap.unintegrated\")\n\n# 分群\nsplit_seurat &lt;- FindNeighbors(split_seurat, \n                              dims = 1:40, \n                              reduction = \"pca\")\nsplit_seurat &lt;- FindClusters(split_seurat, \n                             cluster.name = \"unintegrated_clusters\")\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1104454\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8974\nNumber of communities: 22\nElapsed time: 5 seconds\n\n# Plot UMAP\np1 &lt;- DimPlot(split_seurat, reduction = \"umap.unintegrated\", group.by = \"sample\")\np2 &lt;- DimPlot(split_seurat, reduction = \"umap.unintegrated\", split.by = \"sample\")\nlibrary(cowplot)\nplot_grid(p1, p2, ncol = 2, labels = \"AUTO\")\n\n\n\nFigure 24.1: 整合前的细胞分群情况\n\n\n\n可以看到，如果不进行整合，不同样本（ctrl vs. stim）间的细胞类型差异很大。The resulting clusters are defined both by cell type and stimulation condition, which creates challenges for downstream analysis. Condition-specific clustering of the cells indicates that we need to integrate the cells across conditions to ensure that cells of the same cell type cluster together.\n\n\n\n\n\n\nTip\n\n\n\n关于FindNeighbors()和FindClusters()的详细说明见下一节 Chapter 25 。\n\n\n\n\n\n\n\n\nWhy is it important the cells of the same cell type cluster together?\n\n\n\nWe want to identify cell types which are present in all samples/conditions/modalities within our dataset, and therefore would like to observe a representation of cells from both samples/conditions/modalities in every cluster. This will enable more interpretable results downstream (i.e. DE analysis, ligand-receptor analysis, differential abundance analysis…).\n\n\nIn this lesson, we will cover the integration of our samples across conditions, which is adapted from Chapter 12 .\n\n\n\n\n\n\nNote\n\n\n\n在此前的 Chapter 10 中我们学习了how to run through the workflow from normalization to clustering without integration. Other steps in the workflow remain fairly similar, but the samples would not necessarily be split in the beginning and integration would not be performed.\nIt can help to first run conditions individually if unsure what clusters to expect or expecting some different cell types between conditions (e.g. tumor and control samples), then run them together to see whether there are condition-specific clusters for cell types present in both conditions. Oftentimes, when clustering cells from multiple conditions there are condition-specific clusters and integration can help ensure the same cell types cluster together."
  },
  {
    "objectID": "single_cell/scRNA-seq_online/06_integration.html#整合",
    "href": "single_cell/scRNA-seq_online/06_integration.html#整合",
    "title": "24  单细胞数据整合（Integration）",
    "section": "\n24.2 整合\n",
    "text": "24.2 整合\n\nIf cells cluster by sample, condition, batch, dataset, modality, this integration step can greatly improve the clustering and the downstream analyses.\nTo integrate, we will use the shared highly variable genes (identified using SCTransform) from each group, then, we will “integrate” or “harmonize” the groups to overlay cells that are similar or have a “common set of biological features” between groups. For example, we could integrate across:\n\n\nDifferent conditions (e.g. control and stimulated)\n\n\n\nDifferent datasets (e.g. scRNA-seq from datasets generated using different library preparation methods on the same samples)\n\n\n\nDifferent modalities (e.g. scRNA-seq and scATAC-seq)\n\n\nDifferent batches (e.g. when experimental conditions make batch processing of samples necessary)\n\nThe goal of integration is to ensure that the cell types of one condition/dataset align with the same celltypes of the other conditions/datasets (e.g. control macrophages align with stimulated macrophages).\nIntegration using CCA\nSeurat v5 enables streamlined integrative analysis using the IntegrateLayers function. The method currently supports five integration methods. Each of these methods performs integration in low-dimensional space, and returns a dimensional reduction (i.e. integrated.rpca) that aims to co-embed shared cell types across batches:\nThe anchor-based CCA integration (method=CCAIntegration) utilizes the canonical correlation analysis (CCA). This method expects “correspondences” or shared biological states among at least a subset of single cells across the groups. The steps in the Seurat integration workflow are outlined in the figure below:\n\n\nImage credit: Stuart T and Butler A, et al. Comprehensive integration of single cell data, bioRxiv 2018 (https://doi.org/10.1101/460147)_\n\nThe different steps applied are as follows:\n\n\nPerform canonical correlation analysis (CCA):\nCCA identifies shared sources of variation between the conditions/groups. It is a form of PCA, in that it identifies the greatest sources of variation in the data, but only if it is shared or conserved across the conditions/groups (using the 3000 most variant genes from each sample).\nThis step roughly aligns the cells using the greatest shared sources of variation.\n\n\n\n\n\n\nNote\n\n\n\nThe shared highly variable genes are used because they are the most likely to represent those genes distinguishing the different cell types present.\n\n\n\n\nIdentify anchors or mutual nearest neighbors (MNNs) across datasets (sometimes incorrect anchors are identified):\nMNNs can be thought of as ‘best buddies’. For each cell in one condition:\n\nThe cell’s closest neighbor in the other condition is identified based on gene expression values - its ‘best buddy’.\nThe reciprocal analysis is performed, and if the two cells are ‘best buddies’ in both directions, then those cells will be marked as anchors to ‘anchor’ the two datasets together.\n\n\n“The difference in expression values between cells in an MNN pair provides an estimate of the batch effect, which is made more precise by averaging across many such pairs. A correction vector is obtained and applied to the expression values to perform batch correction.” (Stuart et al. 2019)\n\n\n\nFilter anchors to remove incorrect anchors:\nAssess the similarity between anchor pairs by the overlap in their local neighborhoods (incorrect anchors will have low scores) - do the adjacent cells have ‘best buddies’ that are adjacent to each other?\n\n\nIntegrate the conditions/datasets:\nUse anchors and corresponding scores to transform the cell expression values, allowing for the integration of the conditions/datasets (different samples, conditions, datasets, modalities)\n\n\n\n\n\n\nNote\n\n\n\nTransformation of each cell uses a weighted average of the two cells of each anchor across anchors of the datasets. Weights determined by cell similarity score (distance between cell and k nearest anchors) and anchor scores, so cells in the same neighborhood should have similar correction values.\n\n\nIf cell types are present in one dataset, but not the other, then the cells will still appear as a separate sample-specific cluster.\n\n\nNow, using our SCTransform object as input, let’s perform the integration across conditions.\n\n# 可以看到目前的降维信息包括\"pca\"和\"umap.unintegrated\"\nnames(split_seurat@reductions)\n\n[1] \"pca\"               \"umap.unintegrated\"\n\n# 整合，比较耗时间（约13min），进度条会一直显示0%直至运算完成\nlibrary(beepr)\nseurat_integrated &lt;- IntegrateLayers(object = split_seurat,\n                                     method = CCAIntegration,\n                                     normalization.method = \"SCT\", # 指定使用的标准化方法为SCTransform\n                                     orig.reduction = \"pca\",\n                                     new.reduction = \"integrated.cca\", #  整合后新的降维数据的名称\n                                     verbose = FALSE); beep()\n\n# 整合后重新合并RNA layer\nseurat_integrated[[\"RNA\"]] &lt;- JoinLayers(seurat_integrated[[\"RNA\"]])\n\n# 查看整合后的降维信息\nnames(seurat_integrated@reductions)\n\n[1] \"pca\"               \"umap.unintegrated\" \"integrated.cca\"   \n\n\n\n\n\n\n\n\nTip\n\n\n\n如何调用Seurat嵌入的其他整合算法进行整合，参考：Chapter 13 。"
  },
  {
    "objectID": "single_cell/scRNA-seq_online/06_integration.html#整合后检验细胞分群情况",
    "href": "single_cell/scRNA-seq_online/06_integration.html#整合后检验细胞分群情况",
    "title": "24  单细胞数据整合（Integration）",
    "section": "\n24.3 整合后检验细胞分群情况",
    "text": "24.3 整合后检验细胞分群情况\nAfter integration, to visualize the integrated data we can use dimensionality reduction techniques, such as PCA and Uniform Manifold Approximation and Projection (UMAP). While PCA will determine all PCs, we can only plot two at a time. In contrast, UMAP will take the information from any number of top PCs to arrange the cells in this multidimensional space. It will take those distances in multidimensional space and plot them in two dimensions working to preserve local and global structure. In this way, the distances between cells represent similarity in expression. If you wish to explore UMAP in more detail, this post is a nice introduction to UMAP theory.\nHere, we visualize with UMAP. UMAP is a stochastic algorithm – this means that it makes use of randomness both to speed up approximation steps, and to aid in solving hard optimization problems. Due to the stochastic nature, different runs of UMAP can produce different results. We can set the seed to a specific (but random) number, and this avoids the creation of a slightly different UMAP each time re-run our code.\n\n# Set seed\nset.seed(123456)\n# Run UMAP\nseurat_integrated &lt;- RunUMAP(seurat_integrated, \n                             dims = 1:40,\n                             reduction = \"integrated.cca\", # 更改降维来源为整合后的\"integrated.cca\"\n                             reduction.name = \"umap.integrated\") \n\n# 分群\nseurat_integrated &lt;- FindNeighbors(seurat_integrated, \n                                   dims = 1:40, \n                                   reduction = \"integrated.cca\") #更改降维来源为\"integrated.cca\"\n                                   \nseurat_integrated &lt;- FindClusters(seurat_integrated, \n                                  cluster.name = \"integrated_clusters\")\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8864\nNumber of communities: 22\nElapsed time: 4 seconds\n\n# Plot UMAP                             \np3 &lt;- DimPlot(seurat_integrated, \n              reduction = \"umap.integrated\", \n              group.by = \"sample\")\np4 &lt;- DimPlot(seurat_integrated, \n              reduction = \"umap.integrated\", \n              split.by = \"sample\")\nplot_grid(p1, p2, p3, p4, \n          ncol = 2, labels = \"AUTO\")\n\n\n\nFigure 24.2: 整合前后细胞分群情况（A, B: 整合前；C, D: 整合后）\n\n\n\n\nWhen we compare the similarity between the ctrl and stim clusters in the above plot with what we see using the the unintegrated dataset, it is clear that this dataset benefitted from the integration!\n\nSave the “integrated” object!\n\n# Save integrated seurat object\nsaveRDS(seurat_integrated, \"output/scRNA-seq_online/integrated_seurat.rds\")"
  },
  {
    "objectID": "single_cell/scRNA-seq_online/06_integration.html#complex-integration-tasks",
    "href": "single_cell/scRNA-seq_online/06_integration.html#complex-integration-tasks",
    "title": "24  单细胞数据整合（Integration）",
    "section": "\n24.4 Complex Integration Tasks",
    "text": "24.4 Complex Integration Tasks\nIn the section above, we’ve presented the Seurat integration workflow, which uses canonical correlation analysis (CCA) and multiple nearest neighbors (MNN) to find “anchors” and integrate across samples, conditions, modalities, etc. While the Seurat integration approach is widely used and several benchmarking studies support its great performance in many cases, it is important to recognize that alternative integration algorithms exist and may work better for more complex integration tasks (see Luecken et al. 2021 for a comprehensive review).\nNot all integration algorithms rely on the same methodology, and they do not always provide the same type of corrected output (embeddings, count matrix…). Their performance is also affected by preliminary data processing steps, including which normalization method was used and how highly variable genes (HVGs) were determined. All those considerations are important to keep in mind when selecting a data integration approach for your study.\nWhat do we mean by a “complex” integration task?\nIn their benchmarking study (Luecken et al. 2021) compared the performance of different scRNA-seq integration tools when confronted to different “complex” tasks. The “complexity” of integrating a dataset may relate to the number of samples (perhaps generated using different protocols) but also to the biological question the study seeks to address (e.g. comparing cell types across tissues, species…). In these contexts, you may need to integrate across multiple confounding factors before you can start exploring the biology of your system.\n\nIn these more complex scenarios, you want to select a data integration approach that successfully balances out the following challenges:\n\nCorrecting for inter-sample variability due to source samples from different donors\nCorrecting for variability across protocols/technologies (10X, SMART-Seq2, inDrop…; single-cell vs. single nucleus; variable number of input cells and sequencing depth; different sample preparation steps…)\nIdentifying consistent cell types across different tissues (peripheral blood, bone marrow, lung…) and/or different locations (e.g. areas of the brain)\nKeeping apart cell subtypes (or even cell states) that show similar transcriptomes (CD4 naive vs. memory, NK vs NKT)\nKeeping apart cell subtypes that are unique to a tissue/condition\nConserving the developmental trajectory, if applicable\n\nNot all tools may perform as well on every task, and complex datasets may require testing several data integration approaches. You might want to analyze independently each of the batches you consider to integrate across, in order to define cell identities at this level before integrating and checking that the initially annotated cell types are mixed as expected.\nHarmonizing as a method of integration\nHarmony (Korsunsky et al. 2019) was devleoped in 2019, and is an example of a tool that can work with complex integration tasks. It is available as an GitHub and CRAN, and it has functions for standalone and Seurat pipeline analyses. It has been shown to perform incredibly well from recent benchmarking studies (Tran et al. 2020).\n在Seurat工作流的基础上实现基于Harmony的单细胞数据整合，可以使用Harmony包（available on GitHub and CRAN），详见该教程。同时，Seurat V5中的IntegrateLayers函数集成了Harmony整合算法，可以直接调用，详见：Chapter 13 。Compared to other algorithms, Harmony notably presents the following advantages (Korsunsky et al. 2019, Tran et al. 2020):\n\nPossibility to integrate data across several variables (for example, by experimental batch and by condition)\nSignificant gain in speed and lower memory requirements for integration of large datasets\nInteroperability with the Seurat workflow\n\n\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] beepr_1.3          cowplot_1.1.2      Seurat_5.0.1       SeuratObject_5.0.1\n[5] sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-2           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.21      \n  [7] spatstat.geom_3.2-7    matrixStats_1.2.0      ggridges_0.5.5        \n [10] compiler_4.3.2         png_0.1-8              vctrs_0.6.5           \n [13] reshape2_1.4.4         stringr_1.5.1          pkgconfig_2.0.3       \n [16] fastmap_1.1.1          ellipsis_0.3.2         labeling_0.4.3        \n [19] utf8_1.2.4             promises_1.2.1         rmarkdown_2.25        \n [22] purrr_1.0.2            xfun_0.41              jsonlite_1.8.8        \n [25] goftest_1.2-3          later_1.3.2            spatstat.utils_3.0-4  \n [28] irlba_2.3.5.1          parallel_4.3.2         cluster_2.1.6         \n [31] R6_2.5.1               ica_1.0-3              stringi_1.8.3         \n [34] RColorBrewer_1.1-3     spatstat.data_3.0-4    reticulate_1.34.0     \n [37] parallelly_1.36.0      lmtest_0.9-40          scattermore_1.2       \n [40] Rcpp_1.0.12            knitr_1.45             tensor_1.5            \n [43] future.apply_1.11.1    audio_0.1-11           zoo_1.8-12            \n [46] sctransform_0.4.1      httpuv_1.6.13          Matrix_1.6-5          \n [49] splines_4.3.2          igraph_1.6.0           tidyselect_1.2.0      \n [52] abind_1.4-5            rstudioapi_0.15.0      yaml_2.3.8            \n [55] spatstat.random_3.2-2  codetools_0.2-19       miniUI_0.1.1.1        \n [58] spatstat.explore_3.2-5 listenv_0.9.0          lattice_0.22-5        \n [61] tibble_3.2.1           plyr_1.8.9             withr_2.5.2           \n [64] shiny_1.8.0            ROCR_1.0-11            evaluate_0.23         \n [67] Rtsne_0.17             future_1.33.1          fastDummies_1.7.3     \n [70] survival_3.5-7         polyclip_1.10-6        fitdistrplus_1.1-11   \n [73] pillar_1.9.0           KernSmooth_2.23-22     plotly_4.10.4         \n [76] generics_0.1.3         RcppHNSW_0.5.0         ggplot2_3.4.4         \n [79] munsell_0.5.0          scales_1.3.0           globals_0.16.2        \n [82] xtable_1.8-4           glue_1.7.0             lazyeval_0.2.2        \n [85] tools_4.3.2            data.table_1.14.10     RSpectra_0.16-1       \n [88] RANN_2.6.1             leiden_0.4.3.1         dotCall64_1.1-1       \n [91] grid_4.3.2             tidyr_1.3.0            colorspace_2.1-0      \n [94] nlme_3.1-164           patchwork_1.2.0        cli_3.6.2             \n [97] spatstat.sparse_3.0-3  spam_2.10-0            fansi_1.0.6           \n[100] viridisLite_0.4.2      dplyr_1.1.4            uwot_0.1.16           \n[103] gtable_0.3.4           digest_0.6.34          progressr_0.14.0      \n[106] ggrepel_0.9.5          farver_2.1.1           htmlwidgets_1.6.4     \n[109] htmltools_0.5.7        lifecycle_1.0.4        httr_1.4.7            \n[112] mime_0.12              MASS_7.3-60.0.1"
  },
  {
    "objectID": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#set-up",
    "href": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#set-up",
    "title": "25  细胞聚类（clustering analysis）",
    "section": "\n25.1 Set up",
    "text": "25.1 Set up\n读取上一节（ Chapter 24 ）中完成质控和整合的单细胞数据seurat_integrated。\n\nlibrary(Seurat)\nseurat_integrated &lt;- readRDS(\"output/scRNA-seq_online/integrated_seurat.rds\")\nseurat_integrated\n\nAn object of class Seurat \n28130 features across 29629 samples within 2 assays \nActive assay: SCT (14065 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 1 other assay present: RNA\n 4 dimensional reductions calculated: pca, umap.unintegrated, integrated.cca, umap.integrated\n\nhead(seurat_integrated, 5)\n\n                      orig.ident nCount_RNA nFeature_RNA sample\nctrl_AAACATACAATGCC-1          1       2344          874   ctrl\nctrl_AAACATACATTTCC-1          1       3125          896   ctrl\nctrl_AAACATACCAGAAA-1          1       2578          725   ctrl\nctrl_AAACATACCAGCTA-1          1       3261          979   ctrl\nctrl_AAACATACCATGCA-1          1        746          362   ctrl\n                      log10GenesPerUMI  mitoRatio                 cells\nctrl_AAACATACAATGCC-1        0.8728630 0.01962457 ctrl_AAACATACAATGCC-1\nctrl_AAACATACATTTCC-1        0.8447596 0.01792000 ctrl_AAACATACATTTCC-1\nctrl_AAACATACCAGAAA-1        0.8384933 0.01551590 ctrl_AAACATACCAGAAA-1\nctrl_AAACATACCAGCTA-1        0.8512622 0.01379945 ctrl_AAACATACCAGCTA-1\nctrl_AAACATACCATGCA-1        0.8906861 0.02144772 ctrl_AAACATACCATGCA-1\n                      nCount_SCT nFeature_SCT      S.Score    G2M.Score Phase\nctrl_AAACATACAATGCC-1       1598          864  0.010526369  0.011803814   G2M\nctrl_AAACATACATTTCC-1       1575          735  0.010251663  0.015119823   G2M\nctrl_AAACATACCAGAAA-1       1563          671 -0.019803499 -0.015779795    G1\nctrl_AAACATACCAGCTA-1       1587          775 -0.032093208  0.013380044   G2M\nctrl_AAACATACCATGCA-1       1086          374  0.008301833 -0.008402066     S\n                           mitoFr unintegrated_clusters seurat_clusters\nctrl_AAACATACAATGCC-1      Medium                     4               5\nctrl_AAACATACATTTCC-1      Medium                     0               0\nctrl_AAACATACCAGAAA-1      Medium                    14              14\nctrl_AAACATACCAGCTA-1         Low                     1               6\nctrl_AAACATACCATGCA-1 Medium high                    16              12\n                      integrated_clusters\nctrl_AAACATACAATGCC-1                   5\nctrl_AAACATACATTTCC-1                   0\nctrl_AAACATACCAGAAA-1                  14\nctrl_AAACATACCAGCTA-1                   6\nctrl_AAACATACCATGCA-1                  12"
  },
  {
    "objectID": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#决定后续分析的主成分",
    "href": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#决定后续分析的主成分",
    "title": "25  细胞聚类（clustering analysis）",
    "section": "\n25.2 决定后续分析的主成分",
    "text": "25.2 决定后续分析的主成分\nTo overcome the extensive technical noise in the expression of any single gene for scRNA-seq data, Seurat assigns cells to clusters based on their PCA scores derived from the expression of the integrated most variable genes, with each PC essentially representing a “metagene” that combines information across a correlated gene set. Determining how many PCs to include in the clustering step is therefore important to ensure that we are capturing the majority of the variation, or cell types, present in our dataset.\nIt is useful to explore the PCs prior to deciding which PCs to include for the downstream clustering analysis.\n通过热图判断需要包括的主成分\nOne way of exploring the PCs is using a heatmap to visualize the most variant genes for select PCs with the genes and cells ordered by PCA scores. The idea here is to look at the PCs and determine whether the genes driving them make sense for differentiating the different cell types.\nThe cells argument specifies the number of cells with the most negative or postive PCA scores to use for the plotting. The idea is that we are looking for a PC where the heatmap starts to look more “fuzzy”, i.e. where the distinctions between the groups of genes is not so distinct.\n\n# Explore heatmap of PCs\nDimHeatmap(seurat_integrated, \n           dims = 1:9, \n           cells = 500, \n           balanced = TRUE)\n\n\n\n\nThis method can be slow and hard to visualize individual genes if we would like to explore a large number of PCs. In the same vein and to explore a large number of PCs, we could print out the top 10 (or more) positive and negative genes by PCA scores driving the PCs.\n\n# Printing out the most variable genes driving PCs\nprint(x = seurat_integrated[[\"pca\"]], \n      dims = 1:10, \n      nfeatures = 5)\n\nPC_ 1 \nPositive:  IGKC, GNLY, RPL3, RPL13, RPS18 \nNegative:  FTL, CCL2, CCL8, CXCL10, TIMP1 \nPC_ 2 \nPositive:  GNLY, CCL5, GZMB, NKG7, PRF1 \nNegative:  IGKC, IGHM, CD74, HLA-DRA, CD79A \nPC_ 3 \nPositive:  PABPC1, RPS18, RPL13, RPL10, RPS6 \nNegative:  GNLY, IGKC, GZMB, CCL5, NKG7 \nPC_ 4 \nPositive:  CCL4, CCL3, CCL4L2, CCL2, CCL8 \nNegative:  FTL, TIMP1, GNLY, HLA-DRA, VMO1 \nPC_ 5 \nPositive:  CCL4, CCL3, CCL4L2, TIMP1, VMO1 \nNegative:  CCL2, CCL7, CCL8, IGKC, GNLY \nPC_ 6 \nPositive:  FTL, CXCL8, CCL4L2, CXCL3, S100A8 \nNegative:  CXCL10, CCL8, ISG15, IGLC2, APOBEC3A \nPC_ 7 \nPositive:  IGKC, CXCL10, VMO1, TIMP1, FCGR3A \nNegative:  IGLC2, IGLC3, IGHM, CD74, HLA-DRA \nPC_ 8 \nPositive:  HBB, HBA2, HBA1, SNCA, HBG2 \nNegative:  IGLC2, PPBP, HLA-DRA, CD74, IGLC3 \nPC_ 9 \nPositive:  PPBP, PF4, GNG11, CAVIN2, TUBB1 \nNegative:  GNLY, FTL, TXN, RPL10, RPL3 \nPC_ 10 \nPositive:  TXN, HSPB1, HSPA1A, HSPA1B, HLA-DRA \nNegative:  IGLC2, TIMP1, VMO1, PPBP, IGHM \n\n\n通过肘图（elbow plot）判断需要包括的主成分\nThe elbow plot is another helpful way to determine how many PCs to use for clustering so that we are capturing majority of the variation in the data. The elbow plot visualizes the standard deviation of each PC, and we are looking for where the standard deviations begins to plateau. Essentially, where the elbow appears is usually the threshold for identifying the majority of the variation. However, this method can be quite subjective.\nLet’s draw an elbow plot using the top 40 PCs:\n\n# Plot the elbow plot\nElbowPlot(object = seurat_integrated, \n          ndims = 40)\n\n\n\n\nBased on this plot, we could roughly determine the majority of the variation by where the elbow occurs around PC8 - PC10, or one could argue that it should be when the data points start to get close to the X-axis, PC30 or so. This gives us a very rough idea of the number of PCs needed to be included, we can extract the information visualized here in a more quantitative manner, which may be a bit more reliable.\nWhile the above 2 methods were used a lot more with older methods from Seurat for normalization and identification of variable genes, they are no longer as important as they used to be. This is because the SCTransform method is more accurate than older methods，基于SCTransform的标准化流程中不再需要判断纳入的主成分数量，可以纳入更多的主成分（ Section 10.5 ）.\n\n\n\n\n\n\nWhy is selection of PCs more important for older methods?\n\n\n\nThe older methods incorporated some technical sources of variation into some of the higher PCs, so selection of PCs was more important. SCTransform estimates the variance better and does not frequently include these sources of technical variation in the higher PCs.\nIn theory, with SCTransform, the more PCs we choose the more variation is accounted for when performing the clustering, but it takes a lot longer to perform the clustering. Therefore for this analysis, we will use the first 40 PCs to generate the clusters."
  },
  {
    "objectID": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#聚类cluster-the-cells",
    "href": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#聚类cluster-the-cells",
    "title": "25  细胞聚类（clustering analysis）",
    "section": "\n25.3 聚类（Cluster the cells）",
    "text": "25.3 聚类（Cluster the cells）\nSeurat uses a graph-based clustering approach using a K-nearest neighbor approach, and then attempts to partition this graph into highly interconnected ‘quasi-cliques’ or ‘communities’ （ Section 8.7 ）. A nice in-depth description of clustering methods is provided in the SVI Bioinformatics and Cellular Genomics Lab course.\nFind neighbors\nThe first step is to construct a K-nearest neighbor (KNN) graph based on the euclidean distance in PCA space.\n\n\nImage source: Analysis of Single cell RNA-seq data\n\n\nEdges are drawn between cells with similar features expression patterns.\nEdge weights are refined between any two cells based on shared overlap in their local neighborhoods.\n\nThis is done in Seurat by using the FindNeighbors() function（这里不需要运行，因为在上一节中我们已经在整合后运行了FindNeighbors）:\n\n# Determine the K-nearest neighbor graph（不需运行）\nseurat_integrated &lt;- FindNeighbors(seurat_integrated, \n                                   dims = 1:40, \n                                   reduction = \"integrated.cca\")\n\nFind clusters\nNext, Seurat will iteratively group cells together with the goal of optimizing the standard modularity function.\nWe will use the FindClusters() function to perform the graph-based clustering. The resolution is an important argument that sets the “granularity” of the downstream clustering and will need to be optimized for every individual experiment. For datasets of 3,000 - 5,000 cells, the resolution set between 0.4-1.4 generally yields good clustering. Increased resolution values lead to a greater number of clusters, which is often required for larger datasets.\nThe FindClusters() function allows us to enter a series of resolutions and will calculate the “granularity” of the clustering. This is very helpful for testing which resolution works for moving forward without having to run the function for each resolution.\n\n# Determine the clusters for various resolutions                                \nseurat_integrated &lt;- FindClusters(object = seurat_integrated,\n                                  resolution = c(0.4, 0.6, 0.8, 1.0, 1.4))\n\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9211\nNumber of communities: 14\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9019\nNumber of communities: 17\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8864\nNumber of communities: 22\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8727\nNumber of communities: 26\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8511\nNumber of communities: 28\nElapsed time: 4 seconds"
  },
  {
    "objectID": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#visualize-clusters-of-cells",
    "href": "single_cell/scRNA-seq_online/07_SC_clustering_cells_SCT.html#visualize-clusters-of-cells",
    "title": "25  细胞聚类（clustering analysis）",
    "section": "\n25.4 Visualize clusters of cells",
    "text": "25.4 Visualize clusters of cells\nTo visualize the cell clusters, there are a few different dimensionality reduction techniques that can be helpful. The most popular methods include t-distributed stochastic neighbor embedding (t-SNE) and Uniform Manifold Approximation and Projection (UMAP) techniques.\nBoth methods aim to place cells with similar local neighborhoods in high-dimensional space together in low-dimensional space. These methods will require you to input number of PCA dimentions to use for the visualization, we suggest using the same number of PCs as input to the clustering analysis. Here, we will proceed with the UMAP method for visualizing the clusters.\nWe can only visualize the results of one resolution setting at a time. If we look at the metadata of our Seurat object(seurat_integrated@meta.data), you should observe a separate column for each of the different resolutions calculated.\n\n# Explore resolutions\nhead(seurat_integrated@meta.data, 5)\n\n                      orig.ident nCount_RNA nFeature_RNA sample\nctrl_AAACATACAATGCC-1          1       2344          874   ctrl\nctrl_AAACATACATTTCC-1          1       3125          896   ctrl\nctrl_AAACATACCAGAAA-1          1       2578          725   ctrl\nctrl_AAACATACCAGCTA-1          1       3261          979   ctrl\nctrl_AAACATACCATGCA-1          1        746          362   ctrl\n                      log10GenesPerUMI  mitoRatio                 cells\nctrl_AAACATACAATGCC-1        0.8728630 0.01962457 ctrl_AAACATACAATGCC-1\nctrl_AAACATACATTTCC-1        0.8447596 0.01792000 ctrl_AAACATACATTTCC-1\nctrl_AAACATACCAGAAA-1        0.8384933 0.01551590 ctrl_AAACATACCAGAAA-1\nctrl_AAACATACCAGCTA-1        0.8512622 0.01379945 ctrl_AAACATACCAGCTA-1\nctrl_AAACATACCATGCA-1        0.8906861 0.02144772 ctrl_AAACATACCATGCA-1\n                      nCount_SCT nFeature_SCT      S.Score    G2M.Score Phase\nctrl_AAACATACAATGCC-1       1598          864  0.010526369  0.011803814   G2M\nctrl_AAACATACATTTCC-1       1575          735  0.010251663  0.015119823   G2M\nctrl_AAACATACCAGAAA-1       1563          671 -0.019803499 -0.015779795    G1\nctrl_AAACATACCAGCTA-1       1587          775 -0.032093208  0.013380044   G2M\nctrl_AAACATACCATGCA-1       1086          374  0.008301833 -0.008402066     S\n                           mitoFr unintegrated_clusters seurat_clusters\nctrl_AAACATACAATGCC-1      Medium                     4               4\nctrl_AAACATACATTTCC-1      Medium                     0               9\nctrl_AAACATACCAGAAA-1      Medium                    14              18\nctrl_AAACATACCAGCTA-1         Low                     1               6\nctrl_AAACATACCATGCA-1 Medium high                    16              14\n                      integrated_clusters SCT_snn_res.0.4 SCT_snn_res.0.6\nctrl_AAACATACAATGCC-1                   5               0               0\nctrl_AAACATACATTTCC-1                   0               2               1\nctrl_AAACATACCAGAAA-1                  14               4               5\nctrl_AAACATACCAGCTA-1                   6               4               5\nctrl_AAACATACCATGCA-1                  12               5               6\n                      SCT_snn_res.0.8 SCT_snn_res.1 SCT_snn_res.1.4\nctrl_AAACATACAATGCC-1               5             2               4\nctrl_AAACATACATTTCC-1               0             0               9\nctrl_AAACATACCAGAAA-1              14            17              18\nctrl_AAACATACCAGCTA-1               6             8               6\nctrl_AAACATACCATGCA-1              12            14              14\n\n\nTo choose a resolution to start with, we often pick something in the middle of the range like 0.6 or 0.8. We will start with a resolution of 0.8 by assigning the identity of the clusters using the Idents() function.\n\n# Assign identity of clusters\nIdents(seurat_integrated) &lt;- \"SCT_snn_res.0.8\"\n\nNow, we can plot the UMAP to look at how cells cluster together at a resolution of 0.8:\n\n# Calculation of UMAP\n# DO NOT RUN (calculated in the last lesson)\nseurat_integrated &lt;- RunUMAP(seurat_integrated, \n                             dims = 1:40,\n                             reduction = \"integrated.cca\", # 更改降维来源为整合后的\"integrated.cca\"\n                             reduction.name = \"umap.integrated\") \n\n\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap.integrated\",\n        label = FALSE,\n        label.size = 6)\n\n\n\n\nIt can be useful to explore other resolutions as well. It will give you a quick idea about how the clusters would change based on the resolution parameter. For example, let’s switch to a resolution of 0.4:\n\n# Assign identity of clusters\nIdents(object = seurat_integrated) &lt;- \"SCT_snn_res.0.4\"\n\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap.integrated\",\n        label = FALSE,\n        label.size = 6)\n\n\n\n\n载入案例数据\nHow does your UMAP plot compare to the one above?\nIt is possible that there is some variability in the way your clusters look compared to the image in this lesson. In particular you may see a difference in the labeling of clusters. This is an unfortunate consequence of slight variations in the versions of packages (mostly Seurat dependencies).\nIf your clusters look identical to what’s in the lesson, please go ahead to the next section.\n\nIf your clusters do look different from what we have in the lesson, please follow the instructions provided below.\nInside your data folder you will see a folder called additional_data. It contains the seurat_integrated object that we have created for the class. Let’s load in the object to your R session and overwrite the existing one:\n\nload(bzfile(\"data/scRNA-seq_online/additional_data/seurat_integrated.RData.bz2\"))\nseurat_integrated\n\nAn object of class Seurat \n31130 features across 29629 samples within 3 assays \nActive assay: integrated (3000 features, 3000 variable features)\n 2 layers present: data, scale.data\n 2 other assays present: RNA, SCT\n 2 dimensional reductions calculated: pca, umap\n\nhead(seurat_integrated, 5)\n\n                      orig.ident nCount_RNA nFeature_RNA\nctrl_AAACATACAATGCC-1       ctrl       2344          874\nctrl_AAACATACATTTCC-1       ctrl       3124          895\nctrl_AAACATACCAGAAA-1       ctrl       2578          725\nctrl_AAACATACCAGCTA-1       ctrl       3260          978\nctrl_AAACATACCATGCA-1       ctrl        746          362\n                                      seq_folder nUMI nGene log10GenesPerUMI\nctrl_AAACATACAATGCC-1 ctrl_raw_feature_bc_matrix 2344   874        0.8728630\nctrl_AAACATACATTTCC-1 ctrl_raw_feature_bc_matrix 3125   896        0.8447596\nctrl_AAACATACCAGAAA-1 ctrl_raw_feature_bc_matrix 2578   725        0.8384933\nctrl_AAACATACCAGCTA-1 ctrl_raw_feature_bc_matrix 3261   979        0.8512622\nctrl_AAACATACCATGCA-1 ctrl_raw_feature_bc_matrix  746   362        0.8906861\n                       mitoRatio                 cells sample     S.Score\nctrl_AAACATACAATGCC-1 0.01962457 ctrl_AAACATACAATGCC-1   ctrl  0.04330502\nctrl_AAACATACATTTCC-1 0.01792000 ctrl_AAACATACATTTCC-1   ctrl  0.02661900\nctrl_AAACATACCAGAAA-1 0.01551590 ctrl_AAACATACCAGAAA-1   ctrl -0.04670650\nctrl_AAACATACCAGCTA-1 0.01379945 ctrl_AAACATACCAGCTA-1   ctrl -0.05832833\nctrl_AAACATACCATGCA-1 0.02144772 ctrl_AAACATACCATGCA-1   ctrl  0.03929605\n                        G2M.Score Phase      mitoFr nCount_SCT nFeature_SCT\nctrl_AAACATACAATGCC-1  0.05422631   G2M      Medium       1572          829\nctrl_AAACATACATTTCC-1  0.05159679   G2M      Medium       1572          718\nctrl_AAACATACCAGAAA-1 -0.04841661    G1      Medium       1553          648\nctrl_AAACATACCAGCTA-1  0.05045960   G2M         Low       1576          756\nctrl_AAACATACCATGCA-1 -0.02995512     S Medium high       1075          363\n                      integrated_snn_res.0.4 integrated_snn_res.0.6\nctrl_AAACATACAATGCC-1                      2                      1\nctrl_AAACATACATTTCC-1                      0                      2\nctrl_AAACATACCAGAAA-1                      0                      3\nctrl_AAACATACCAGCTA-1                      0                      3\nctrl_AAACATACCATGCA-1                      5                      6\n                      integrated_snn_res.0.8 integrated_snn_res.1\nctrl_AAACATACAATGCC-1                      2                    2\nctrl_AAACATACATTTCC-1                      1                    0\nctrl_AAACATACCAGAAA-1                      3                   15\nctrl_AAACATACCAGCTA-1                      3                    3\nctrl_AAACATACCATGCA-1                      4                   12\n                      integrated_snn_res.1.4 seurat_clusters\nctrl_AAACATACAATGCC-1                      5               5\nctrl_AAACATACATTTCC-1                      0               0\nctrl_AAACATACCAGAAA-1                     19              19\nctrl_AAACATACCAGCTA-1                      3               3\nctrl_AAACATACCATGCA-1                     13              13\n\n\n\n\n\n\n\n\n\nWarning\n\n\n\n由于这里的案例数据是基于Seurat V5之前的版本创建的，所以数据结构和基于Seurat V5的结果有所差异。比较重要的区别是，这里的Seurat对象的没有layer结构；同时有一个“integrated” assay，用于存放整合后的信息，其类型仍属于SCT assay。而一个典型的经过SCTransform和整合的Seurat V5对象如下图所示（来自 Section 12.4.2 ）：\n\n可以看到没有“integrated” assay，因此，为了和最新的Seurat V5流程保持一致，我们后续把本案例中的“integrated” assay看作整合后的Seurat V5的“SCT” assay。\n\n\n再次检查不同分辨率下的细胞分群情况\nAfter loading seurat_integrated.RData.bz2, we now re-check the object clusters with different resolution (0.4, 0.6, 0.8, 1.0, 1.4).\n\n# 查看不同分辨率下的细胞分群情况\napply(seurat_integrated@meta.data[ ,grep(\"integrated_snn_res.\", \n                                         colnames(seurat_integrated@meta.data))], \n      2, \n      table)\n\n$integrated_snn_res.0.4\n\n   0    1   10   11   12    2    3    4    5    6    7    8    9 \n6715 5899  456  280  124 3661 2680 2377 2166 2143 1217 1177  734 \n\n$integrated_snn_res.0.6\n\n   0    1   10   11   12   13   14    2    3    4    5    6    7    8    9 \n5443 3667 1176  467  464  288  124 3403 3306 2631 2382 2137 1679 1249 1213 \n\n$integrated_snn_res.0.8\n\n   0    1   10   11   12   13   14   15   16    2    3    4    5    6    7    8 \n4220 3718 1208 1174  858  468  459  289  124 3649 3004 2164 1959 1810 1646 1504 \n   9 \n1375 \n\n$integrated_snn_res.1\n\n   0    1   10   11   12   13   14   15   16   17   18   19    2   20   21    3 \n3392 3269 1158 1152  952  876  873  650  520  462  282  176 3041  124   23 2668 \n   4    5    6    7    8    9 \n2508 1881 1643 1509 1261 1209 \n\n$integrated_snn_res.1.4\n\n   0    1   10   11   12   13   14   15   16   17   18   19    2   20   21   22 \n2886 2497 1211 1174  874  838  832  802  766  657  655  629 2130  468  459  357 \n  23   24   25   26    3    4    5    6    7    8    9 \n 292  175  124   23 2011 1884 1827 1646 1587 1489 1336 \n\n\n\n# 批量绘制不同分辨率下的UMAP图\nlibrary(ggplot2)\nlibrary(patchwork)\nlapply(grep(\"integrated_snn_res.\",\n            colnames(seurat_integrated@meta.data), \n            value = TRUE),\n       function(res) {\n         Idents(seurat_integrated) &lt;-  res\n         DimPlot(seurat_integrated,\n                 reduction = \"umap\",\n                 label = FALSE,\n                 label.size = 4) +\n           ggtitle(res) +\n           theme_bw()\n         }) |&gt;\n  wrap_plots(ncol = 2)\n\n\n\n\n\nWe will now continue with the 0.8 resolution to check the quality control metrics and known markers for the anticipated cell types.\n\n# Assign identity of clusters\nIdents(seurat_integrated) &lt;- \"integrated_snn_res.0.8\"\n\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap\",\n        label = TRUE,\n        label.size = 6)\n\n\n\n\n\nsaveRDS(seurat_integrated, file = \"output/scRNA-seq_online/seurat_clustered.rds\")\n\n\n\n\n\n\n\n\nSession Info\n\n\n\n\n\n\n\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] patchwork_1.2.0    ggplot2_3.4.4      Seurat_5.0.1       SeuratObject_5.0.1\n[5] sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-2           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.21      \n  [7] spatstat.geom_3.2-7    matrixStats_1.2.0      ggridges_0.5.5        \n [10] compiler_4.3.2         png_0.1-8              vctrs_0.6.5           \n [13] reshape2_1.4.4         stringr_1.5.1          pkgconfig_2.0.3       \n [16] fastmap_1.1.1          ellipsis_0.3.2         labeling_0.4.3        \n [19] utf8_1.2.4             promises_1.2.1         rmarkdown_2.25        \n [22] purrr_1.0.2            xfun_0.41              jsonlite_1.8.8        \n [25] goftest_1.2-3          later_1.3.2            spatstat.utils_3.0-4  \n [28] irlba_2.3.5.1          parallel_4.3.2         cluster_2.1.6         \n [31] R6_2.5.1               ica_1.0-3              stringi_1.8.3         \n [34] RColorBrewer_1.1-3     spatstat.data_3.0-4    reticulate_1.34.0     \n [37] parallelly_1.36.0      lmtest_0.9-40          scattermore_1.2       \n [40] Rcpp_1.0.12            knitr_1.45             tensor_1.5            \n [43] future.apply_1.11.1    zoo_1.8-12             sctransform_0.4.1     \n [46] httpuv_1.6.13          Matrix_1.6-5           splines_4.3.2         \n [49] igraph_1.6.0           tidyselect_1.2.0       abind_1.4-5           \n [52] rstudioapi_0.15.0      yaml_2.3.8             spatstat.random_3.2-2 \n [55] codetools_0.2-19       miniUI_0.1.1.1         spatstat.explore_3.2-5\n [58] listenv_0.9.0          lattice_0.22-5         tibble_3.2.1          \n [61] plyr_1.8.9             withr_2.5.2            shiny_1.8.0           \n [64] ROCR_1.0-11            evaluate_0.23          Rtsne_0.17            \n [67] future_1.33.1          fastDummies_1.7.3      survival_3.5-7        \n [70] polyclip_1.10-6        fitdistrplus_1.1-11    pillar_1.9.0          \n [73] KernSmooth_2.23-22     plotly_4.10.4          generics_0.1.3        \n [76] RcppHNSW_0.5.0         munsell_0.5.0          scales_1.3.0          \n [79] globals_0.16.2         xtable_1.8-4           glue_1.7.0            \n [82] lazyeval_0.2.2         tools_4.3.2            data.table_1.14.10    \n [85] RSpectra_0.16-1        RANN_2.6.1             leiden_0.4.3.1        \n [88] dotCall64_1.1-1        cowplot_1.1.2          grid_4.3.2            \n [91] tidyr_1.3.0            colorspace_2.1-0       nlme_3.1-164          \n [94] cli_3.6.2              spatstat.sparse_3.0-3  spam_2.10-0           \n [97] fansi_1.0.6            viridisLite_0.4.2      dplyr_1.1.4           \n[100] uwot_0.1.16            gtable_0.3.4           digest_0.6.34         \n[103] progressr_0.14.0       ggrepel_0.9.5          farver_2.1.1          \n[106] htmlwidgets_1.6.4      htmltools_0.5.7        lifecycle_1.0.4       \n[109] httr_1.4.7             mime_0.12              MASS_7.3-60.0.1"
  },
  {
    "objectID": "single_cell/sc_supplementary/universal_marker.html#区分免疫细胞和非免疫细胞",
    "href": "single_cell/sc_supplementary/universal_marker.html#区分免疫细胞和非免疫细胞",
    "title": "\n29  细胞分群通用marker\n",
    "section": "\n29.1 区分免疫细胞和非免疫细胞",
    "text": "29.1 区分免疫细胞和非免疫细胞\n\nImmune: PTPRC (编码CD45)\nEpithelial/cancer：EPCAM\nStromal (CD10+,MME, fibo or CD31+,PECAM1,endo)\n\nCells were defined as non-immune if belonging to a cluster low for PTPRC (gene for CD45) and high for any of the following genes:\n\nMUC5A (goblet cell marker)\nKRT5 (basal epithelial cell marker)\nSFTPD (secretory cell marker)\nEPCAM (pan-epithelial cell marker)\nCDH5 (endothelial cell marker)\nCOL1A2 and ACTA2 (fibroblast markers)\n\n所以你拿到自己的单细胞测序数据后，走完基础流程，可以直接看看这些基因的表达量分布图（气泡图或者小提琴图均可）。下面是一个例子：\n\ngenes_to_check = c(\"PTPRC\",\n                   \"EPCAM\",\n                   \"CD3G\",\"CD3E\", # T cells\n                   \"CD79A\", \"BLNK\", \"MS4A1\", # B cells\n                   \"CD68\", \"CSF1R\", # Monocytes and macrophages\n                   \"MARCO\", \"CD207\", \"PMEL\", \"ALB\", \"C1QB\", \"CLDN5\", \"FCGR3B\", \"COL1A1\")\np &lt;- DotPlot(sce, features = genes_to_check) + coord_flip()\np\n\n\n接下来我们直接根据PTPRC的总表达量的中位数将所有细胞分为免疫细胞和非免疫细胞：\n\n# Annotate Immune vs Nonimmune clusters\n# At this point we dont care for a more detailed annotation as we will annotate immune and non-immune separately later\ndat &lt;- p$data \ncd45 &lt;- dat[dat$features.plot == 'PTPRC',]\nfivenum(cd45$avg.exp.scaled)\nimm &lt;- cd45[cd45$avg.exp.scaled &gt; -0.5,]$id\nimm\nsce$immune_annotation &lt;- ifelse(sce$RNA_snn_res.0.5 %in% imm ,'immune', 'non-immune')\ntable(sce$immune_annotation)\n\n接下来可以进行 TSNE plot  可视化，看到免疫细胞和非免疫细胞是泾渭分明：\n\np &lt;- TSNEPlot(object = sce, group.by = 'immune_annotation')\np"
  },
  {
    "objectID": "single_cell/sc_supplementary/universal_marker.html#区分出恶性细胞",
    "href": "single_cell/sc_supplementary/universal_marker.html#区分出恶性细胞",
    "title": "\n29  细胞分群通用marker\n",
    "section": "\n29.2 区分出恶性细胞",
    "text": "29.2 区分出恶性细胞\n很多情况下是靠inferCNV算法的结果，比如发表于2017年12月，在CELL杂志：Single-Cell Transcriptomic Analysis of Primary and Metastatic Tumor Ecosystems in Head and Neck Cancer 的文献，就是使用inferCNV算法对来自18名患者的5,902个细胞，分成2215个恶性细胞和3363个非恶性细胞如下所示：\n\n可以看到，通过inferCNV算法，能发现非恶性细胞的CNV是几乎没有的，而恶性细胞呢，或多或少有一些染色体片段的拷贝数扩增或者缺失。"
  },
  {
    "objectID": "single_cell/sc_supplementary/universal_marker.html#sec-Universal_Marker_for_initial_Cell_clustering",
    "href": "single_cell/sc_supplementary/universal_marker.html#sec-Universal_Marker_for_initial_Cell_clustering",
    "title": "\n29  细胞分群通用marker\n",
    "section": "\n29.3 细胞初步分群通用marker",
    "text": "29.3 细胞初步分群通用marker\n\n一般来说肿瘤样品的单细胞首先是按照如下所示的标记基因进行第一次分群 ：\n\n免疫细胞共同标记：PTPRC\n髓系细胞（myeloid）：CD163、AIF1\nT cells：CD3D、CD3E、CD4、CD8A\nB cells：CD19、CD79A、MS4A1（编码CD20）、SDC1、CD27、CD38\nPlasma cells：IGHG1、MZB1、SDC1（编码CD138）、JCHAIN\nMonocytes and macrophages：CD68、CD163、CD14\nMonocyte：S100A9、S100A8、MMP19\nMacrophages：C1QA、C1QB\nMast cells：TPSAB1、TPSB2\nNK cells：KLRB1、KLRD1、NCR1、GNLY、NKG7\n【NK Cells：FGFBP2, FCG3RA, CX3CR1】\nEpithelial/cancer：EPCAM、KRT19、PROM1、ALDH1A1、CD24\nEndothelial cells：PECAM1、VWF\nFibroblasts：FGF7、MME、ACTA2、COL3A1\n\n\ngenes_to_check = c('PTPRC', \n                   \"CD163\",\"AIF1\", \n                   'CD3D', 'CD3E', 'CD4', 'CD8A', \n                   'CD19', 'CD79A', 'MS4A1', \"SDC1\", \"CD27\", \"CD38\",\n                   'IGHG1', 'MZB1', 'SDC1', \"JCHAIN\", \n                   'CD68', 'CD163', 'CD14', \n                   'S100A9', 'S100A8', 'MMP19',\n                   'C1QA',  'C1QB', \n                   'TPSAB1', 'TPSB2', \n                   'KLRB1', \"KLRD1\", 'NCR1', \"GNLY\", \"NKG7\", \n                   'FGF7', 'MME', 'ACTA2', \"COL3A1\", \n                   'PECAM1', 'VWF', \n                   'EPCAM', 'KRT19', 'PROM1', 'ALDH1A1') \n\n\n\n\n\n\n\n案例\n\n\n\n\n\n来源：巨噬细胞新分类体系（一篇Science文献复现）\n\ngenes_to_check = c('PTPRC', 'CD3D', 'CD3E', 'CD4','CD8A',\n                   'CD19', 'CD79A', 'MS4A1' ,\n                   'IGHG1', 'MZB1', 'SDC1',\n                   'CD68', 'CD163', 'CD14', \n                   'TPSAB1' , 'TPSB2', \n                   'RCVRN','FPR1' , 'ITGAM' ,\n                   'C1QA',  'C1QB',  \n                   'S100A9', 'S100A8', 'MMP19',\n                   'FCGR3A','LAMP3', 'IDO1','IDO2',## DC3 \n                   'CD1E','CD1C', # DC2\n                   'KLRB1','NCR1', \n                   'FGF7','MME', 'ACTA2', \n                   'DCN', 'LUM',  'GSN' , # mouse PDAC fibo \n                   'PECAM1', 'VWF',  \n                   'EPCAM' , 'KRT19','KRT7', \n                   'FYXD2', 'TM4SF4', 'ANXA4',# 胆管上皮细胞\n                   'APOC3', 'FABP1',  'APOA1',  # 肝细胞\n                   'Serpina1c','PROM1', 'ALDH1A1' )\nDotPlot(sce.all, \n        features = genes_to_check,\n        assay='RNA',\n        group.by = 'celltype' ) + \n  coord_flip()\n\n\n根据气泡图所示的marker基因表达情况，确定细胞分群如下\n\n\nCluster ID\n细胞类型\n\n\n\n0, 7\nT cells\n\n\n2\nMacrophages\n\n\n8\nMast cells\n\n\n1, 9, 10\nEpithelial/cancer cells\n\n\n6\nFibroblasts\n\n\n5\nEndothelial cells\n\n\n4\nCycling\n\n\n3\nB cells\n\n\n\n\n\n\n\n髓系免疫细胞亚群:\n\nth=theme(axis.text.x = element_text(angle = 45,\n                                    vjust = 0.5, hjust=0.5))\nmyeloids = list(\n  Mac=c(\"C1QA\",\"C1QB\",\"C1QC\",\"SELENOP\",\"RNASE1\",\"DAB2\",\"LGMN\",\"PLTP\",\"MAF\",\"SLCO2B1\"),\n  mono=c(\"VCAN\",\"FCN1\",\"CD300E\",\"S100A12\",\"EREG\",\"APOBEC3A\",\"STXBP2\",\"ASGR1\",\"CCR2\",\"NRG1\"),\n  neutrophils = c(\"FCGR3B\",\"CXCR2\",\"SLC25A37\",\"G0S2\",\"CXCR1\",\"ADGRG3\",\"PROK2\",\"STEAP4\",\"CMTM2\" ),\n  pDC = c(\"GZMB\",\"SCT\",\"CLIC3\",\"LRRC26\",\"LILRA4\",\"PACSIN1\",\"CLEC4C\",\"MAP1A\",\"PTCRA\",\"C12orf75\"),\n  DC1 = c(\"CLEC9A\",\"XCR1\",\"CLNK\",\"CADM1\",\"ENPP1\",\"SNX22\",\"NCALD\",\"DBN1\",\"HLA-DOB\",\"PPY\"),\n  DC2 = c( \"CD1C\",\"FCER1A\",\"CD1E\",\"AL138899.1\",\"CD2\",\"GPAT3\",\"CCND2\",\"ENHO\",\"PKIB\",\"CD1B\"),\n  DC3 =  c(\"HMSD\",\"ANKRD33B\",\"LAD1\",\"CCR7\",\"LAMP3\",\"CCL19\",\"CCL22\",\"INSM1\",\"TNNT2\",\"TUBB2B\")\n)\np &lt;- DotPlot(sce.all, features = myeloids,\n             assay='RNA' ,group.by = 'celltype' )  +th\n\np"
  }
]
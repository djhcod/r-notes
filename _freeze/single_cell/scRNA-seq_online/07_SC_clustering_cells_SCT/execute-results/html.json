{
  "hash": "ab50c47666106f82595c060b726e3a32",
  "result": {
    "markdown": "---\ntitle: \"细胞聚类（clustering analysis）\"\n---\n\n\n::: callout-note\n###### Learning Objectives:\n\n-   Describe methods for evaluating the number of principal components used for clustering\n-   Perform clustering of cells based on significant principal components\n:::\n\nNow that we have our high quality cells integrated, we want to know the different cell types present within our population of cells.\n\n![](images/sc_workflow_2022-01.jpg){width=\"545\"}\n\n------------------------------------------------------------------------\n\n**Goals:**\n\n-   To generate **cell type-specific clusters** and use known cell type marker genes to **determine the identities of the clusters**.\n-   To determine **whether clusters represent true cell types or cluster due to biological or technical variation**, such as clusters of cells in the S phase of the cell cycle, clusters of specific batches, or cells with high mitochondrial content.\n\n**Challenges:**\n\n-   **Identifying poor quality clusters** that may be due to uninteresting biological or technical variation\n-   **Identifying the cell types** of each cluster\n-   Maintaining patience as this can be a highly iterative process between clustering and marker identification (sometimes even going back to the QC filtering)\n\n**Recommendations:**\n\n-   Have a good idea of your expectations for the **cell types to be present** prior to performing the clustering. Know whether you expect cell types of low complexity or higher mitochondrial content AND whether the cells are differentiating\n-   If you have **more than one condition**, it's often helpful to perform integration to align the cells\n-   **Regress out** number of UMIs (by default with `SCTransform`), mitochondrial content, and cell cycle, if needed and appropriate for experiment, so not to drive clustering\n-   Identify any **junk clusters** for removal or re-visit QC filtering. Possible junk clusters could include those with high mitochondrial content and low UMIs/genes. If comprised of a lot of cells, then may be helpful to go back to QC to filter out, then re-integrate/cluster.\n-   If **not detecting all cell types as separate clusters**, try changing the resolution or the number of PCs used for clustering\n\n------------------------------------------------------------------------\n\n# Set up\n\n读取[上一节](/single_cell/scRNA-seq_online/06_integration.qmd)中完成质控和整合的单细胞数据`seurat_integrated`。\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-1_d542247d6429a592dec52ce84cca8086'}\n\n```{.r .cell-code}\nlibrary(Seurat)\nseurat_integrated <- readRDS(\"output/scRNA-seq_online/integrated_seurat.rds\")\nseurat_integrated\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n28130 features across 29629 samples within 2 assays \nActive assay: SCT (14065 features, 3000 variable features)\n 3 layers present: counts, data, scale.data\n 1 other assay present: RNA\n 4 dimensional reductions calculated: pca, umap.unintegrated, integrated.cca, umap.integrated\n```\n:::\n\n```{.r .cell-code}\nhead(seurat_integrated, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA sample\nctrl_AAACATACAATGCC-1          1       2344          874   ctrl\nctrl_AAACATACATTTCC-1          1       3125          896   ctrl\nctrl_AAACATACCAGAAA-1          1       2578          725   ctrl\nctrl_AAACATACCAGCTA-1          1       3261          979   ctrl\nctrl_AAACATACCATGCA-1          1        746          362   ctrl\n                      log10GenesPerUMI  mitoRatio                 cells\nctrl_AAACATACAATGCC-1        0.8728630 0.01962457 ctrl_AAACATACAATGCC-1\nctrl_AAACATACATTTCC-1        0.8447596 0.01792000 ctrl_AAACATACATTTCC-1\nctrl_AAACATACCAGAAA-1        0.8384933 0.01551590 ctrl_AAACATACCAGAAA-1\nctrl_AAACATACCAGCTA-1        0.8512622 0.01379945 ctrl_AAACATACCAGCTA-1\nctrl_AAACATACCATGCA-1        0.8906861 0.02144772 ctrl_AAACATACCATGCA-1\n                      nCount_SCT nFeature_SCT      S.Score    G2M.Score Phase\nctrl_AAACATACAATGCC-1       1598          864  0.010526369  0.011803814   G2M\nctrl_AAACATACATTTCC-1       1575          735  0.010251663  0.015119823   G2M\nctrl_AAACATACCAGAAA-1       1563          671 -0.019803499 -0.015779795    G1\nctrl_AAACATACCAGCTA-1       1587          775 -0.032093208  0.013380044   G2M\nctrl_AAACATACCATGCA-1       1086          374  0.008301833 -0.008402066     S\n                           mitoFr unintegrated_clusters seurat_clusters\nctrl_AAACATACAATGCC-1      Medium                     4               5\nctrl_AAACATACATTTCC-1      Medium                     0               0\nctrl_AAACATACCAGAAA-1      Medium                    14              14\nctrl_AAACATACCAGCTA-1         Low                     1               6\nctrl_AAACATACCATGCA-1 Medium high                    16              12\n                      integrated_clusters\nctrl_AAACATACAATGCC-1                   5\nctrl_AAACATACATTTCC-1                   0\nctrl_AAACATACCAGAAA-1                  14\nctrl_AAACATACCAGCTA-1                   6\nctrl_AAACATACCATGCA-1                  12\n```\n:::\n:::\n\n\n# 决定后续分析的主成分\n\nTo overcome the extensive technical noise in the expression of any single gene for scRNA-seq data, **Seurat assigns cells to clusters based on their PCA scores derived from the expression of the integrated most variable genes**, with each PC essentially representing a \"metagene\" that combines information across a correlated gene set. **Determining how many PCs to include in the clustering step is therefore important to ensure that we are capturing the majority of the variation**, or cell types, present in our dataset.\n\nIt is useful to explore the PCs prior to deciding which PCs to include for the downstream clustering analysis.\n\n## 通过热图判断需要包括的主成分\n\nOne way of exploring the PCs is using a heatmap to visualize the most variant genes for select PCs with the **genes and cells ordered by PCA scores**. The idea here is to look at the PCs and determine whether the genes driving them make sense for differentiating the different cell types.\n\nThe `cells` argument specifies the number of cells with the most negative or postive PCA scores to use for the plotting. The idea is that we are **looking for a PC where the heatmap starts to look more \"fuzzy\"**, i.e. **where the distinctions between the groups of genes is not so distinct**.\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-2_4f9d866192b1aa77faaf3a2050b2d957'}\n\n```{.r .cell-code}\n# Explore heatmap of PCs\nDimHeatmap(seurat_integrated, \n           dims = 1:9, \n           cells = 500, \n           balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](07_SC_clustering_cells_SCT_files/figure-html/unnamed-chunk-2-1.png){width=960}\n:::\n:::\n\n\nThis method can be slow and hard to visualize individual genes if we would like to explore a large number of PCs. In the same vein and to explore a large number of PCs, we could print out the top 10 (or more) positive and negative genes by PCA scores driving the PCs.\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-3_51821a4246565926efd12004e5b95b60'}\n\n```{.r .cell-code}\n# Printing out the most variable genes driving PCs\nprint(x = seurat_integrated[[\"pca\"]], \n      dims = 1:10, \n      nfeatures = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nPC_ 1 \nPositive:  IGKC, GNLY, RPL3, RPL13, RPS18 \nNegative:  FTL, CCL2, CCL8, CXCL10, TIMP1 \nPC_ 2 \nPositive:  GNLY, CCL5, GZMB, NKG7, PRF1 \nNegative:  IGKC, IGHM, CD74, HLA-DRA, CD79A \nPC_ 3 \nPositive:  PABPC1, RPS18, RPL13, RPL10, RPS6 \nNegative:  GNLY, IGKC, GZMB, CCL5, NKG7 \nPC_ 4 \nPositive:  CCL4, CCL3, CCL4L2, CCL2, CCL8 \nNegative:  FTL, TIMP1, GNLY, HLA-DRA, VMO1 \nPC_ 5 \nPositive:  CCL4, CCL3, CCL4L2, TIMP1, VMO1 \nNegative:  CCL2, CCL7, CCL8, IGKC, GNLY \nPC_ 6 \nPositive:  FTL, CXCL8, CCL4L2, CXCL3, S100A8 \nNegative:  CXCL10, CCL8, ISG15, IGLC2, APOBEC3A \nPC_ 7 \nPositive:  IGKC, CXCL10, VMO1, TIMP1, FCGR3A \nNegative:  IGLC2, IGLC3, IGHM, CD74, HLA-DRA \nPC_ 8 \nPositive:  HBB, HBA2, HBA1, SNCA, HBG2 \nNegative:  IGLC2, PPBP, HLA-DRA, CD74, IGLC3 \nPC_ 9 \nPositive:  PPBP, PF4, GNG11, CAVIN2, TUBB1 \nNegative:  GNLY, FTL, TXN, RPL10, RPL3 \nPC_ 10 \nPositive:  TXN, HSPB1, HSPA1A, HSPA1B, HLA-DRA \nNegative:  IGLC2, TIMP1, VMO1, PPBP, IGHM \n```\n:::\n:::\n\n\n## 通过肘图（elbow plot）判断需要包括的主成分\n\nThe **elbow plot** is another helpful way to determine how many PCs to use for clustering so that we are capturing majority of the variation in the data. The elbow plot visualizes the standard deviation of each PC, and we are looking for where the standard deviations begins to plateau. Essentially, **where the elbow appears is usually the threshold for identifying the majority of the variation**. However, this method can be quite subjective.\n\nLet's draw an elbow plot using the top 40 PCs:\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-4_98e54b201aa2c7ed7f67893310dbf0cf'}\n\n```{.r .cell-code}\n# Plot the elbow plot\nElbowPlot(object = seurat_integrated, \n          ndims = 40)\n```\n\n::: {.cell-output-display}\n![](07_SC_clustering_cells_SCT_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\nBased on this plot, we could roughly determine the majority of the variation by where the elbow occurs around PC8 - PC10, or one could argue that it should be when the data points start to get close to the X-axis, PC30 or so. This gives us a very rough idea of the number of PCs needed to be included, we can extract the information visualized here in a [**more quantitative manner**](https://hbctraining.github.io/scRNA-seq_online/lessons/elbow_plot_metric.html), which may be a bit more reliable.\n\nWhile the above 2 methods were used a lot more with older methods from Seurat for normalization and identification of variable genes, they are no longer as important as they used to be. This is because the **SCTransform method is more accurate than older methods，基于`SCTransform`的标准化流程中不再需要判断纳入的主成分数量，可以纳入更多的主成分（**见[Seurat-基于SCTransform的单细胞数据标准化](/single_cell/seurat/sctransform.qmd#sec-clustering)**）**.\n\n::: callout-note\n###### Why is selection of PCs more important for older methods?\n\nThe older methods incorporated some technical sources of variation into some of the higher PCs, so selection of PCs was more important. `SCTransform` estimates the variance better and does not frequently include these sources of technical variation in the higher PCs.\n\nIn theory, with `SCTransform`, **the more PCs we choose the more variation is accounted for when performing the clustering**, but it takes a lot longer to perform the clustering. Therefore for this analysis, we will use the **first 40 PCs** to generate the clusters.\n:::\n\n# 聚类（Cluster the cells）\n\nSeurat uses a graph-based clustering approach using a K-nearest neighbor approach, and then attempts to partition this graph into highly interconnected 'quasi-cliques' or 'communities' （见[Seurat-细胞聚类](/single_cell/seurat/seurat_tutorial.qmd#sec-clustering_seurat)）. A nice in-depth description of clustering methods is provided in the [SVI Bioinformatics and Cellular Genomics Lab course](https://biocellgen-public.svi.edu.au/mig_2019_scrnaseq-workshop/clustering-and-cell-annotation.html).\n\n## Find neighbors\n\nThe first step is to **construct a K-nearest neighbor (KNN) graph** based on the euclidean distance in PCA space.\n\n![](images/k-means.png)\n\n> *Image source: [Analysis of Single cell RNA-seq data](https://biocellgen-public.svi.edu.au/mig_2019_scrnaseq-workshop/clustering-and-cell-annotation.html)*\n\n-   Edges are drawn between cells with similar features expression patterns.\n-   Edge weights are refined between any two cells based on shared overlap in their local neighborhoods.\n\nThis is done in Seurat by using the `FindNeighbors()` function（这里不需要运行，因为在上一节中我们已经在整合后运行了`FindNeighbors`）:\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-5_29922ded07eba3582c436037118a8927'}\n\n```{.r .cell-code}\n# Determine the K-nearest neighbor graph（不需运行）\nseurat_integrated <- FindNeighbors(seurat_integrated, \n                                   dims = 1:40, \n                                   reduction = \"integrated.cca\")\n```\n:::\n\n\n## Find clusters\n\nNext, Seurat will **iteratively group cells together with the goal of optimizing the standard modularity function**.\n\nWe will use the `FindClusters()` function to perform the graph-based clustering. The `resolution` is an important argument that sets the \"granularity\" of the downstream clustering and will need to be optimized for every individual experiment. **For datasets of 3,000 - 5,000 cells, the `resolution` set between `0.4`-`1.4` generally yields good clustering**. Increased resolution values lead to a greater number of clusters, which is often required for larger datasets.\n\nThe `FindClusters()` function allows us to enter a series of resolutions and will calculate the \"granularity\" of the clustering. This is very helpful for testing which resolution works for moving forward without having to run the function for each resolution.\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-6_4b78cfadf11faa26d6e6f31623123343'}\n\n```{.r .cell-code}\n# Determine the clusters for various resolutions                                \nseurat_integrated <- FindClusters(object = seurat_integrated,\n                                  resolution = c(0.4, 0.6, 0.8, 1.0, 1.4))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9211\nNumber of communities: 14\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.9019\nNumber of communities: 17\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8864\nNumber of communities: 22\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8727\nNumber of communities: 26\nElapsed time: 4 seconds\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 29629\nNumber of edges: 1128935\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8511\nNumber of communities: 28\nElapsed time: 4 seconds\n```\n:::\n:::\n\n\n# Visualize clusters of cells {#sec-visualize-clusters-of-cells}\n\nTo visualize the cell clusters, there are a few different dimensionality reduction techniques that can be helpful. The most popular methods include [t-distributed stochastic neighbor embedding (t-SNE)](https://kb.10xgenomics.com/hc/en-us/articles/217265066-What-is-t-Distributed-Stochastic-Neighbor-Embedding-t-SNE-) and [Uniform Manifold Approximation and Projection (UMAP)](https://umap-learn.readthedocs.io/en/latest/index.html) techniques.\n\nBoth methods aim to place cells with similar local neighborhoods in high-dimensional space together in low-dimensional space. These methods will require you to input number of PCA dimentions to use for the visualization, we suggest using the same number of PCs as input to the clustering analysis. Here, we will proceed with the [UMAP method](https://umap-learn.readthedocs.io/en/latest/how_umap_works.html) for visualizing the clusters.\n\nWe can only visualize the results of one resolution setting at a time. If we look at the metadata of our Seurat object(`seurat_integrated@meta.data`), you should observe a separate column for each of the different resolutions calculated.\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-7_629fa3fcbdf3fd1b57afe28d9de067b9'}\n\n```{.r .cell-code}\n# Explore resolutions\nhead(seurat_integrated@meta.data, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA sample\nctrl_AAACATACAATGCC-1          1       2344          874   ctrl\nctrl_AAACATACATTTCC-1          1       3125          896   ctrl\nctrl_AAACATACCAGAAA-1          1       2578          725   ctrl\nctrl_AAACATACCAGCTA-1          1       3261          979   ctrl\nctrl_AAACATACCATGCA-1          1        746          362   ctrl\n                      log10GenesPerUMI  mitoRatio                 cells\nctrl_AAACATACAATGCC-1        0.8728630 0.01962457 ctrl_AAACATACAATGCC-1\nctrl_AAACATACATTTCC-1        0.8447596 0.01792000 ctrl_AAACATACATTTCC-1\nctrl_AAACATACCAGAAA-1        0.8384933 0.01551590 ctrl_AAACATACCAGAAA-1\nctrl_AAACATACCAGCTA-1        0.8512622 0.01379945 ctrl_AAACATACCAGCTA-1\nctrl_AAACATACCATGCA-1        0.8906861 0.02144772 ctrl_AAACATACCATGCA-1\n                      nCount_SCT nFeature_SCT      S.Score    G2M.Score Phase\nctrl_AAACATACAATGCC-1       1598          864  0.010526369  0.011803814   G2M\nctrl_AAACATACATTTCC-1       1575          735  0.010251663  0.015119823   G2M\nctrl_AAACATACCAGAAA-1       1563          671 -0.019803499 -0.015779795    G1\nctrl_AAACATACCAGCTA-1       1587          775 -0.032093208  0.013380044   G2M\nctrl_AAACATACCATGCA-1       1086          374  0.008301833 -0.008402066     S\n                           mitoFr unintegrated_clusters seurat_clusters\nctrl_AAACATACAATGCC-1      Medium                     4               4\nctrl_AAACATACATTTCC-1      Medium                     0               9\nctrl_AAACATACCAGAAA-1      Medium                    14              18\nctrl_AAACATACCAGCTA-1         Low                     1               6\nctrl_AAACATACCATGCA-1 Medium high                    16              14\n                      integrated_clusters SCT_snn_res.0.4 SCT_snn_res.0.6\nctrl_AAACATACAATGCC-1                   5               0               0\nctrl_AAACATACATTTCC-1                   0               2               1\nctrl_AAACATACCAGAAA-1                  14               4               5\nctrl_AAACATACCAGCTA-1                   6               4               5\nctrl_AAACATACCATGCA-1                  12               5               6\n                      SCT_snn_res.0.8 SCT_snn_res.1 SCT_snn_res.1.4\nctrl_AAACATACAATGCC-1               5             2               4\nctrl_AAACATACATTTCC-1               0             0               9\nctrl_AAACATACCAGAAA-1              14            17              18\nctrl_AAACATACCAGCTA-1               6             8               6\nctrl_AAACATACCATGCA-1              12            14              14\n```\n:::\n:::\n\n\nTo **choose a resolution to start with**, we often pick something in the middle of the range like 0.6 or 0.8. We will start with a resolution of 0.8 by assigning the identity of the clusters using the `Idents()` function.\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-8_b49086a6a8f98b441734d561351349d1'}\n\n```{.r .cell-code}\n# Assign identity of clusters\nIdents(seurat_integrated) <- \"SCT_snn_res.0.8\"\n```\n:::\n\n\nNow, we can plot the UMAP to look at how cells cluster together at a resolution of 0.8:\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-9_1ffbc7fdafa03a98f39a4905a443d4fa'}\n\n```{.r .cell-code}\n# Calculation of UMAP\n# DO NOT RUN (calculated in the last lesson)\nseurat_integrated <- RunUMAP(seurat_integrated, \n                             dims = 1:40,\n                             reduction = \"integrated.cca\", # 更改降维来源为整合后的\"integrated.cca\"\n                             reduction.name = \"umap.integrated\") \n```\n:::\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-10_f150ba8cb819b5430d75af37006ef39b'}\n\n```{.r .cell-code}\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap.integrated\",\n        label = FALSE,\n        label.size = 6)\n```\n\n::: {.cell-output-display}\n![](07_SC_clustering_cells_SCT_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n:::\n\n\nIt can be useful to **explore other resolutions as well**. It will give you a quick idea about how the clusters would change based on the resolution parameter. For example, let's switch to a resolution of 0.4:\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-11_9898c7615ce27ac5fbb62c68038a2104'}\n\n```{.r .cell-code}\n# Assign identity of clusters\nIdents(object = seurat_integrated) <- \"SCT_snn_res.0.4\"\n\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap.integrated\",\n        label = FALSE,\n        label.size = 6)\n```\n\n::: {.cell-output-display}\n![](07_SC_clustering_cells_SCT_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n:::\n\n\n## 载入案例数据 {#sec-Load_case_data}\n\n**How does your UMAP plot compare to the one above?**\n\nIt is possible that there is some variability in the way your clusters look compared to the image in this lesson. In particular **you may see a difference in the labeling of clusters**. This is an unfortunate consequence of slight variations in the versions of packages (mostly Seurat dependencies).\n\n**If your clusters look identical to what's in the lesson, please go ahead to the next section.**\n\n------------------------------------------------------------------------\n\n**If your clusters do look different from what we have in the lesson**, please follow the instructions provided below.\n\nInside your `data` folder you will see a folder called `additional_data`. It contains the seurat_integrated object that we have created for the class. Let's load in the object to your R session and overwrite the existing one:\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-12_798847d4073611d4efb29cd9ba67155e'}\n\n```{.r .cell-code}\nload(bzfile(\"data/scRNA-seq_online/additional_data/seurat_integrated.RData.bz2\"))\nseurat_integrated\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n31130 features across 29629 samples within 3 assays \nActive assay: integrated (3000 features, 3000 variable features)\n 2 layers present: data, scale.data\n 2 other assays present: RNA, SCT\n 2 dimensional reductions calculated: pca, umap\n```\n:::\n\n```{.r .cell-code}\nhead(seurat_integrated, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA\nctrl_AAACATACAATGCC-1       ctrl       2344          874\nctrl_AAACATACATTTCC-1       ctrl       3124          895\nctrl_AAACATACCAGAAA-1       ctrl       2578          725\nctrl_AAACATACCAGCTA-1       ctrl       3260          978\nctrl_AAACATACCATGCA-1       ctrl        746          362\n                                      seq_folder nUMI nGene log10GenesPerUMI\nctrl_AAACATACAATGCC-1 ctrl_raw_feature_bc_matrix 2344   874        0.8728630\nctrl_AAACATACATTTCC-1 ctrl_raw_feature_bc_matrix 3125   896        0.8447596\nctrl_AAACATACCAGAAA-1 ctrl_raw_feature_bc_matrix 2578   725        0.8384933\nctrl_AAACATACCAGCTA-1 ctrl_raw_feature_bc_matrix 3261   979        0.8512622\nctrl_AAACATACCATGCA-1 ctrl_raw_feature_bc_matrix  746   362        0.8906861\n                       mitoRatio                 cells sample     S.Score\nctrl_AAACATACAATGCC-1 0.01962457 ctrl_AAACATACAATGCC-1   ctrl  0.04330502\nctrl_AAACATACATTTCC-1 0.01792000 ctrl_AAACATACATTTCC-1   ctrl  0.02661900\nctrl_AAACATACCAGAAA-1 0.01551590 ctrl_AAACATACCAGAAA-1   ctrl -0.04670650\nctrl_AAACATACCAGCTA-1 0.01379945 ctrl_AAACATACCAGCTA-1   ctrl -0.05832833\nctrl_AAACATACCATGCA-1 0.02144772 ctrl_AAACATACCATGCA-1   ctrl  0.03929605\n                        G2M.Score Phase      mitoFr nCount_SCT nFeature_SCT\nctrl_AAACATACAATGCC-1  0.05422631   G2M      Medium       1572          829\nctrl_AAACATACATTTCC-1  0.05159679   G2M      Medium       1572          718\nctrl_AAACATACCAGAAA-1 -0.04841661    G1      Medium       1553          648\nctrl_AAACATACCAGCTA-1  0.05045960   G2M         Low       1576          756\nctrl_AAACATACCATGCA-1 -0.02995512     S Medium high       1075          363\n                      integrated_snn_res.0.4 integrated_snn_res.0.6\nctrl_AAACATACAATGCC-1                      2                      1\nctrl_AAACATACATTTCC-1                      0                      2\nctrl_AAACATACCAGAAA-1                      0                      3\nctrl_AAACATACCAGCTA-1                      0                      3\nctrl_AAACATACCATGCA-1                      5                      6\n                      integrated_snn_res.0.8 integrated_snn_res.1\nctrl_AAACATACAATGCC-1                      2                    2\nctrl_AAACATACATTTCC-1                      1                    0\nctrl_AAACATACCAGAAA-1                      3                   15\nctrl_AAACATACCAGCTA-1                      3                    3\nctrl_AAACATACCATGCA-1                      4                   12\n                      integrated_snn_res.1.4 seurat_clusters\nctrl_AAACATACAATGCC-1                      5               5\nctrl_AAACATACATTTCC-1                      0               0\nctrl_AAACATACCAGAAA-1                     19              19\nctrl_AAACATACCAGCTA-1                      3               3\nctrl_AAACATACCATGCA-1                     13              13\n```\n:::\n:::\n\n\n![](images/截屏2023-12-26%2009.51.32.png)\n\n::: callout-warning\n由于这里的案例数据是基于Seurat V5之前的版本创建的，所以数据结构和基于Seurat V5的结果有所差异。比较重要的区别是，这里的Seurat对象的没有layer结构；同时有一个“integrated” assay，用于存放整合后的信息，其类型仍属于SCT assay。而一个典型的经过SCTransform和整合的Seurat V5对象如下图所示（来自[Seurat-整合](/single_cell/seurat/integration.qmd#sec-integration_after_sct)）：\n\n![](images/截屏2023-12-26%2009.59.44.png)\n\n可以看到没有“integrated” assay，因此，为了和最新的Seurat V5流程保持一致，我们后续把本案例中的“integrated” assay看作整合后的Seurat V5的“SCT” assay。\n:::\n\n------------------------------------------------------------------------\n\n## 再次检查不同分辨率下的细胞分群情况\n\nAfter loading `seurat_integrated.RData.bz2`, we now re-check the object clusters with different resolution (0.4, 0.6, 0.8, 1.0, 1.4).\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-13_c762bb37c33cdb24efb12324b06a1a6e'}\n\n```{.r .cell-code}\n# 查看不同分辨率下的细胞分群情况\napply(seurat_integrated@meta.data[ ,grep(\"integrated_snn_res.\", \n                                         colnames(seurat_integrated@meta.data))], \n      2, \n      table)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$integrated_snn_res.0.4\n\n   0    1   10   11   12    2    3    4    5    6    7    8    9 \n6715 5899  456  280  124 3661 2680 2377 2166 2143 1217 1177  734 \n\n$integrated_snn_res.0.6\n\n   0    1   10   11   12   13   14    2    3    4    5    6    7    8    9 \n5443 3667 1176  467  464  288  124 3403 3306 2631 2382 2137 1679 1249 1213 \n\n$integrated_snn_res.0.8\n\n   0    1   10   11   12   13   14   15   16    2    3    4    5    6    7    8 \n4220 3718 1208 1174  858  468  459  289  124 3649 3004 2164 1959 1810 1646 1504 \n   9 \n1375 \n\n$integrated_snn_res.1\n\n   0    1   10   11   12   13   14   15   16   17   18   19    2   20   21    3 \n3392 3269 1158 1152  952  876  873  650  520  462  282  176 3041  124   23 2668 \n   4    5    6    7    8    9 \n2508 1881 1643 1509 1261 1209 \n\n$integrated_snn_res.1.4\n\n   0    1   10   11   12   13   14   15   16   17   18   19    2   20   21   22 \n2886 2497 1211 1174  874  838  832  802  766  657  655  629 2130  468  459  357 \n  23   24   25   26    3    4    5    6    7    8    9 \n 292  175  124   23 2011 1884 1827 1646 1587 1489 1336 \n```\n:::\n:::\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-14_2725004beba594bdcc1359a08515a9a7'}\n\n```{.r .cell-code}\n# 批量绘制不同分辨率下的UMAP图\nlibrary(ggplot2)\nlibrary(patchwork)\nlapply(grep(\"integrated_snn_res.\",\n            colnames(seurat_integrated@meta.data), \n            value = TRUE),\n       function(res) {\n         Idents(seurat_integrated) <-  res\n         DimPlot(seurat_integrated,\n                 reduction = \"umap\",\n                 label = FALSE,\n                 label.size = 4) +\n           ggtitle(res) +\n           theme_bw()\n         }) |>\n  wrap_plots(ncol = 2)\n```\n\n::: {.cell-output-display}\n![](07_SC_clustering_cells_SCT_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\nWe will now continue with the 0.8 resolution to check the quality control metrics and known markers for the anticipated cell types.\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-15_6001d037653f3506ba66a5e10114d6c0'}\n\n```{.r .cell-code}\n# Assign identity of clusters\nIdents(seurat_integrated) <- \"integrated_snn_res.0.8\"\n\n# Plot the UMAP\nDimPlot(seurat_integrated,\n        reduction = \"umap\",\n        label = TRUE,\n        label.size = 6)\n```\n\n::: {.cell-output-display}\n![](07_SC_clustering_cells_SCT_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-16_e07cf4c8f705dd7776e5cafe5279baa9'}\n\n```{.r .cell-code}\nsaveRDS(seurat_integrated, file = \"output/scRNA-seq_online/seurat_clustered.rds\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell hash='07_SC_clustering_cells_SCT_cache/html/unnamed-chunk-17_b10fec7e7eb3bd05b1b65a852904a295'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] patchwork_1.2.0    ggplot2_3.4.4      Seurat_5.0.1       SeuratObject_5.0.1\n[5] sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-2           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.21      \n  [7] spatstat.geom_3.2-7    matrixStats_1.2.0      ggridges_0.5.5        \n [10] compiler_4.3.2         png_0.1-8              vctrs_0.6.5           \n [13] reshape2_1.4.4         stringr_1.5.1          pkgconfig_2.0.3       \n [16] fastmap_1.1.1          ellipsis_0.3.2         labeling_0.4.3        \n [19] utf8_1.2.4             promises_1.2.1         rmarkdown_2.25        \n [22] purrr_1.0.2            xfun_0.41              jsonlite_1.8.8        \n [25] goftest_1.2-3          later_1.3.2            spatstat.utils_3.0-4  \n [28] irlba_2.3.5.1          parallel_4.3.2         cluster_2.1.6         \n [31] R6_2.5.1               ica_1.0-3              stringi_1.8.3         \n [34] RColorBrewer_1.1-3     spatstat.data_3.0-4    reticulate_1.34.0     \n [37] parallelly_1.36.0      lmtest_0.9-40          scattermore_1.2       \n [40] Rcpp_1.0.12            knitr_1.45             tensor_1.5            \n [43] future.apply_1.11.1    zoo_1.8-12             sctransform_0.4.1     \n [46] httpuv_1.6.13          Matrix_1.6-5           splines_4.3.2         \n [49] igraph_1.6.0           tidyselect_1.2.0       abind_1.4-5           \n [52] rstudioapi_0.15.0      yaml_2.3.8             spatstat.random_3.2-2 \n [55] codetools_0.2-19       miniUI_0.1.1.1         spatstat.explore_3.2-5\n [58] listenv_0.9.0          lattice_0.22-5         tibble_3.2.1          \n [61] plyr_1.8.9             withr_3.0.0            shiny_1.8.0           \n [64] ROCR_1.0-11            evaluate_0.23          Rtsne_0.17            \n [67] future_1.33.1          fastDummies_1.7.3      survival_3.5-7        \n [70] polyclip_1.10-6        fitdistrplus_1.1-11    pillar_1.9.0          \n [73] KernSmooth_2.23-22     plotly_4.10.4          generics_0.1.3        \n [76] RcppHNSW_0.5.0         munsell_0.5.0          scales_1.3.0          \n [79] globals_0.16.2         xtable_1.8-4           glue_1.7.0            \n [82] lazyeval_0.2.2         tools_4.3.2            data.table_1.14.10    \n [85] RSpectra_0.16-1        RANN_2.6.1             leiden_0.4.3.1        \n [88] dotCall64_1.1-1        cowplot_1.1.2          grid_4.3.2            \n [91] tidyr_1.3.0            colorspace_2.1-0       nlme_3.1-164          \n [94] cli_3.6.2              spatstat.sparse_3.0-3  spam_2.10-0           \n [97] fansi_1.0.6            viridisLite_0.4.2      dplyr_1.1.4           \n[100] uwot_0.1.16            gtable_0.3.4           digest_0.6.34         \n[103] progressr_0.14.0       ggrepel_0.9.5          farver_2.1.1          \n[106] htmlwidgets_1.6.4      htmltools_0.5.7        lifecycle_1.0.4       \n[109] httr_1.4.7             mime_0.12              MASS_7.3-60.0.1       \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
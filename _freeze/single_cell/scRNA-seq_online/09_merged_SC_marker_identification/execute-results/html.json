{
  "hash": "bda33bd98651caf1ba904885fb165891",
  "result": {
    "markdown": "# 寻找marker基因+细胞注释\n\n::: callout-note\n###### Learning Objectives:\n\n-   Describe how to determine markers of individual clusters\n-   Discuss the iterative processes of clustering and marker identification\n:::\n\nNow that we have identified our desired clusters, we can move on to marker identification, which will allow us to **verify the identity of certain clusters** and help surmise the identity of any unknown clusters.\n\n![](images/sc_workflow_2022-01.jpg){width=\"545\"}\n\n------------------------------------------------------------------------\n\n**Goals:**\n\n-   To **determine the gene markers** for each of the clusters\n-   To **identify cell types** of each cluster using markers\n-   To determine whether there's a need to **re-cluster based on cell type markers**, perhaps clusters need to be merged or split\n\n**Challenges:**\n\n-   Over-interpretation of the results\n-   Combining different types of marker identification\n\n**Recommendations:**\n\n-   Think of the results as hypotheses that need verification. Inflated p-values can lead to over-interpretation of results (essentially each cell is used as a replicate). Top markers are most trustworthy.\n-   Identify all markers conserved between conditions for each cluster\n-   Identify markers that are differentially expressed between specific clusters\n\n------------------------------------------------------------------------\n\n## 数据导入\n\n载入 @sec-cluster_qc 中完成细胞分群质量评估的数据`seurat_clustered_qc`。\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-1_3d7bc534bb72b76b6ab4a9ef62237b62'}\n\n```{.r .cell-code}\nlibrary(Seurat)\nseurat_clustered_qc <- readRDS(\"output/scRNA-seq_online/seurat_clustered_qc.rds\")\nseurat_clustered_qc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n31130 features across 29629 samples within 3 assays \nActive assay: RNA (14065 features, 0 variable features)\n 2 layers present: counts, data\n 2 other assays present: SCT, integrated\n 2 dimensional reductions calculated: pca, umap\n```\n:::\n\n```{.r .cell-code}\nhead(seurat_clustered_qc, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA\nctrl_AAACATACAATGCC-1       ctrl       2344          874\nctrl_AAACATACATTTCC-1       ctrl       3124          895\nctrl_AAACATACCAGAAA-1       ctrl       2578          725\n                                      seq_folder nUMI nGene log10GenesPerUMI\nctrl_AAACATACAATGCC-1 ctrl_raw_feature_bc_matrix 2344   874        0.8728630\nctrl_AAACATACATTTCC-1 ctrl_raw_feature_bc_matrix 3125   896        0.8447596\nctrl_AAACATACCAGAAA-1 ctrl_raw_feature_bc_matrix 2578   725        0.8384933\n                       mitoRatio                 cells sample     S.Score\nctrl_AAACATACAATGCC-1 0.01962457 ctrl_AAACATACAATGCC-1   ctrl  0.04330502\nctrl_AAACATACATTTCC-1 0.01792000 ctrl_AAACATACATTTCC-1   ctrl  0.02661900\nctrl_AAACATACCAGAAA-1 0.01551590 ctrl_AAACATACCAGAAA-1   ctrl -0.04670650\n                        G2M.Score Phase mitoFr nCount_SCT nFeature_SCT\nctrl_AAACATACAATGCC-1  0.05422631   G2M Medium       1572          829\nctrl_AAACATACATTTCC-1  0.05159679   G2M Medium       1572          718\nctrl_AAACATACCAGAAA-1 -0.04841661    G1 Medium       1553          648\n                      integrated_snn_res.0.4 integrated_snn_res.0.6\nctrl_AAACATACAATGCC-1                      2                      1\nctrl_AAACATACATTTCC-1                      0                      2\nctrl_AAACATACCAGAAA-1                      0                      3\n                      integrated_snn_res.0.8 integrated_snn_res.1\nctrl_AAACATACAATGCC-1                      2                    2\nctrl_AAACATACATTTCC-1                      1                    0\nctrl_AAACATACCAGAAA-1                      3                   15\n                      integrated_snn_res.1.4 seurat_clusters\nctrl_AAACATACAATGCC-1                      5               5\nctrl_AAACATACATTTCC-1                      0               0\nctrl_AAACATACCAGAAA-1                     19              19\n```\n:::\n:::\n\n\nBefore we start our marker identification we will explicitly set our default assay, we want to use the **normalized data, but not the integrated data**.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-2_93666f32bbd6c706505123f8bad301ad'}\n\n```{.r .cell-code}\nDefaultAssay(seurat_clustered_qc) <- \"RNA\"\n```\n:::\n\n\n::: callout-important\n[原教程](https://hbctraining.github.io/scRNA-seq_online/lessons/09_merged_SC_marker_identification.html)将默认的assay设置为了\"RNA\"，其解释如下：The default assay should have already been `RNA`, because we set it up in the previous clustering quality control lesson ( @sec-explore_known_markers ). But we encourage you to run this line of code above to be absolutely sure in case the active slot was changed somewhere upstream in your analysis. Note that the raw and normalized counts are stored in the `counts` and `data` slots of `RNA` assay. By default, the functions for finding markers will use normalized data. （关于`FindMarkers`为什么要使用\"RNA\" assay的更多解释，参阅[此链接](https://github.com/hbctraining/scRNA-seq_online/issues/58)）\n\n而在Seurat V5的官方教程中（ @sec-findmarkers_function ），对于经过`SCTransform`归一化处理后的单细胞数据，在进行`FindMarkers`差异分析之前，需要先运行`seurat_clustered_qc <- PrepSCTFindMarkers(seurat_clustered_qc)`，来预处理SCT assay。详细解释见[此链接](https://www.jianshu.com/p/fb2e43905559)。\n\n如果是基于`NormalizeData`标准化的单细胞数据，和这里一样，需要使用\"RNA\" assay进行差异分析，如果不是，需要通过`DefaultAssay(seurat_clustered_qc) <- \"RNA\"`进行设定。\n\n这里为了和原教程保持一致，默认的将assay设置为\"RNA\"。\n:::\n\nOur clustering analysis resulted in the following clusters:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-3_fd9c976be0abe58a929675600e7de2e4'}\n\n```{.r .cell-code}\nDimPlot(seurat_clustered_qc, label = TRUE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\nRemember that we had the following questions from the clustering analysis（ @sec-Preliminary_cell_type_identification_results ）:\n\n> 1.  Do the clusters corresponding to the same cell types have biologically meaningful differences? Are there subpopulations of these cell types?\n>\n> 2.  Can we acquire higher confidence in these cell type identities by identifying other marker genes for these clusters?\n\nThere are a few different types of marker identification that we can explore using Seurat to get to the answer of these questions. Each with their own benefits and drawbacks:\n\n1.  **Identification of all markers for each cluster**\n\n    This analysis compares each cluster against all others and outputs the genes that are differentially expressed/present.\n\n    -   *Useful for identifying **unknown clusters** and i**mproving confidence** in hypothesized cell types.*\n\n2.  **Identification of conserved markers for each cluster**\n\n    This analysis looks for genes that are differentially expressed/present within each condition first, and then reports those **genes that are conserved in the cluster across all conditions**. These genes can help to figure out the identity for the cluster.\n\n    -   *Useful with **more than one condition** to identify cell type markers that are conserved across conditions.*\n\n3.  **Marker identification between specific clusters**\n\n    This analysis explores differentially expressed genes between specific clusters.\n\n    -   *Useful for determining differences in gene expression between clusters that appear to be representing the same celltype (i.e with markers that are similar) from the above analyses.*\n\n------------------------------------------------------------------------\n\n## `FindAllMarkers`-Identification of all markers for each cluster\n\nThis type of analysis is typically recommended for when **evaluating a single sample group/condition**. With the `FindAllMarkers()` function we are comparing each cluster against all other clusters to identify potential marker genes. The cells in each cluster are treated as replicates, and essentially a **differential expression analysis** is performed with some statistical test.\n\n::: callout-tip\nThe default is a **Wilcoxon Rank Sum test**, but there are other options available.\n:::\n\n![](images/marker_ident_function1.png){width=\"398\"}\n\nThe `FindAllMarkers()` function has **three important arguments** which provide thresholds for determining whether a gene is a marker:\n\n-   `logfc.threshold`: minimum log2 fold change for average expression of gene in cluster relative to the average expression in all other clusters combined. Default is **0.25**.\n    -   **Cons:**\n        -   could miss those cell **markers that are expressed in a small fraction of cells** within the cluster of interest, but not in the other clusters, if the average logfc doesn't meet the threshold\n        -   could return a lot of metabolic/ribosomal genes due to slight differences in metabolic output by different cell types, which are not as useful to distinguish cell type identities\n-   `min.diff.pct`: minimum percent difference between the percent of cells expressing the gene in the cluster and the percent of cells expressing gene in all other clusters combined.\n    -   **Cons:** could miss those cell markers that are expressed in all cells, but are highly up-regulated in this specific cell type\n-   `min.pct`: only test genes that are detected in a minimum fraction of cells in either of the two populations. Meant to speed up the function by not testing genes that are very infrequently expressed. Default is 0.1.\n    -   **Cons:** if set to a very high value could incur many false negatives due to the fact that not all genes are detected in all cells (even if it is expressed)\n\nYou could use any combination of these arguments depending on how stringent/lenient you want to be. Also, by default this function will return to you genes that exhibit both positive and negative expression changes. Typically, we add an argument `only.pos` to opt for keeping only the positive changes. The code to find markers for each cluster is shown below.\n\n::: callout-important\nIn Seurat v5, we use the **`presto`** package (as described [here](https://www.biorxiv.org/content/10.1101/653253v1) and available for installation [here](https://github.com/immunogenomics/presto)), to dramatically improve the speed of DE analysis, particularly for large datasets ( @sec-findmarkers_function ). 因此，需要先安装`presto`包：\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-4_4d4f8ca01666f2d172b2d18ee104dd1a'}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\n# install.packages(\"devtools\")\ndevtools::install_github(\"immunogenomics/presto\")\n```\n````\n:::\n\n:::\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-5_58d26009456eb1e14ac53709b144d816'}\n\n```{.r .cell-code}\n# Find markers for every cluster compared to all remaining cells, report only the positive ones\nmarkers <- FindAllMarkers(object = seurat_clustered_qc, \n                          only.pos = TRUE,\n                          logfc.threshold = 0.25) \nhead(markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       p_val avg_log2FC pct.1 pct.2 p_val_adj cluster   gene\nCCR7       0   1.494342 0.885 0.399         0       0   CCR7\nSELL       0   1.847509 0.726 0.277         0       0   SELL\nGIMAP7     0   1.482245 0.872 0.443         0       0 GIMAP7\nLTB        0   1.561875 0.735 0.311         0       0    LTB\nLDHB       0   1.569828 0.733 0.330         0       0   LDHB\nTRAC       0   1.285588 0.746 0.356         0       0   TRAC\n```\n:::\n\n```{.r .cell-code}\ntail(markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n               p_val avg_log2FC pct.1 pct.2 p_val_adj cluster    gene\nDNAJC213 0.009747737  0.5018165 0.056 0.022         1      16 DNAJC21\nPOGK     0.009763789  1.4868037 0.032 0.010         1      16    POGK\nZNF5443  0.009781767  0.6873261 0.024 0.006         1      16  ZNF544\nMRPS313  0.009912914  0.4306063 0.105 0.051         1      16  MRPS31\nUCKL11   0.009958018  0.5284076 0.040 0.013         1      16   UCKL1\nQTRT22   0.009998863  0.3087035 0.056 0.022         1      16   QTRT2\n```\n:::\n:::\n\n\nThe results data frame has the following columns :\n\n-   `p_val` : p-value (unadjusted)\n\n-   `avg_log2FC` : log fold-change of the average expression between the two groups. Positive values indicate that the feature is more highly expressed in the first group.\n\n-   `pct.1` : The percentage of cells where the feature is detected in the first group\n\n-   `pct.2` : The percentage of cells where the feature is detected in the second group\n\n-   `p_val_adj` : Adjusted p-value, based on **Bonferroni correction** using all features in the dataset.\n\n获取每个cluster的前10个marker基因 ( 详细解释见下面的 @sec-top_conserved_markers ):\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-6_2ad3bad2f901ab2e4e718d8a781c566a'}\n\n```{.r .cell-code}\nlibrary(dplyr)\n# 获取每个cluster的前10个marker基因\ntop_markers <- markers |>\n  group_by(cluster) |> \n  slice_max(n = 10, order_by = avg_log2FC)\n```\n:::\n\n\n## `FindConservedMarkers`-Identification of conserved markers in all conditions\n\nSince we have samples representing different conditions in our dataset, **our best option is to find conserved markers**. This function internally **separates out cells by sample group/condition**, and then performs differential gene expression testing for a single specified cluster against all other clusters (or a second cluster, if specified). Gene-level p-values are computed for each condition and then combined across groups using meta-analysis methods from the MetaDE R package.\n\n![](images/marker_ident_function2.png){width=\"360\"}\n\n### 寻找cluster 0和cluster 10的conserved markers\n\n我们首先通过寻找cluster 0和cluster 10的conserved markers来初步学习`FindConservedMarkers`函数的用法。\n\nfor `FindConservedMarkers`, you will recognize some of the arguments we described previously for the `FindAllMarkers()` function; this is because internally it is using that function to first find markers within each group. Here, we list some additional arguments which provide for when using `FindConservedMarkers()`:\n\n-   `ident.1`: this function only evaluates one cluster at a time; here you would specify the cluster of interest.\n-   `grouping.var`: the variable (column header) in your metadata which specifies the separation of cells into groups\n\n`FindConservedMarkers`函数会调用`metap`包，`metap`包需要`multtest`包，所以需要先安装这两个依赖包：\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-7_e88e0aef433b0bebb747a2c266bb6756'}\n\n```{.r .cell-code}\nBiocManager::install('multtest')\ninstall.packages('metap')\n```\n:::\n\n\n#### 寻找cluster 0的conserved markers\n\nFor our analysis we will be fairly lenient and **use only the log fold change threshold greater than 0.25**. We will also specify to return only the positive markers for each cluster.\n\nLet's **test it out on cluster 0** to see how it works:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-8_15837dd4149c3d7f056e793913580801'}\n\n```{.r .cell-code}\ncluster0_conserved_markers <- FindConservedMarkers(seurat_clustered_qc,\n                                                   ident.1 = 0,\n                                                   grouping.var = \"sample\",\n                                                   only.pos = TRUE,\n                                                   logfc.threshold = 0.25)\nhead(cluster0_conserved_markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n       stim_p_val stim_avg_log2FC stim_pct.1 stim_pct.2 stim_p_val_adj\nCCR7            0        1.481347      0.927      0.430              0\nSELL            0        1.724888      0.832      0.370              0\nLDHB            0        1.720061      0.732      0.304              0\nGIMAP7          0        1.463588      0.934      0.507              0\nLTB             0        1.538317      0.702      0.295              0\nRPL10A          0        1.216299      0.966      0.664              0\n          ctrl_p_val ctrl_avg_log2FC ctrl_pct.1 ctrl_pct.2 ctrl_p_val_adj\nCCR7    0.000000e+00       1.4694462      0.839      0.368   0.000000e+00\nSELL    0.000000e+00       2.0273581      0.610      0.186   0.000000e+00\nLDHB   2.056415e-293       1.4530062      0.734      0.356  2.892347e-289\nGIMAP7  0.000000e+00       1.4612133      0.804      0.380   0.000000e+00\nLTB     0.000000e+00       1.5963402      0.770      0.327   0.000000e+00\nRPL10A  0.000000e+00       0.9640366      0.969      0.809   0.000000e+00\n            max_pval minimump_p_val\nCCR7    0.000000e+00              0\nSELL    0.000000e+00              0\nLDHB   2.056415e-293              0\nGIMAP7  0.000000e+00              0\nLTB     0.000000e+00              0\nRPL10A  0.000000e+00              0\n```\n:::\n:::\n\n\nThe output from the `FindConservedMarkers` function, is a matrix containing a ranked list of putative markers listed by gene ID for the cluster we specified, and associated statistics. Note that the same set of statistics are computed for each group (in our case, Ctrl and Stim) and the last two columns (`max_pval`和`minimump_p_val`) correspond to the combined p-value across the two groups. We describe some of these columns below:\n\n-   `gene`: gene symbol\n-   `condition_p_val`(即本例中的“stim_p_val”和“ctrl_p_val”列，后面同理): p-value not adjusted for multiple test correction for condition\n-   `condition_avg_log2FC`: average log fold change for condition. Positive values indicate that the gene is more highly expressed in the cluster.\n-   `condition_pct.1`: percentage of cells where the gene is detected in the cluster for condition\n-   `condition_pct.2`: percentage of cells where the gene is detected on average in the other clusters for condition\n-   `condition_p_val_adj`: adjusted p-value for condition, based on **bonferroni correction** using all genes in the dataset, used to determine significance\n-   `max_pval`: largest p value of p value calculated by each group/condition\n-   `minimump_p_val`: combined p value\n\n::: callout-tip\nThe `condition_p_val`, `condition_avg_log2FC`, `condition_pct.1`, `condition_pct.2`, and `condition_p_val_adj` mean the same thing as they do in `FindMarkers`, just restricted to only the cells present in group X. The `max_pval` is the maximum p-value across all groups. The `mimimump_p_val` represents one way of doing a meta-analysis of significance values (combining p-values across different tests).\n\n(来自：<https://github.com/satijalab/seurat/issues/1164>)\n:::\n\n::: callout-warning\nSince each cell is being treated as a replicate this will result in inflated p-values within each group! A gene may have an incredibly low p-value \\< 1e-50 but that doesn't translate as a highly reliable marker gene.\n:::\n\nWhen looking at the output, [**we suggest looking for markers with large differences in expression between `pct.1` and `pct.2` and larger fold changes**]{.underline}. For instance if `pct.1` = 0.90 and `pct.2` = 0.80, it may not be as exciting of a marker. However, if `pct.2` = 0.1 instead, the bigger difference would be more convincing. Also, of interest is if the majority of cells expressing the marker is in my cluster of interest. If `pct.1` is low, such as 0.3, it may not be as interesting. Both of these are also possible parameters to include when running the function, as described above.\n\n#### 添加基因注释信息\n\nIt can be helpful to add columns with gene annotation information. In order to do that we will load in an annotation file located in your `data` folder, using the code provided below:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-9_1745189a28708bd04ef72eedaf3afc91'}\n\n```{.r .cell-code}\nannotations <- readRDS(\"data/scRNA-seq_online/annotations.rds\")\nhead(annotations, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n          gene_id gene_name seq_name                       gene_biotype\n1 ENSG00000290825   DDX11L2        1                             lncRNA\n6 ENSG00000223972   DDX11L1        1 transcribed_unprocessed_pseudogene\n7 ENSG00000227232    WASH7P        1             unprocessed_pseudogene\n                                                                                    description\n1 DEAD/H-box helicase 11 like 2 (pseudogene) [Source:NCBI gene (formerly Entrezgene);Acc:84771]\n6                DEAD/H-box helicase 11 like 1 (pseudogene) [Source:HGNC Symbol;Acc:HGNC:37102]\n7                         WASP family homolog 7, pseudogene [Source:HGNC Symbol;Acc:HGNC:38034]\n```\n:::\n:::\n\n\n该数据的\"description\"列即对基因的注释，下面我们把这一列通过匹配基因名将其添加到cluster0_conserved_markers数据框中。\n\n::: {.callout-tip collapse=\"true\"}\n###### 获取基因注释信息的方法\n\n首先从`BiocManager`安装[`AnnotationHub`包](https://bioconductor.org/packages/release/bioc/html/AnnotationHub.html)和[`ensembldb`包](https://bioconductor.org/packages/release/bioc/html/ensembldb.html)：\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-10_318d29c9f538f7cc1c96a636c8ad8834'}\n\n```{.r .cell-code}\nBiocManager::install(\"AnnotationHub\")\nBiocManager::install(\"ensembldb\")\n```\n:::\n\n\n**从AnnotationHub下载并提取所需的注释信息数据库:**\n\nTo access the various annotations available from Ensembl for human, we need to first connect to `AnnotationHub`, then specify the organism and database we are interested in.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-11_e5dedf6c374f2b073572bc7dd21c356b'}\n\n```{.r .cell-code}\n# 从AnnotationHub下载注释信息数据库\nlibrary(AnnotationHub)\nah <- AnnotationHub()\nah\n```\n:::\n\n\n```         \nAnnotationHub with 70762 records\n# snapshotDate(): 2023-10-20\n# $dataprovider: Ensembl, BroadInstitute, UCSC, ftp://ftp.ncbi.nlm.nih.gov/g...\n# $species: Homo sapiens, Mus musculus, Drosophila melanogaster, Bos taurus,...\n# $rdataclass: GRanges, TwoBitFile, BigWigFile, EnsDb, Rle, OrgDb, SQLiteFil...\n# additional mcols(): taxonomyid, genome, description,\n#   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags,\n#   rdatapath, sourceurl, sourcetype \n# retrieve records with, e.g., 'object[[\"AH5012\"]]' \n\n             title                              \n  AH5012   | Chromosome Band                    \n  AH5013   | STS Markers                        \n  AH5014   | FISH Clones                        \n  AH5015   | Recomb Rate                        \n  AH5016   | ENCODE Pilot                       \n  ...        ...                                \n  AH116159 | org.Aegialitis_vocifera.eg.sqlite  \n  AH116160 | org.Charadrius_vociferous.eg.sqlite\n  AH116161 | org.Charadrius_vociferus.eg.sqlite \n  AH116162 | org.Oxyechus_vociferus.eg.sqlite   \n  AH116163 | org.Drosophila_erecta.eg.sqlite    \n```\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-12_1b8d056e6d440ec7ad57cf3358e6bb48'}\n\n```{.r .cell-code}\nhead(unique(ah$species))\n```\n:::\n\n\n```         \n[1] \"Homo sapiens\"         \"Vicugna pacos\"        \"Dasypus novemcinctus\"\n[4] \"Otolemur garnettii\"   \"Papio hamadryas\"      \"Papio anubis\"     \n```\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-13_ed8bfbce5284fc736ddaa6952fa11f67'}\n\n```{.r .cell-code}\n# Access the Ensembl database for organism\nahDb <- query(ah, \n              pattern = c(\"Homo sapiens\", \"EnsDb\"), \n              ignore.case = TRUE)\nahDb\n```\n:::\n\n\n```         \nAnnotationHub with 25 records\n# snapshotDate(): 2023-10-20\n# $dataprovider: Ensembl\n# $species: Homo sapiens\n# $rdataclass: EnsDb\n# additional mcols(): taxonomyid, genome, description,\n#   coordinate_1_based, maintainer, rdatadateadded, preparerclass, tags,\n#   rdatapath, sourceurl, sourcetype \n# retrieve records with, e.g., 'object[[\"AH53211\"]]' \n\n             title                             \n  AH53211  | Ensembl 87 EnsDb for Homo Sapiens \n  AH53715  | Ensembl 88 EnsDb for Homo Sapiens \n  AH56681  | Ensembl 89 EnsDb for Homo Sapiens \n  AH57757  | Ensembl 90 EnsDb for Homo Sapiens \n  AH60773  | Ensembl 91 EnsDb for Homo Sapiens \n  ...        ...                               \n  AH100643 | Ensembl 106 EnsDb for Homo sapiens\n  AH104864 | Ensembl 107 EnsDb for Homo sapiens\n  AH109336 | Ensembl 108 EnsDb for Homo sapiens\n  AH109606 | Ensembl 109 EnsDb for Homo sapiens\n  AH113665 | Ensembl 110 EnsDb for Homo sapiens\n```\n\nNext, we acquire the latest annotation files from this Ensembl database.\n\nWe can first check which annotation versions are available. Since we want the most recent, we will return the AnnotationHub ID for this database:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-14_72245e6e4f33df3781313c33dad8ffa6'}\n\n```{.r .cell-code}\n# Acquire the latest annotation files\nid <- ahDb |>\n  mcols() |>\n  rownames() |>\n  tail(n = 1)\nid\n```\n:::\n\n\n```         \n[1] \"AH113665\"\n```\n\nFinally, we can use the AnnotationHub connection to download the appropriate Ensembl database.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-15_a91ddfcfacf369019a83812317928b5e'}\n\n```{.r .cell-code}\n# Download the appropriate Ensembldb database\n# 需要开启全局代理\nedb <- ah[[id]]\nedb\n```\n:::\n\n\n```         \nEnsDb for Ensembl:\n|Backend: SQLite\n|Db type: EnsDb\n|Type of Gene ID: Ensembl Gene ID\n|Supporting package: ensembldb\n|Db created by: ensembldb package from Bioconductor\n|script_version: 0.3.10\n|Creation time: Mon Aug  7 09:02:07 2023\n|ensembl_version: 110\n|ensembl_host: 127.0.0.1\n|Organism: Homo sapiens\n|taxonomy_id: 9606\n|genome_build: GRCh38\n|DBSCHEMAVERSION: 2.2\n|common_name: human\n|species: homo_sapiens\n| No. of genes: 71440.\n| No. of transcripts: 278545.\n|Protein data available.\n```\n\n**提取并保存注释信息：**\n\nAnd to extract gene-level information we can use the Ensembldb function `genes()` to return a data frame of annotations.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-16_27126be5040a81e7b4e647529fb5c048'}\n\n```{.r .cell-code}\n# Extract gene-level information from database\nannotations <- genes(edb, return.type = \"data.frame\")\ncolnames(annotations)\n```\n:::\n\n\n```         \n[1] \"gene_id\"              \"gene_name\"            \"gene_biotype\"        \n[4] \"gene_seq_start\"       \"gene_seq_end\"         \"seq_name\"            \n[7] \"seq_strand\"           \"seq_coord_system\"     \"description\"         \n[10] \"gene_id_version\"      \"canonical_transcript\" \"symbol\"              \n[13] \"entrezid\"   \n```\n\nWe aren't interested in all of the information present in this `annotations` file, so we are going to extract that which is useful to us.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-17_49757d7ca0f50a4b032545ae740f4576'}\n\n```{.r .cell-code}\n# Select annotations of interest\nlibrary(dplyr)\nannotations <- annotations |>\n  select(gene_id, gene_name, seq_name, gene_biotype, description)\n```\n:::\n\n\n**保存到本地:**\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-18_6153fb1dab883b11aee9e5f62fd8407f'}\n\n```{.r .cell-code}\nsaveRDS(annotations, file = \"data/scRNA-seq_online/annotations.rds\")\n```\n:::\n\n:::\n\nFirst, we will turn the row names with gene identifiers into its own columns. Then we will merge this annotation file with our results from the `FindConservedMarkers()`:\n\n1.  首先通过`tibble`包的`rownames_to_column`函数将“cluster0_conserved_markers”数据框的行名（基因symbol）转换成新的一列“gene”\n\n2.  然后，通过`dplyr`包的`left_join`函数合并“cluster0_conserved_markers”数据（`x`）和“annotations”数据框的 \"description\"列（`y`）。通过匹配“cluster0_conserved_markers”数据中的“gene”列（上一步生成）和“annotations”数据的“gene_name”列来进行合并。同时，`left_join`会保留`x`（这里即上一步添加了“gene列”的“cluster0_conserved_markers”数据框）中的所有值；而删除y（“annotations”数据框）中用于匹配的那一列（即“gene_name”）\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-19_3a2b41f500082b29af400f09c37c9275'}\n\n```{.r .cell-code}\n# Combine markers with gene descriptions \nlibrary(tibble) # 调用rownames_to_column函数\nlibrary(dplyr) # 调用left_join函数\ncluster0_ann_markers <- cluster0_conserved_markers |>\n  rownames_to_column(var = \"gene\") |> \n  # left_join保留x中的所有观测\n  left_join(y = unique(annotations[, c(\"gene_name\", \"description\")]),\n            by = c(\"gene\" = \"gene_name\"))\nhead(cluster0_ann_markers, 3)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  gene stim_p_val stim_avg_log2FC stim_pct.1 stim_pct.2 stim_p_val_adj\n1 CCR7          0        1.481347      0.927      0.430              0\n2 SELL          0        1.724888      0.832      0.370              0\n3 LDHB          0        1.720061      0.732      0.304              0\n     ctrl_p_val ctrl_avg_log2FC ctrl_pct.1 ctrl_pct.2 ctrl_p_val_adj\n1  0.000000e+00        1.469446      0.839      0.368   0.000000e+00\n2  0.000000e+00        2.027358      0.610      0.186   0.000000e+00\n3 2.056415e-293        1.453006      0.734      0.356  2.892347e-289\n       max_pval minimump_p_val\n1  0.000000e+00              0\n2  0.000000e+00              0\n3 2.056415e-293              0\n                                                        description\n1 C-C motif chemokine receptor 7 [Source:HGNC Symbol;Acc:HGNC:1608]\n2                    selectin L [Source:HGNC Symbol;Acc:HGNC:10720]\n3        lactate dehydrogenase B [Source:HGNC Symbol;Acc:HGNC:6541]\n```\n:::\n:::\n\n\n#### 寻找cluster 10的conserved markers\n\nIn the previous lesson ( @sec-fcgr3a_monocyte_markers ), we identified **cluster 10** as FCGR3A+ monocytes by inspecting the expression of known cell markers FCGR3A and MS4A7.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-20_6c27a810fc9ebe4c091a4b2c2d0ac48f'}\n\n```{.r .cell-code}\nFeaturePlot(seurat_clustered_qc, \n            reduction = \"umap\", \n            features = c(\"FCGR3A\", \"MS4A7\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-20-1.png){width=960}\n:::\n:::\n\n\nNow, we use `FindConservedMarkers()` function to find conserved markers for cluster 10.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-21_d3759b42e20968a72bcbd94d4f369f93'}\n\n```{.r .cell-code}\ncluster10_conserved_markers <- FindConservedMarkers(seurat_clustered_qc,\n                                                    ident.1 = 10,\n                                                    grouping.var = \"sample\",\n                                                    only.pos = TRUE,\n                                                    logfc.threshold = 0.25)\n\ncluster10_ann_markers <- cluster10_conserved_markers |> \n  rownames_to_column(var=\"gene\") |> \n  left_join(y = unique(annotations[, c(\"gene_name\", \"description\")]),\n            by = c(\"gene\" = \"gene_name\"))\nhead(cluster10_ann_markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    gene stim_p_val stim_avg_log2FC stim_pct.1 stim_pct.2 stim_p_val_adj\n1 FCGR3A          0        5.208580      0.988      0.101              0\n2 MS4A4A          0        5.106558      0.893      0.051              0\n3  MS4A7          0        4.313442      0.995      0.159              0\n4 CXCL16          0        4.097853      0.924      0.108              0\n5   VMO1          0        7.808405      0.758      0.016              0\n6   LST1          0        3.195206      0.873      0.148              0\n  ctrl_p_val ctrl_avg_log2FC ctrl_pct.1 ctrl_pct.2 ctrl_p_val_adj max_pval\n1          0        4.391965      0.980      0.141              0        0\n2          0        5.623548      0.577      0.016              0        0\n3          0        4.307014      0.962      0.122              0        0\n4          0        3.467690      0.945      0.148              0        0\n5          0        6.478637      0.850      0.039              0        0\n6          0        3.288439      0.932      0.165              0        0\n  minimump_p_val\n1              0\n2              0\n3              0\n4              0\n5              0\n6              0\n                                                                   description\n1                    Fc gamma receptor IIIa [Source:HGNC Symbol;Acc:HGNC:3619]\n2          membrane spanning 4-domains A4A [Source:HGNC Symbol;Acc:HGNC:13371]\n3           membrane spanning 4-domains A7 [Source:HGNC Symbol;Acc:HGNC:13378]\n4          C-X-C motif chemokine ligand 16 [Source:HGNC Symbol;Acc:HGNC:16642]\n5 vitelline membrane outer layer 1 homolog [Source:HGNC Symbol;Acc:HGNC:30387]\n6          leukocyte specific transcript 1 [Source:HGNC Symbol;Acc:HGNC:14189]\n```\n:::\n:::\n\n\n> 可以发现cluster10的FCGR3A和MS4A7的表达比例显著高于其他cluster。符合此前的判断。\n\n------------------------------------------------------------------------\n\n### 批量寻找多个clusters的conserved markers {#sec-function_to_find_markers}\n\nThe function `FindConservedMarkers()` **accepts a single cluster at a time**, and we could run this function as many times as we have clusters. However, this is not very efficient. Instead we will first create a function to find the conserved markers including all the parameters we want to include. We will also **add a few lines of code to modify the output**. Our function will:\n\n1.  Run the `FindConservedMarkers()` function\n2.  Transfer row names to a column using `rownames_to_column()` function\n3.  Merge in annotations\n4.  Create the column of cluster IDs using the `cbind()` function\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-22_67d1a4383c2722ec5b7cfd8d9ae91b65'}\n\n```{.r .cell-code}\n# Create function to get conserved markers for any given cluster\nget_conserved <- function(cluster) {\n  FindConservedMarkers(seurat_clustered_qc,\n                       ident.1 = cluster,\n                       grouping.var = \"sample\",\n                       only.pos = TRUE) %>%\n    rownames_to_column(var = \"gene\") %>%\n    left_join(y = unique(annotations[, c(\"gene_name\", \"description\")]),\n               by = c(\"gene\" = \"gene_name\")) %>%\n    cbind(cluster_id = cluster, .)\n  }\n```\n:::\n\n\nNow that we have this function created we can use it as an argument to the appropriate `map` function. We want the output of the `map` family of functions to be a **dataframe with each cluster output bound together by rows**. （`map`函数输出的为一个list，通过`list_rbind`函数按照行组合列表中的每一个对象，并输出为数据框）\n\nNow, let's try this function to find the conserved markers for the clusters that were identified as **CD4+ T cells (4, 0, 6, 2)** from our use of known marker genes ( @sec-cd4_t_cells ).\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-23_42ebfc9e833079dec6b92acd38d42d77'}\n\n```{.r .cell-code}\nFeaturePlot(seurat_clustered_qc, \n            reduction = \"umap\", \n            features = c(\"CD3D\", \"IL7R\", \"CCR7\"), \n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-23-1.png){width=960}\n:::\n:::\n\n\nLet's see what genes we identify and of there are overlaps or obvious differences that can help us tease this apart a bit more.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-24_7ac0d6c9cd1012a18d481eba50b12d55'}\n\n```{.r .cell-code}\nlibrary(purrr)\nconserved_markers <- map(c(4, 0, 6, 2), get_conserved) |> list_rbind()\n```\n:::\n\n\n::: callout-tip\n###### Finding markers for all clusters\n\nFor your data, you may want to run this function on all clusters, in which case you could input `0:20` instead of `c(4,0,6,2)`. Also, it is possible that when you run this function on all clusters, in **some cases you will have clusters that do not have enough cells for a particular group** - and your function will fail. For these clusters you will need to use `FindAllMarkers()`.\n:::\n\n#### 获取top marker基因 {#sec-top_conserved_markers}\n\nWe would like to use these gene lists to see of we can **identify which celltypes these clusters identify with.** Let's take a look at the top genes for each of the clusters and see if that gives us any hints. We can view the top 10 markers by **average fold change** across the two groups, for each cluster for a quick perusal:\n\n1.  首先通过`dplyr`包的`mutate`函数计算新的变量“avg_fc”，计算依据为：avg_fc = (ctrl_avg_log2FC + stim_avg_log2FC) /2\n2.  然后通过`dplyr`包的`group_by`函数以“cluster_id”列为依据进行分组计算\n3.  最后，通过`dplyr`包的`slice_max`函数取“avg_fc”（`order_by = avg_fc`）最大的前10行数据（`n = 10`）。由于`group_by`定义了分组计算，所以会输出每个cluster的前10个marker基因\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-25_894e43fe09e2adef3139aa16e2a4d97e'}\n\n```{.r .cell-code}\n# 获取每个cluster的前10个marker基因\ntop_conserved_markers <- conserved_markers %>% \n  mutate(avg_fc = (ctrl_avg_log2FC + stim_avg_log2FC) /2) %>% \n  group_by(cluster_id) %>% \n  slice_max(n = 10, order_by = avg_fc)\n```\n:::\n\n\n::: callout-warning\n###### 待解决的问题\n\n这里基于Seurat V5的运行结果和[原教程](https://hbctraining.github.io/scRNA-seq_online/lessons/09_merged_SC_marker_identification.html)的top markers结果不一致。原教程的top_conserved_markers如下：\n\n![](images/tcell_marker_table_SCTv2.png)\n\n可能的原因：\n\n> “In addition, in Seurat v5 we implement a **pseudocount** (when calculating log-FC) at the **group level** instead of the cell level. As a result, users will observe **higher logFC estimates** in v5 - but should note that these estimates may be more unstable - particularly for genes that are very lowly expressed in one of the two groups” （ @sec-changes_in_seurat_v5 ）\n\n这一小节的后续内容暂时以原教程的marker基因结果为准。\n:::\n\n#### 根据top marker基因重新评估细胞群的注释结果\n\nWhen we look at the entire list, we see **clusters 0** **and 6** have some overlapping genes, like **CCR7** and **SELL** which correspond to **markers of memory T cells**.\n\nIt is possible that these two clusters are more similar to one another and could be merged together as **naive T cells**. On the other hand, with **cluster 2** we observe **CREM** as one of our top genes; a marker gene of activation. This suggests that perhaps cluster 2 represents activated T cells.\n\n|    Cell State     |   Marker   |\n|:-----------------:|:----------:|\n|   Naive T cells   | CCR7, SELL |\n| Activated T cells | CREM, CD69 |\n\nFor **cluster 4**, we see a lot of heat shock and DNA damage genes appear in the top gene list. Based on these markers, it is likely that these are **stressed or dying cells**. However, if we explore the quality metrics for these cells in more detail (i.e. mitoRatio and nUMI overlayed on the cluster) we don't really support for this argument：\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-26_c808d63bf833df841f2410a8f199b999'}\n\n```{.r .cell-code}\n# Visualize the distribution of mitochondrial gene expression detected per cell\n# cluster 4中每个细胞检测到的线粒体基因表达分布情况\nlibrary(ggplot2)\nseurat_clustered_qc %>% \n  subset(idents = 4) %>% \n  .@meta.data %>% \n  ggplot(aes(color = sample, x = mitoRatio, fill = sample)) + \n  geom_density(alpha = 0.2) + \n  scale_x_log10() + \n  theme_classic() +\n  geom_vline(xintercept = 0.2)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-26-1.png){width=672}\n:::\n:::\n\n\n> There is a breadth of research supporting the association of heat shock proteins with reactive T cells in the induction of anti‐inflammatory cytokines in chronic inflammation. This is a cluster for which we would need a deeper understanding of immune cells to really tease apart the results and make a final conclusion.\n\nTo get a better idea of cell type identity for cluster 4 we can explore the expression of different identified markers by cluster using the `FeaturePlot()` function.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-27_bfbf1e046704ed1cced17fe08a3e5728'}\n\n```{.r .cell-code}\n# Plot interesting marker gene expression for cluster 4\nFeaturePlot(seurat_clustered_qc, \n            features = c(\"HSPH1\", \"HSPE1\", \"DNAJB1\"),\n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE,\n            repel = TRUE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-27-1.png){width=960}\n:::\n\n```{.r .cell-code}\n# 提取cluster 4，并单独查看interesting marker gene在其中的表达情况\nsubset(seurat_clustered_qc, idents = 4) %>% \n  FeaturePlot(\n            features = c(\"HSPH1\", \"HSPE1\", \"DNAJB1\"),\n            order = TRUE,\n            min.cutoff = 'q10', \n            label = TRUE,\n            repel = TRUE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-27-2.png){width=960}\n:::\n:::\n\n\n> We see that **only a subset of cluster 4 are highly expressing these genes**.\n\nWe can also explore the range in expression of specific markers by using **violin plots**:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-28_df258cf8bab249137721441b151ceb49'}\n\n```{.r .cell-code}\n# Vln plot - cluster 4\nVlnPlot(seurat_clustered_qc, \n        features = c(\"HSPH1\", \"HSPE1\", \"DNAJB1\"))\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-28-1.png){width=960}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n###### Violin plots\n\nViolin plots are similar to box plots, except that they also show the **probability density** of the data at different values, usually smoothed by a **kernel density estimator**. A violin plot is more informative than a plain box plot. While a box plot only shows summary statistics such as mean/median and interquartile ranges, the **violin plot shows the full distribution of the data**. The difference is particularly useful when the data distribution is multimodal (more than one peak). In this case a violin plot shows the presence of different peaks, their position and relative amplitude.\n:::\n\n## `FindMarkers`-**Marker identification between specific clusters**\n\nSometimes the list of markers returned don't sufficiently separate some of the clusters. For instance, we had previously identified clusters 0, 4, 6 and 2 as CD4+ T cells, but when looking at marker gene lists we identfied markers to help us further subset cells. We were lucky and the signal observed from `FindAllMarkers()` helped us differentiate between naive and activated cells.\n\nAnother option to identify biologically meaningful differences would be to use the **`FindMarkers()` function to determine the genes that are differentially expressed between two specific clusters**.\n\n![](images/marker_ident_function3.png){width=\"379\"}\n\nWe can try all combinations of comparisons, but we'll start with **cluster 2** versus all other CD4+ T cell clusters:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-29_612ceab8995c54c164fafe381b93f64a'}\n\n```{.r .cell-code}\n# Determine differentiating markers for CD4+ T cell\ncd4_tcells <- FindMarkers(seurat_clustered_qc,\n                          ident.1 = 2,\n                          ident.2 = c(0, 4, 6))  \n\n# Add gene symbols to the DE table\ncd4_tcells <- cd4_tcells %>%\n  rownames_to_column(var = \"gene\") %>%\n  left_join(y = unique(annotations[, c(\"gene_name\", \"description\")]),\n            by = c(\"gene\" = \"gene_name\"))\ncolnames(cd4_tcells)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"gene\"        \"p_val\"       \"avg_log2FC\"  \"pct.1\"       \"pct.2\"      \n[6] \"p_val_adj\"   \"description\"\n```\n:::\n\n```{.r .cell-code}\n# Reorder columns and sort by \"p_val_adj\"\ncd4_tcells <- cd4_tcells[, c(1, 3:5, 2, 6:7)]\ncd4_tcells <- arrange(cd4_tcells, p_val_adj)\n\ncd4_tcells$gene[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"GAPDH\"   \"SRGN\"    \"CYBA\"    \"ALOX5AP\" \"CCR7\"    \"FTH1\"    \"TMSB4X\" \n [8] \"CREM\"    \"SELL\"    \"ANXA1\"  \n```\n:::\n:::\n\n\n![](images/截屏2023-12-22%2011.37.02.png)\n\n::: callout-warning\n这个表格和[原教程](https://hbctraining.github.io/scRNA-seq_online/lessons/09_merged_SC_marker_identification.html)的仍然有差异。\n:::\n\n> Of these top genes the **CREM gene** stands out as a marker of activation with a positive fold change. We also see markers of naive or memory cells include the **SELL** and **CCR7** genes with negative fold changes, which is in line with previous results.\n>\n> |    Cell State     |   Marker   |\n> |:-----------------:|:----------:|\n> |   Naive T cells   | CCR7, SELL |\n> | Activated T cells | CREM, CD69 |\n\n进一步通过气泡图来可视化上述基因的表达.\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-30_5d5cec6477b4c040ff00c359ec928e18'}\n\n```{.r .cell-code}\nDotPlot(seurat_clustered_qc, \n        features = c(\"CCR7\", \"SELL\", \"CREM\", \"CD69\"), \n        idents = c(0, 2, 4, 6)) + \n  RotatedAxis()\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n> 可以看到，和`FindMarkers`找到的top genes的fold change一致，cluster 2中的CREM基因相较于cluster 0, 4, 6高表达，而cluster 2中的CCR7和SELL相对低表达。\n>\n> Based on these plots it seems as though **clusters 2** are **Activated T cells, cluster 0 and 6 are** Naive or memory CD4+ T cells. However, for **clusters 4** it is hard to tell.\n\n------------------------------------------------------------------------\n\n## 注释细胞cluster\n\nNow taking all of this information, we can surmise the cell types of the different clusters and plot the cells with cell type labels.\n\n| Cluster ID |          Cell Type           |\n|:----------:|:----------------------------:|\n|     0      | Naive or memory CD4+ T cells |\n|     1      |       CD14+ monocytes        |\n|     2      |      Activated T cells       |\n|     3      |       CD14+ monocytes        |\n|     4      |   Stressed cells / Unknown   |\n|     5      |         CD8+ T cells         |\n|     6      | Naive or memory CD4+ T cells |\n|     7      |           B cells            |\n|     8      |           NK cells           |\n|     9      |         CD8+ T cells         |\n|     10     |      FCGR3A+ monocytes       |\n|     11     |           B cells            |\n|     12     |           NK cells           |\n|     13     |           B cells            |\n|     14     | Conventional dendritic cells |\n|     15     |        Megakaryocytes        |\n|     16     | Plasmacytoid dendritic cells |\n\n: 细胞注释结果 {#tbl-细胞注释结果}\n\nWe can then reassign the identity of the clusters to these cell types:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-31_e40dd283514074996f800384d9732eec'}\n\n```{.r .cell-code}\n# Rename all identities\nseurat_clustered_qc <- RenameIdents(seurat_clustered_qc, \n                                    \"0\" = \"Naive or memory CD4+ T cells\",\n                                    \"1\" = \"CD14+ monocytes\",\n                                    \"2\" = \"Activated T cells\",\n                                    \"3\" = \"CD14+ monocytes\",\n                                    \"4\" = \"Stressed cells / Unknown\",\n                                    \"5\" = \"CD8+ T cells\",\n                                    \"6\" = \"Naive or memory CD4+ T cells\",\n                                    \"7\" = \"B cells\",\n                                    \"8\" = \"NK cells\",\n                                    \"9\" = \"CD8+ T cells\",\n                                    \"10\" = \"FCGR3A+ monocytes\",\n                                    \"11\" = \"B cells\",\n                                    \"12\" = \"NK cells\",\n                                    \"13\" = \"B cells\",\n                                    \"14\" = \"Conventional dendritic cells\",\n                                    \"15\" = \"Megakaryocytes\",\n                                    \"16\" = \"Plasmacytoid dendritic cells\")\n```\n:::\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-32_d39954f0e09fc9e50ee1642b2052c121'}\n\n```{.r .cell-code}\n# Plot the UMAP\nDimPlot(seurat_clustered_qc, \n        reduction = \"umap\", \n        label = FALSE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-32-1.png){width=960}\n:::\n:::\n\n\n::: callout-tip\nIf we wanted to remove the potentially stressed cells, we could use the `subset()` function:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-33_1422392eba466ec7f17d9a0310430bb2'}\n\n```{.r .cell-code}\n# Remove the stressed or dying cells\nseurat_subset_labeled <- subset(seurat_clustered_qc,\n                               idents = \"Stressed cells / Unknown\", # 取子集的标准\n                               invert = TRUE) # 反选\n\n# Re-visualize the clusters\nDimPlot(seurat_subset_labeled, \n        reduction = \"umap\", \n        label = FALSE)\n```\n\n::: {.cell-output-display}\n![](09_merged_SC_marker_identification_files/figure-html/unnamed-chunk-33-1.png){width=672}\n:::\n:::\n\n:::\n\nNow we would want to save our final labelled Seurat object:\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-34_5ac16e083a80fed3a46c13139fb6f057'}\n\n```{.r .cell-code}\n# Save final R object\nsaveRDS(seurat_clustered_qc, file = \"output/scRNA-seq_online/seurat_labelled.rds\")\n```\n:::\n\n\n最后，我们把sessionInfo也导出来：\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-35_04f7950739480884abf82f9b94e8422f'}\n\n```{.r .cell-code}\n# Create and save a text file with sessionInfo\nsink(file = \"output/scRNA-seq_online/sessionInfo_scrnaseq.txt\", \n     append = FALSE, \n     split = FALSE)\nsessionInfo()\nsink()\n```\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n###### 关于`sink`函数\n\n`sink`函数能够将R脚本运行的结果输出到文本文件中，输出的内容为两个`sink()`命令之间的所有内容。\n\n-   `file`：输出目录\n\n-   `append`：取`TRUE`表示若输出目录下有与结果文件同名的文件，则计算结果将追加到原文件内容的后面；取`FALSE`（默认）表示将本次的计算结果覆盖原文件的内容\n\n-   `split`：取`TRUE`表示在计算结果输出到指定文件中的同时，还输出到控制台上；取`FALSE`（默认）表示计算结果仅输出到指定文件中。\n:::\n\n------------------------------------------------------------------------\n\n## 可选的后续分析:\n\n[![](images/640.png)](https://mp.weixin.qq.com/s?__biz=Mzg2MTExNTkwNA==&mid=2247532151&idx=1&sn=55ff4362b5a572d53072c1fe85c593d6&chksm=ce1e3d18f969b40e71503729f38a8e01cd80e313446da1571d7d42c61e094d94b3519cdb85be&mpshare=1&scene=1&srcid=0910pFfJBQOE8XVDU2opxc6B&sharer_shareinfo=98ce7b038453fa671b5e609905ff82f0&sharer_shareinfo_first=98ce7b038453fa671b5e609905ff82f0#rd)\n\n[![](images/640-2.png)](https://mp.weixin.qq.com/s?__biz=Mzg2MTExNTkwNA==&mid=2247532151&idx=1&sn=55ff4362b5a572d53072c1fe85c593d6&chksm=ce1e3d18f969b40e71503729f38a8e01cd80e313446da1571d7d42c61e094d94b3519cdb85be&mpshare=1&scene=1&srcid=0910pFfJBQOE8XVDU2opxc6B&sharer_shareinfo=98ce7b038453fa671b5e609905ff82f0&sharer_shareinfo_first=98ce7b038453fa671b5e609905ff82f0#rd)\n\n### 提取感兴趣细胞亚群进一步细分（Explore a subset of the cell types to discover subclusters of cells）\n\n鉴定完细胞类型后，接下来就是对鉴定的目标细胞群进行深入的研究。一般是提取目标亚群，然后在进一步细分。细胞再分群的意义在于进一步分析细胞的组成成分。实操见 @sec-multiple_single_cell_datasets_2 。\n\n### **单细胞差异分析（**Perform **differential expression analysis** **between conditions）**\n\n在实际研究中，往往需要研究两类细胞之间的差异，或者是某类细胞在不同处理样本间的差异基因情况，因此需要将待比较的细胞群单独拿出来进行分析。后面，我们在 @sec-differential_expression 中对如何**寻找不同样本类型/条件间同一细胞类型内的差异基因**进行了探索。\n\n除了分析细胞内基因表达的差异，也可以采用最常见的GO和KEGG富集分析，还可以进行GSEA、GSVA、SCENIC等分析，从功能、通路、基因调控网络等方面进行探究。\n\n### 免疫类群分析\n\n很多疾病的发生、发展都和免疫细胞有关，一般病灶组织内或者附近的免疫细胞较正常的组织会更丰富。为了将疾病中免疫反应描绘出来，可以采用以下分析策略：①对免疫细胞再分群，得到更多功能更加精细化的免疫细胞亚群；②免疫细胞类群在不同分组中的分布变化；③免疫细胞类群拟时序分析，探究不同疾病程度、不同发育阶段或者不同生理状态下的免疫反应机制。\n\n### 关键细胞的分化轨迹\n\n最开始拿到的单细胞转录组测序数据，并未直接告诉我们每个细胞处在什么状态。因此，需要借助一些分析方法来实现轨迹上的排序，比如Monocle2拟时序分析/轨迹推断，ScVelo RNA速度分析等，推断潜在的细胞分化方向性，挖掘一些稀少的中间状态细胞，解析细胞分化过程中起调控作用的关键基因；也可以比较实验组/对照组中分化的差异。\n\n### 探索细胞-细胞互作\n\n每个细胞都能分泌细胞因子或者激素，这些细胞因子能够被周围细胞上的受体接收并用于调节相应的生理活动，细胞与细胞之间有相互联系，致病细胞可能是由于大类中某一种亚类细胞分化或者演化过来的；那么这些演化过程可能是由于其他细胞的细胞因子导致的。\n\n在锁定目标细胞类群之后，通过CellphoneDB细胞通讯分析、受体-配体分析等，找到与目标细胞相互作用的其他细胞类型，找到“直接”和“间接”的细胞调控网络。当然，对于已经筛选出目标基因了，也可以通过PPI分析找到基因/蛋白间的互作关系。\n\n### 挖掘关键调控转录因子\n\n细胞异质性以及这种异质性是如何发展和维持的，在很大程度上是由潜在的基因调控网络决定的，特定转录因子（transcription factor，TF）集合的协同表达驱动各自靶标基因的表达，从而建立特定的基因表达谱；SCENIC是用来研究和破译基因调控的工具，能从单细胞转录组数据中推断TF、基因调控网络和细胞类型。其基本原理是基于共表达和DNA调控保守序列（motif）分析推断基因调控网络，然后在每个细胞中分析网络活性以鉴定细胞状态。\n\n### 湿实验验证，探索潜在机制（Experimentally validate intriguing markers for our identified cell types）\n\n除了以上单细胞测序数据相关分析以外，湿实验验证已逐渐成为单细胞分析的有力补充。比如用RT-qPCR/FISH等在RNA层面进行验证，用WB/免疫荧光/免疫组化/流式分析等在蛋白层面进行验证，还可以利用组织芯片或者TCGA数据库信息，进行临床水平的验证；也可以用细胞谱系示踪技术标记细胞 , 对关键细胞类群及其后代所有细胞的增殖、分化和迁移等活动进行追踪观察等；甚至可以利用流式分选出感兴趣的细胞群，然后对目的细胞群进行基因操作（上调/下调/敲除等），进行更深入的机制研究。总之，根据具体的实验目的，进行更完善的实验设计。\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell hash='09_merged_SC_marker_identification_cache/html/unnamed-chunk-36_2ce80fa5655d3e01a892cb77ac662916'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.4      purrr_1.0.2        tibble_3.2.1       dplyr_1.1.4       \n[5] Seurat_5.0.1       SeuratObject_5.0.1 sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] mathjaxr_1.6-0         RColorBrewer_1.1-3     rstudioapi_0.15.0     \n  [4] jsonlite_1.8.8         magrittr_2.0.3         ggbeeswarm_0.7.2      \n  [7] TH.data_1.1-2          spatstat.utils_3.0-4   farver_2.1.1          \n [10] rmarkdown_2.25         vctrs_0.6.5            multtest_2.58.0       \n [13] ROCR_1.0-11            spatstat.explore_3.2-5 htmltools_0.5.7       \n [16] plotrix_3.8-4          sctransform_0.4.1      parallelly_1.36.0     \n [19] KernSmooth_2.23-22     htmlwidgets_1.6.4      ica_1.0-3             \n [22] sandwich_3.1-0         plyr_1.8.9             plotly_4.10.4         \n [25] zoo_1.8-12             igraph_1.6.0           mime_0.12             \n [28] lifecycle_1.0.4        pkgconfig_2.0.3        Matrix_1.6-5          \n [31] R6_2.5.1               fastmap_1.1.1          rbibutils_2.2.16      \n [34] fitdistrplus_1.1-11    future_1.33.1          shiny_1.8.0           \n [37] numDeriv_2016.8-1.1    digest_0.6.34          colorspace_2.1-0      \n [40] patchwork_1.2.0        tensor_1.5             RSpectra_0.16-1       \n [43] irlba_2.3.5.1          labeling_0.4.3         progressr_0.14.0      \n [46] fansi_1.0.6            spatstat.sparse_3.0-3  httr_1.4.7            \n [49] TFisher_0.2.0          polyclip_1.10-6        abind_1.4-5           \n [52] compiler_4.3.2         withr_3.0.0            mutoss_0.1-13         \n [55] fastDummies_1.7.3      MASS_7.3-60.0.1        tools_4.3.2           \n [58] vipor_0.4.7            lmtest_0.9-40          beeswarm_0.4.0        \n [61] metap_1.9              httpuv_1.6.13          future.apply_1.11.1   \n [64] qqconf_1.3.2           goftest_1.2-3          glue_1.7.0            \n [67] nlme_3.1-164           promises_1.2.1         grid_4.3.2            \n [70] Rtsne_0.17             cluster_2.1.6          reshape2_1.4.4        \n [73] generics_0.1.3         gtable_0.3.4           spatstat.data_3.0-4   \n [76] tidyr_1.3.0            sn_2.1.1               data.table_1.14.10    \n [79] utf8_1.2.4             BiocGenerics_0.48.1    spatstat.geom_3.2-7   \n [82] RcppAnnoy_0.0.21       ggrepel_0.9.5          RANN_2.6.1            \n [85] pillar_1.9.0           stringr_1.5.1          spam_2.10-0           \n [88] RcppHNSW_0.5.0         limma_3.58.1           later_1.3.2           \n [91] splines_4.3.2          lattice_0.22-5         survival_3.5-7        \n [94] deldir_2.0-2           tidyselect_1.2.0       miniUI_0.1.1.1        \n [97] pbapply_1.7-2          knitr_1.45             gridExtra_2.3         \n[100] scattermore_1.2        stats4_4.3.2           xfun_0.41             \n[103] Biobase_2.62.0         statmod_1.5.0          matrixStats_1.2.0     \n[106] stringi_1.8.3          lazyeval_0.2.2         yaml_2.3.8            \n[109] evaluate_0.23          codetools_0.2-19       cli_3.6.2             \n[112] uwot_0.1.16            xtable_1.8-4           reticulate_1.34.0     \n[115] Rdpack_2.6             munsell_0.5.0          Rcpp_1.0.12           \n[118] globals_0.16.2         spatstat.random_3.2-2  png_0.1-8             \n[121] ggrastr_1.0.2          parallel_4.3.2         ellipsis_0.3.2        \n[124] presto_1.0.0           dotCall64_1.1-1        listenv_0.9.0         \n[127] viridisLite_0.4.2      mvtnorm_1.2-4          scales_1.3.0          \n[130] ggridges_0.5.5         leiden_0.4.3.1         rlang_1.1.3           \n[133] multcomp_1.4-25        mnormt_2.1.1           cowplot_1.1.2         \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
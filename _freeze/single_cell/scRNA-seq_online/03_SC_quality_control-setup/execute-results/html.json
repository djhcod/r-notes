{
  "hash": "1ca1457175937d387bb6bc35c631dfb6",
  "result": {
    "markdown": "---\nbibliography: references.bib\n---\n\n\n# 数据导入与Seurat对象构建 {#sec-SC_quality_control_setup}\n\n![](images/sc_workflow_2022.jpg){width=\"580\"}\n\nAfter quantifying gene expression we need to bring this data into R to generate metrics for performing QC. In this lesson we will talk about the format(s) count data can be expected in, and how to read it into R so we can move on to the QC step in the workflow. We will also discuss the dataset we will be using and the associated metadata.\n\n------------------------------------------------------------------------\n\n## Exploring the example dataset\n\nFor this workshop we will be working with a single-cell RNA-seq dataset which is part of a larger study from [@kang2017a]. In this paper, the authors present a computational algorithm that harnesses genetic variation (eQTL) to determine the genetic identity of each droplet containing a single cell (singlet) and identify droplets containing two cells from different individuals (doublets).\n\nThe data used to test their algorithm is comprised of pooled Peripheral Blood Mononuclear Cells (PBMCs) taken from eight lupus patients, split into **control** and **interferon beta-treated (stimulated)** conditions.\n\n![](images/kangetal_image.png)\n\n> Image credit: [*Kang et al, 2017*](https://www.nature.com/articles/nbt.4042)\n\n### Raw data\n\nThis dataset is available on GEO ([GSE96583](https://www.ncbi.nlm.nih.gov/geo/query/acc.cgi?acc=GSE96583)), however the available counts matrix lacked mitochondrial reads, so we downloaded the BAM files from the SRA ([SRP102802](https://www-ncbi-nlm-nih-gov.ezp-prod1.hul.harvard.edu/sra?term=SRP102802)). These BAM files were converted back to FASTQ files, then run through [Cell Ranger](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger) to obtain the count data that we will be using.\n\n> **NOTE:** The count data for this dataset is also freely available from 10X Genomics and is used in the [Seurat tutorial](https://satijalab.org/seurat/v3.0/immune_alignment.html).\n\n### Metadata\n\nIn addition to the raw data, we also need to collect **information about the data**; this is known as **metadata**. There is often a temptation to just start exploring the data, but it is not very meaningful if we know nothing about the samples that this data originated from.\n\nSome relevant metadata for our dataset is provided below:\n\n-   The libraries were prepared using 10X Genomics version 2 chemistry\n\n-   The samples were sequenced on the Illumina NextSeq 500\n\n-   PBMC samples from **eight** individual lupus patients were separated into two aliquots each.\n\n    -   One aliquot of PBMCs was activated by 100 U/mL of **recombinant IFN-β for 6 hours**.\n    -   The second aliquot was left **untreated**.\n    -   After 6 hours, the eight samples for each condition were pooled together in two final pools (stimulated cells and control cells). We will be working with these two, pooled samples. (*We did not demultiplex the samples because SNP genotype information was used to demultiplex in the paper and the barcodes/sample IDs were not readily available for this data. Generally, you would demultiplex and perform QC on each individual sample rather than pooling the samples.*)\n\n-   12,138 and 12,167 cells were identified (after removing doublets) for control and stimulated **pooled** samples, respectively.\n\n-   Since the samples are PBMCs, we will expect immune cells, such as:\n\n    -   B cells\n    -   T cells\n    -   NK cells\n    -   monocytes\n    -   macrophages\n    -   possibly megakaryocytes\n\n**It is recommended that you have some expectation regarding the cell types you expect to see in a dataset prior to performing the QC.** This will inform you if you have any cell types with low complexity (lots of transcripts from a few genes) or cells with higher levels of mitochondrial expression. This will enable us to account for these biological factors during the analysis workflow.\n\nNone of the above cell types are expected to be low complexity or anticipated to have high mitochondrial content.\n\n## Loading single-cell RNA-seq count data\n\nAfter processing 10X data using its proprietary software Cell Ranger, you will have an `outs` directory (always). Within this directory you will find a number of different files including the files listed below:\n\n-   **`web_summary.html`:** report that explores different QC metrics, including the mapping metrics, filtering thresholds, estimated number of cells after filtering, and information on the number of reads and genes per cell after filtering.\n-   `BAM alignment files`: files used for visualization of the mapped reads and for re-creation of FASTQ files, if needed\n-   **`filtered_feature_bc_matrix`:** folder containing all files needed to construct the count matrix using data **filtered** **by Cell Ranger**\n-   **`raw_feature_bc_matrix`:** folder containing all files needed to construct the count matrix using the raw **unfiltered data**\n\nWhile Cell Ranger performs filtering on the expression counts (see note below), we wish to perform our own QC and filtering because we want to account for the biology of our experiment/biological system. Given this **we are only interested in the `raw_feature_bc_matrix` folder** in the Cell Ranger output.\n\n::: {.callout-tip collapse=\"true\"}\n###### Why do we not use the filtered_feature_bc_matrix folder?\n\nThe `filtered_feature_bc_matrix` uses [internal filtering criteria by Cell Ranger](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/algorithms/overview), and we do not have control of what cells to keep or abandon.\n\nThe filtering performed by Cell Ranger when generating the `filtered_feature_bc_matrix` is often good; however, sometimes data can be of very high quality and the **Cell Ranger filtering process can remove high quality cells**. In addition, it is generally preferable to explore your own data while taking into account the biology of the experiment for applying thresholds during filtering. For example, if you expect a particular cell type in your dataset to be smaller and/or not as transcriptionally active as other cell types in your dataset, these cells have the potential to be filtered out. However, with Cell Ranger v3 they have tried to account for cells of different sizes (for example, tumor vs infiltrating lymphocytes), and now may not filter as many low quality cells as needed.\n:::\n\nRegardless of the technology or pipeline used to process your raw single-cell RNA-seq sequence data, the output with quantified expression will generally be the same. That is, for each individual sample you will have the following **three files**:\n\n1.  a file with the **cell IDs**, representing all cells quantified\n2.  a file with the **gene IDs**, representing all genes quantified\n3.  a **matrix of counts** per gene for every cell\n\n案例文件以`10X`格式数据储存。总文件夹为“original_10x”，其中每个样本有一个单独的文件夹，分别是“ctrl_raw_feature_bc_matrix”和“stim_raw_feature_bc_matrix”，每个样本文件夹由以下三个标准的`10X`文件组成：\n\n![数据文件夹的结构](images/截屏2023-12-24%2011.25.29.png){width=\"344\"}\n\n**1. `barcodes.tsv`**\n\nThis is a text file which contains all cellular barcodes present for that sample. Barcodes are listed in the order of data presented in the matrix file (i.e. these are the column names).\n\n![](images/cell_ids_new.png){width=\"153\"}\n\n**2. `features.tsv`**\n\nThis is a text file which contains the identifiers of the quantified genes. The source of the identifier can vary depending on what reference (i.e. Ensembl, NCBI, UCSC) you use in the quantification methods, but most often these are **official gene symbols**. The order of these genes corresponds to the order of the rows in the matrix file (i.e. these are the row names).\n\n![](images/genes.png){width=\"313\"}\n\n**3. `matrix.mtx`**\n\nThis is a text file which contains a matrix of count values. The **rows** are associated with the **gene IDs** above and **columns** correspond to the cellular **barcodes**. Note that there are **many zero values** in this matrix.\n\n![](images/sparse_matrix.png){width=\"602\"}\n\nLoading this data into R requires us to **use functions that allow us to efficiently combine these three files into a single count matrix.** However, instead of creating a regular matrix data structure, the functions we will use create a **sparse matrix** to reduce the amount of memory (RAM), processing capacity (CPU) and storage required to work with our huge count matrix.\n\nDifferent methods for reading in data include:\n\n1.  **`readMM()`**: This function is from the `Matrix` package and will convert our standard matrix into a sparse matrix. The `features.tsv` file and `barcodes.tsv` must first be individually loaded into R and then they can be combined. For specific code and instructions on how to do this please see [these additional material](https://github.com/hbctraining/scRNA-seq_online/blob/master/lessons/readMM_loadData.md).\n2.  **`Read10X()`**: This function is from the `Seurat` package and will use the Cell Ranger output directory as input, directly. With this method individual files do not need to be loaded in, instead the function will load and combine them into a sparse matrix. We will be using this function to load in our data!\n\n### 首先尝试读取单个样本\n\nIf we had a single sample, we could generate the count matrix and then subsequently create a Seurat object:\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-1_9ce8a79b4c37b467ec35fd4b09145ab7'}\n\n```{.r .cell-code}\nlibrary(Seurat)\n# Read in 10X data for a single sample (output is a sparse matrix)\nctrl_counts <- Read10X(data.dir = \"data/scRNA-seq_online/original_10x/ctrl_raw_feature_bc_matrix\")\n\n# Turn count matrix into a Seurat object (output is a Seurat object)\nctrl <- CreateSeuratObject(counts = ctrl_counts,\n                           project = \"pbmc_ctrl\",\n                           min.features = 100)\nctrl\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n33538 features across 15688 samples within 1 assay \nActive assay: RNA (33538 features, 0 variable features)\n 1 layer present: counts\n```\n:::\n:::\n\n\n::: callout-note\nThe `min.features` argument specifies the minimum number of genes that need to be detected per cell. This argument will filter out poor quality cells that likely just have random barcodes encapsulated without any cell present. **Usually, cells with less than 100 genes detected are not considered for analysis**.\n:::\n\n**Seurat automatically creates some metadata** for each of the cells when you use the `Read10X()` function to read in data. This information is stored in the `meta.data` slot within the Seurat object.\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-2_1d183a352c1fa5632733b07cf3a6a279'}\n\n```{.r .cell-code}\n# Explore the metadata\nhead(ctrl@meta.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 orig.ident nCount_RNA nFeature_RNA\nAAACATACAATGCC-1  pbmc_ctrl       2344          874\nAAACATACATTTCC-1  pbmc_ctrl       3125          896\nAAACATACCAGAAA-1  pbmc_ctrl       2578          725\nAAACATACCAGCTA-1  pbmc_ctrl       3261          979\nAAACATACCATGCA-1  pbmc_ctrl        746          362\nAAACATACCTCGCT-1  pbmc_ctrl       3519          866\n```\n:::\n:::\n\n\nWhat do the columns of metadata mean?\n\n-   `orig.ident`: this often contains the sample identity if known。通过`CreateSeuratObject`中的`project`参数可以指定，默认是\"SeuratProject\"\n-   `nCount_RNA`: number of **UMIs** per cell\n-   `nFeature_RNA`: number of **genes** detected per cell\n\n### 读取所有样本\n\n1.  首先通过`list.dirs()`函数列出数据文件夹“original_10x”下所有子文件夹的相对路径，并形成一个包含了所有子文件夹相对路径的字符向量“files”\n\n2.  然后通过`Read10X()`读取每个子文件夹。`Read10X`函数支持批量读取多个文件夹。\n\n3.  最后，通过`CreateSeuratObject`构建Seurat对象。\n\n::: callout-caution\n这里利用了`Read10X`函数支持批量读取多个文件夹的特性，直接创建一个合并后的Seurat对象“merged_seurat”。但是，这只适用于读取以标准10X格式保存的数据，即**每个样本为一个文件夹**，每个文件夹内有三个文件，文件名为：**“barcodes.tsv.gz”、\"features.tsv.gz\"、\"matrix.mtx.gz\"。**\n\n另外一种更通用的方法是通过循环依次读取每个文件夹内的3个10X文件，得到一个Seurat对象列表，然后通过`merge()`函数合并这些Seurat对象，详见： @sec-Read_non-standard_10x_files 。\n:::\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-3_777cb4b6c10d83f77b1fc8622b97cde6'}\n\n```{.r .cell-code}\n# 列出数据文件夹下所有子文件夹的相对路径\nlist.dirs(\"data/scRNA-seq_online/original_10x\")\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"data/scRNA-seq_online/original_10x\"                           \n[2] \"data/scRNA-seq_online/original_10x/ctrl_raw_feature_bc_matrix\"\n[3] \"data/scRNA-seq_online/original_10x/stim_raw_feature_bc_matrix\"\n```\n:::\n\n```{.r .cell-code}\nfiles <- list.dirs(\"data/scRNA-seq_online/original_10x\")[-1]\n\n# 构建Seurat对象\nmerged_seurat <- CreateSeuratObject(Read10X(files),\n                                    min.features = 100, \n                                    project = \"GSE96583\")\nmerged_seurat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n33538 features across 31444 samples within 1 assay \nActive assay: RNA (33538 features, 0 variable features)\n 1 layer present: counts\n```\n:::\n\n```{.r .cell-code}\n# Check that the merged object has the appropriate sample-specific prefixes\nhead(merged_seurat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   orig.ident nCount_RNA nFeature_RNA\n1_AAACATACAATGCC-1          1       2344          874\n1_AAACATACATTTCC-1          1       3125          896\n1_AAACATACCAGAAA-1          1       2578          725\n1_AAACATACCAGCTA-1          1       3261          979\n1_AAACATACCATGCA-1          1        746          362\n1_AAACATACCTCGCT-1          1       3519          866\n1_AAACATACCTGGTA-1          1       3328         1137\n1_AAACATACCTGTAG-1          1        484          281\n1_AAACATACGATGAA-1          1       1991          650\n1_AAACATACGCCAAT-1          1       1186          447\n```\n:::\n\n```{.r .cell-code}\ntail(merged_seurat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                   orig.ident nCount_RNA nFeature_RNA\n2_TTTGCATGCATGAC-1          2       1395          492\n2_TTTGCATGCCTGAA-1          2       1102          483\n2_TTTGCATGCCTGTC-1          2       2334          841\n2_TTTGCATGCCTTAT-1          2       2766          856\n2_TTTGCATGCGACAT-1          2        620          295\n2_TTTGCATGCTAAGC-1          2       1641          545\n2_TTTGCATGGGACGA-1          2       1233          518\n2_TTTGCATGGTGAGG-1          2       1084          469\n2_TTTGCATGGTTTGG-1          2        818          432\n2_TTTGCATGTCTTAC-1          2       1104          438\n```\n:::\n:::\n\n\n可以发现，此时的细胞barcode按照我们读取10X文件的顺序，被分别赋予“1, 2, 3...”的前缀。为了后续便于识别细胞来自哪个样本，我们需要通过`gsub()`将这些前缀更改为样本名称（\"ctrl\" 和 “stim”）。\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-4_6c6797404dbf2a431e2becf7048e46cd'}\n\n```{.r .cell-code}\ncolnames(merged_seurat) <- gsub(pattern = \"^1_\", \n                                x = colnames(merged_seurat), \n                                replacement = \"ctrl_\")\ncolnames(merged_seurat) <- gsub(pattern = \"^2_\", \n                                x = colnames(merged_seurat), \n                                replacement = \"stim_\")\n\n# Re-check that the merged object has the appropriate sample-specific prefixes\nhead(merged_seurat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA\nctrl_AAACATACAATGCC-1          1       2344          874\nctrl_AAACATACATTTCC-1          1       3125          896\nctrl_AAACATACCAGAAA-1          1       2578          725\nctrl_AAACATACCAGCTA-1          1       3261          979\nctrl_AAACATACCATGCA-1          1        746          362\nctrl_AAACATACCTCGCT-1          1       3519          866\nctrl_AAACATACCTGGTA-1          1       3328         1137\nctrl_AAACATACCTGTAG-1          1        484          281\nctrl_AAACATACGATGAA-1          1       1991          650\nctrl_AAACATACGCCAAT-1          1       1186          447\n```\n:::\n\n```{.r .cell-code}\ntail(merged_seurat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA\nstim_TTTGCATGCATGAC-1          2       1395          492\nstim_TTTGCATGCCTGAA-1          2       1102          483\nstim_TTTGCATGCCTGTC-1          2       2334          841\nstim_TTTGCATGCCTTAT-1          2       2766          856\nstim_TTTGCATGCGACAT-1          2        620          295\nstim_TTTGCATGCTAAGC-1          2       1641          545\nstim_TTTGCATGGGACGA-1          2       1233          518\nstim_TTTGCATGGTGAGG-1          2       1084          469\nstim_TTTGCATGGTTTGG-1          2        818          432\nstim_TTTGCATGTCTTAC-1          2       1104          438\n```\n:::\n:::\n\n\n现在可以看到细胞barcode的前缀已被更改成了样本名称。接下来我们还可以进一步将样本信息添加到meta.data的新的一列“sample”中:\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-5_706809f0277986a02b2cf48eb3ea2738'}\n\n```{.r .cell-code}\n# Create sample column\nlibrary(stringr)\nmerged_seurat$sample <- str_split(rownames(merged_seurat@meta.data),\n                                  \"_\",\n                                  simplify = TRUE)\nhead(merged_seurat)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      orig.ident nCount_RNA nFeature_RNA sample\nctrl_AAACATACAATGCC-1          1       2344          874   ctrl\nctrl_AAACATACATTTCC-1          1       3125          896   ctrl\nctrl_AAACATACCAGAAA-1          1       2578          725   ctrl\nctrl_AAACATACCAGCTA-1          1       3261          979   ctrl\nctrl_AAACATACCATGCA-1          1        746          362   ctrl\nctrl_AAACATACCTCGCT-1          1       3519          866   ctrl\nctrl_AAACATACCTGGTA-1          1       3328         1137   ctrl\nctrl_AAACATACCTGTAG-1          1        484          281   ctrl\nctrl_AAACATACGATGAA-1          1       1991          650   ctrl\nctrl_AAACATACGCCAAT-1          1       1186          447   ctrl\n```\n:::\n\n```{.r .cell-code}\ntable(merged_seurat$sample)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n ctrl  stim \n15688 15756 \n```\n:::\n:::\n\n\n## 保存Seurat对象\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-6_5d230585bb7a33586cc26c779a7809b5'}\n\n```{.r .cell-code}\n# 保存\nsaveRDS(merged_seurat, file = \"output/scRNA-seq_online/merged_seurat.rds\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell hash='03_SC_quality_control-setup_cache/html/unnamed-chunk-7_f4528c8bb40aaffa1abbd8c9eda529dc'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] stringr_1.5.1      Seurat_5.0.1       SeuratObject_5.0.1 sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] deldir_2.0-2           pbapply_1.7-2          gridExtra_2.3         \n  [4] rlang_1.1.3            magrittr_2.0.3         RcppAnnoy_0.0.21      \n  [7] spatstat.geom_3.2-7    matrixStats_1.2.0      ggridges_0.5.5        \n [10] compiler_4.3.2         png_0.1-8              vctrs_0.6.5           \n [13] reshape2_1.4.4         pkgconfig_2.0.3        fastmap_1.1.1         \n [16] ellipsis_0.3.2         utf8_1.2.4             promises_1.2.1        \n [19] rmarkdown_2.25         purrr_1.0.2            xfun_0.41             \n [22] jsonlite_1.8.8         goftest_1.2-3          later_1.3.2           \n [25] spatstat.utils_3.0-4   irlba_2.3.5.1          parallel_4.3.2        \n [28] cluster_2.1.6          R6_2.5.1               ica_1.0-3             \n [31] stringi_1.8.3          RColorBrewer_1.1-3     spatstat.data_3.0-4   \n [34] reticulate_1.34.0      parallelly_1.36.0      lmtest_0.9-40         \n [37] scattermore_1.2        Rcpp_1.0.12            knitr_1.45            \n [40] tensor_1.5             future.apply_1.11.1    zoo_1.8-12            \n [43] R.utils_2.12.3         sctransform_0.4.1      httpuv_1.6.13         \n [46] Matrix_1.6-5           splines_4.3.2          igraph_1.6.0          \n [49] tidyselect_1.2.0       abind_1.4-5            rstudioapi_0.15.0     \n [52] yaml_2.3.8             spatstat.random_3.2-2  codetools_0.2-19      \n [55] miniUI_0.1.1.1         spatstat.explore_3.2-5 listenv_0.9.0         \n [58] lattice_0.22-5         tibble_3.2.1           plyr_1.8.9            \n [61] shiny_1.8.0            ROCR_1.0-11            evaluate_0.23         \n [64] Rtsne_0.17             future_1.33.1          fastDummies_1.7.3     \n [67] survival_3.5-7         polyclip_1.10-6        fitdistrplus_1.1-11   \n [70] pillar_1.9.0           KernSmooth_2.23-22     plotly_4.10.4         \n [73] generics_0.1.3         RcppHNSW_0.5.0         ggplot2_3.4.4         \n [76] munsell_0.5.0          scales_1.3.0           globals_0.16.2        \n [79] xtable_1.8-4           glue_1.7.0             lazyeval_0.2.2        \n [82] tools_4.3.2            data.table_1.14.10     RSpectra_0.16-1       \n [85] RANN_2.6.1             leiden_0.4.3.1         dotCall64_1.1-1       \n [88] cowplot_1.1.2          grid_4.3.2             tidyr_1.3.0           \n [91] colorspace_2.1-0       nlme_3.1-164           patchwork_1.2.0       \n [94] cli_3.6.2              spatstat.sparse_3.0-3  spam_2.10-0           \n [97] fansi_1.0.6            viridisLite_0.4.2      dplyr_1.1.4           \n[100] uwot_0.1.16            gtable_0.3.4           R.methodsS3_1.8.2     \n[103] digest_0.6.34          progressr_0.14.0       ggrepel_0.9.5         \n[106] htmlwidgets_1.6.4      R.oo_1.25.0            htmltools_0.5.7       \n[109] lifecycle_1.0.4        httr_1.4.7             mime_0.12             \n[112] MASS_7.3-60.0.1       \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
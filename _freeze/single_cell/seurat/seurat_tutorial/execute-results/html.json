{
  "hash": "20d5eb63858072eadf9a5a2bb8dec0bf",
  "result": {
    "markdown": "---\neditor_options: \n  chunk_output_type: console\n---\n\n\n# Seurat细胞分群官方教程 {#sec-seurat_cell_clustering_official_tutorial}\n\n> 原文：[*Seurat - Guided Clustering Tutorial*](https://satijalab.org/seurat/articles/pbmc3k_tutorial)\n>\n> 原文发布日期：2023年10月31日\n\n## Seurat对象构建\n\n数据源是来自10X Genomics的**外周血单核细胞（peripheral blood mononuclear cells，PBMC）数据集**。该数据集基于Illumina NextSeq 500平台对2700个单细胞进行了测序。数据可在[此链接](https://cf.10xgenomics.com/samples/cell/pbmc3k/pbmc3k_filtered_gene_bc_matrices.tar.gz)下载。\n\n![10X数据的标准文件](images/2023-11-20%2013.40.27.png){width=\"449\"}\n\n该数据已经通过[cellranger](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/what-is-cell-ranger)上游数据处理流程的处理，返回的数据是一个由唯一分子识别（unique molecular identified，UMI）构成的count矩阵。该矩阵中的值表示在每个细胞（列）中检测到的每个特征（即基因；行）的分子数量。数据以10X的标准形式储存，包括：\n\n-   barcode文件：细胞条码。\n\n    ![](images/2023-11-20%2014.04.06.png){width=\"161\"}\n\n-   genes文件：基因名文件。\n\n    ![](images/2023-11-20%2014.04.15.png){width=\"229\"}\n\n-   matrix文件：表达矩阵（稀疏矩阵）。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-1_3b646a7e4b1c2ed5ab007863cec18426'}\n\n```{.r .cell-code}\nlibrary(Seurat)\n\n# 读取PBMC数据集\npbmc.data <- Read10X(data.dir = \"data/seurat_official/filtered_gene_bc_matrices/hg19\")\n# Initialize the Seurat object with the raw (non-normalized data).\npbmc <- CreateSeuratObject(counts = pbmc.data, \n                           project = \"pbmc3k\", \n                           min.cells = 3, \n                           min.features = 200)\npbmc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n13714 features across 2700 samples within 1 assay \nActive assay: RNA (13714 features, 0 variable features)\n 1 layer present: counts\n```\n:::\n:::\n\n\n::: callout-caution\n有的cellranger处理数据以[h5文件格式](https://support.10xgenomics.com/single-cell-gene-expression/software/pipelines/latest/advanced/h5_matrices)输出，需要使用seurat中的[`Read10X_h5()`](https://satijalab.org/seurat/reference/read10x_h5)函数读取该格式。\n:::\n\n## 质控\n\n在 [@ilicic2016] 中概括了目前常用的单细胞数据分析中识别低质量细胞的标准，包括：\n\n-   The **number of unique genes** detected in each cell.\n\n    -   **Low-quality cells** or **empty droplets** will often have very few genes\n\n    -   **Cell doublets** or multiplets may exhibit an aberrantly high gene count\n\n-   Similarly, the total number of molecules detected within a cell (correlates strongly with unique genes)\n\n-   The percentage of reads that map to the mitochondrial genome\n\n    -   Low-quality / dying cells often exhibit extensive mitochondrial contamination\n\n    -   We calculate mitochondrial QC metrics with the `PercentageFeatureSet()` function, which calculates the percentage of counts originating from a set of features\n\n    -   We use the set of all genes starting with `MT-` as a set of mitochondrial genes\n\n### 计算线粒体基因比例\n\n通过`PercentageFeatureSet()`函数计算每个细胞中线粒体基因的比例，并将其返回到Seurat对象的`meta.data`中，形成一个新列\"percent.mt\"。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-2_07e0e563e9f40722f23de26b873f4a9e'}\n\n```{.r .cell-code}\npbmc[[\"percent.mt\"]] <- PercentageFeatureSet(pbmc, pattern = \"^MT-\")\n# Show QC metrics for the first 5 cells\nhead(pbmc@meta.data, 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 orig.ident nCount_RNA nFeature_RNA percent.mt\nAAACATACAACCAC-1     pbmc3k       2419          779  3.0177759\nAAACATTGAGCTAC-1     pbmc3k       4903         1352  3.7935958\nAAACATTGATCAGC-1     pbmc3k       3147         1129  0.8897363\nAAACCGTGCTTCCG-1     pbmc3k       2639          960  1.7430845\nAAACCGTGTATGCG-1     pbmc3k        980          521  1.2244898\n```\n:::\n:::\n\n\n### 可视化质控指标\n\n通过`VlnPlot`函数绘制小提琴图展示每个细胞中UMI（nCount_RNA）、基因（percent.mt）和线粒体基因（percent.mt）的数量。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-3_d03b7ba047e36ea099482954ebca6370'}\n\n```{.r .cell-code}\n# Visualize QC metrics as a violin plot\nVlnPlot(pbmc, \n        features = c(\"nFeature_RNA\", \"nCount_RNA\", \"percent.mt\"), \n        ncol = 3)\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-3-1.png){width=672}\n:::\n:::\n\n\n通过`FeatureScatter`函数展示UMI和线粒体基因数量多关系、UMI和总基因数量多关系。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-4_1ad2434798ee831bce64ae2574e1aaba'}\n\n```{.r .cell-code}\nplot1 <- FeatureScatter(pbmc, \n                        feature1 = \"nCount_RNA\", \n                        feature2 = \"percent.mt\")\nplot2 <- FeatureScatter(pbmc, \n                        feature1 = \"nCount_RNA\", \n                        feature2 = \"nFeature_RNA\")\nplot1 + plot2\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-4-1.png){width=672}\n:::\n:::\n\n\n### 过滤细胞\n\n在本案例中使用的质控标准：\n\n-   filter cells that have **unique feature counts over 2,500 or less than 200**\n\n-   filter cells that have **\\>5% mitochondrial counts**\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-5_dfcbf4d8d9933fdd0cffca2124c419ed'}\n\n```{.r .cell-code}\npbmc <- subset(pbmc, \n               subset = nFeature_RNA > 200 & nFeature_RNA < 2500 & percent.mt < 5)\npbmc\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAn object of class Seurat \n13714 features across 2638 samples within 1 assay \nActive assay: RNA (13714 features, 0 variable features)\n 1 layer present: counts\n```\n:::\n:::\n\n\n## 标准化（Normalizing）\n\nAfter removing unwanted cells from the dataset, the next step is to normalize the data. By default, we employ a **global-scaling normalization method \"LogNormalize\"** that normalizes the feature expression measurements for each cell by the total expression, multiplies this by a **scale factor** (10,000 by default), and log-transforms the result. 标准化的方法是每个细胞中的基因表达量除以该细胞的基因总表达量，然后乘以比例因子（通常是1000），最后将这个结果取对数。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-6_7a0340d5c3717543be1a13f1700328ba'}\n\n```{.r .cell-code}\npbmc <- NormalizeData(pbmc, \n                      normalization.method = \"LogNormalize\", \n                      scale.factor = 10000)\n```\n:::\n\n\nIn Seurat v5, Normalized values are stored in `pbmc[[\"RNA\"]]$data`：\n\n![](images/截屏2023-11-21%2011.17.58.png){width=\"599\"}\n\n::: callout-tip\nWhile this method of normalization is standard and widely used in scRNA-seq analysis, global-scaling relies on an **assumption that each cell originally contains the same number of RNA molecules**. We and others have developed alternative workflows for the single cell preprocessing that do not make these assumptions.\n\nSCTransform() normalization workflow 就是这样的一种工作流. 针对这一方法的原始文献：[@choudhary2022] 。基于`SCTransform`的数据标准化流程中，无需使用上面的`NormalizeData`, 和下面的`FindVariableFeatures`和`ScaleData`函数。详见后面的章节（ @sec-sctransform ）。\n:::\n\n## 识别高变基因（highly variable features） {#sec-highly_variable_features}\n\nWe next calculate a subset of features that exhibit **high cell-to-cell variation** in the dataset (i.e, they are highly expressed in some cells, and lowly expressed in others). We and others [@brennecke2013] have found that focusing on these genes in downstream analysis helps to **highlight biological signal** in single-cell datasets.\n\nOur procedure in Seurat is described in detail here [@stuart2019] , and improves on previous versions by directly modeling the mean-variance relationship inherent in single-cell data, and is implemented in the `FindVariableFeatures()` function. **By default, we return 2,000 features per dataset**. These will be used in downstream analysis, like PCA.\n\n\n::: {#fig-识别高变基因 .cell layout-ncol=\"2\" hash='seurat_tutorial_cache/html/fig-识别高变基因_841aacf3fb43e60a8980084b4498df46'}\n\n```{.r .cell-code}\npbmc <- FindVariableFeatures(pbmc, \n                             selection.method = \"vst\", \n                             nfeatures = 2000)\n\n# Identify the 10 most highly variable genes\ntop10 <- head(VariableFeatures(pbmc), 10)\n\n# plot variable features with and without labels\nplot1 <- VariableFeaturePlot(pbmc)\nplot1\nLabelPoints(plot = plot1, points = top10, repel = TRUE)\n```\n\n::: {.cell-output-display}\n![前2000个高变基因](seurat_tutorial_files/figure-html/fig-识别高变基因-1.png){#fig-识别高变基因-1 width=672}\n:::\n\n::: {.cell-output-display}\n![前2000个高变基因（标注了前10个高变基因）](seurat_tutorial_files/figure-html/fig-识别高变基因-2.png){#fig-识别高变基因-2 width=672}\n:::\n\n识别高变基因\n:::\n\n\n## 归一化（Scaling） {#sec-scaledata}\n\nNext, we apply a **linear transformation** ('scaling') that is a standard pre-processing step **prior to dimensional reduction** techniques like PCA. The `ScaleData()` function:\n\n-   Shifts the expression of each gene, so that **the mean expression across cells is 0（每个基因在所有细胞的平均表达量为0）**\n\n-   Scales the expression of each gene, so that **the variance across cells is 1.** This step gives equal weight in downstream analyses, so that **highly-expressed genes do not dominate**\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-8_a2d38a6579018310d312e22ba2a0dace'}\n\n```{.r .cell-code}\npbmc <- ScaleData(pbmc)\n```\n:::\n\n\nThe results of this are stored in `pbmc[[\"RNA\"]]$scale.data`:\n\n![](images/2023-11-21%2012.04.27.png)\n\n`ScaleData`函数默认情况下使用`FindVariableFeatures`函数确定的高变基因作为scale依据。可以通过`features`参数来自定义scale依据，比如这里我们可以让所有基因都参与scale：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-9_9f45b8f1de0441d6a244fe4c48e23af5'}\n\n```{.r .cell-code}\n# 不运行\nall.genes <- rownames(pbmc)\npbmc <- ScaleData(pbmc, features = all.genes)\n```\n:::\n\n\n::: callout-tip\n## 去除单细胞数据中的非期望变异来源\n\nIn Seurat, we also use the `ScaleData()` function to remove unwanted sources of variation from a single-cell dataset. For example, we could 'regress out' heterogeneity associated with (for example) cell cycle stage ( @sec-Elimination_of_cell_cycle_effects ), or mitochondrial contamination i.e.:\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-10_2ff592264acb0c2d670aef7190c6f22f'}\n\n```{.r .cell-code}\npbmc <- ScaleData(pbmc, vars.to.regress = \"percent.mt\")\n```\n:::\n\n\nHowever, particularly for advanced users who would like to use this functionality, **we strongly recommend the use of our new normalization workflow, `SCTransform()`**. The method is described in our paper [@choudhary2022a]. As with `ScaleData()`, the function `SCTransform()` also includes a `vars.to.regress` parameter ( @sec-perform_sctransform ). \n:::\n\n## 线性降维\n\nNext we perform PCA on the scaled data. By default, **only the previously determined variable features are used as input,** but can be defined using `features` argument if you wish to choose a different subset (if you do want to use a custom subset of features, make sure you pass these to `ScaleData` first).\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-11_8ac4bd088186ef8b33b82ba291959b33'}\n\n```{.r .cell-code}\npbmc <- RunPCA(pbmc, \n               features = VariableFeatures(object = pbmc))\n```\n:::\n\n\nFor the first principal components, Seurat outputs a list of genes with the most positive and negative loadings, representing modules of genes that exhibit either correlation (or anti-correlation) across single-cells in the dataset.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-12_43b495d85ecaf24d4d3ed11f0708baf6'}\n\n```{.r .cell-code}\n# PC_ 1 \n# Positive:  CST3, TYROBP, LST1, AIF1, FTL, FTH1, LYZ, FCN1, S100A9, TYMP \n# \t   FCER1G, CFD, LGALS1, LGALS2, SERPINA1, S100A8, CTSS, IFITM3, SPI1, CFP \n# \t   PSAP, IFI30, COTL1, SAT1, S100A11, NPC2, GRN, LGALS3, GSTP1, PYCARD \n# Negative:  MALAT1, LTB, IL32, IL7R, CD2, B2M, ACAP1, CTSW, STK17A, CD27 \n# \t   CD247, CCL5, GIMAP5, GZMA, AQP3, CST7, TRAF3IP3, SELL, GZMK, HOPX \n# \t   MAL, MYC, ITM2A, ETS1, LYAR, GIMAP7, KLRG1, NKG7, ZAP70, BEX2 \n```\n:::\n\n\n完成PCA分析的Seurat对象：\n\n![](images/截屏2023-11-21%2015.04.58.png)\n\n### 降维可视化\n\nSeurat provides several useful ways of visualizing both cells and features that define the PCA, including `VizDimReduction()`, `DimPlot()`, and `DimHeatmap()` .\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-13_2616cc484150c482ad5e4a2895baaf39'}\n\n```{.r .cell-code}\nVizDimLoadings(pbmc, dims = 1:2, reduction = \"pca\")\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-14_81db6ff90e35f80e6120575d331b06ba'}\n\n```{.r .cell-code}\nDimPlot(pbmc, reduction = \"pca\") + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n:::\n\n\nIn particular `DimHeatmap()` allows for easy exploration of the primary sources of heterogeneity in a dataset, and can be useful when trying to **decide which PCs to include for further downstream analyses**. **Both cells and features are ordered according to their PCA scores**.\n\nSetting `cells` to a number, will plot the 'extreme' cells on both ends of the spectrum, which dramatically speeds plotting for large datasets. Though clearly a supervised analysis, we find this to be a valuable tool for exploring correlated feature sets.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-15_0ca22b5fce3afe2ef9f60c94ae681540'}\n\n```{.r .cell-code}\nDimHeatmap(pbmc, dims = 1, cells = 1000, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n通过`dims`参数指定一个范围内的主成分，可以用来决定在后续的分析中应该包括哪些主成分。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-16_528759ff6a19d1021dfea40c4476e76b'}\n\n```{.r .cell-code}\nDimHeatmap(pbmc, dims = 1:15, cells = 1000, balanced = TRUE)\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n### 决定后续分析的主成分 {#sec-Determine_pcs_for_subsequent_analyses}\n\nTo overcome the extensive technical noise in any single feature for scRNA-seq data, **Seurat clusters cells based on their PCA scores**, with each PC essentially representing a 'metafeature' that combines information across a correlated feature set. The top principal components therefore represent a robust compression of the dataset. However, how many components should we choose to include? 10? 20? 100?\n\nIn Macosko *et al* [@macosko2015], we implemented a resampling test inspired by the JackStraw procedure. While still available in Seurat, this is a slow and computationally expensive procedure, and we is no longer routinely used in single cell analysis.\n\nAn alternative heuristic method generates an '**Elbow plot**': a ranking of principle components based on the percentage of variance explained by each one. In this example, w**e can observe an 'elbow' around PC9-10, suggesting that the majority of true signal is captured in the first 10 PCs**.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-17_c4f190b4a1a6a9e4bb222b03d5ea2452'}\n\n```{.r .cell-code}\nElbowPlot(pbmc)\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-17-1.png){width=672}\n:::\n:::\n\n\n::: {.callout-tip collapse=\"true\"}\n## Identifying the true dimensionality of a dataset\n\n**Identifying the true dimensionality of a dataset can be challenging/uncertain for the user.** We therefore suggest these multiple approaches for users. The first is more supervised, exploring PCs to determine relevant sources of heterogeneity, and could be used in conjunction with GSEA for example. The second (`ElbowPlot`). The third is a heuristic that is commonly used, and can be calculated instantly. In this example, we might have been justified in choosing anything between PC 7-12 as a cutoff.\n\nWe chose 10 here, but encourage users to consider the following:\n\n-   Dendritic cell and NK aficionados may recognize that genes strongly associated with PCs 12 and 13 define rare immune subsets (i.e. MZB1 is a marker for plasmacytoid DCs). However, these groups are so rare, they are difficult to distinguish from background noise for a dataset of this size without prior knowledge.\n\n-   We encourage users to repeat downstream analyses with a different number of PCs (10, 15, or even 50!). As you will observe, **the results often do not differ dramatically.**\n\n-   We advise users to **err on the higher side when choosing this parameter（建议选择偏高的主成分数量）**. For example, performing downstream analyses with only 5 PCs does significantly and adversely affect results.\n:::\n\n## 细胞聚类（cluster） {#sec-clustering_seurat}\n\nSeurat applies a **graph-based clustering approach**, building upon initial strategies in Macosko *et al* [@macosko2015a]. Importantly, the *distance metric* which drives the clustering analysis (based on previously identified PCs) remains the same. However, our approach to partitioning the cellular distance matrix into clusters has dramatically improved. Our approach was heavily inspired by recent manuscripts which applied graph-based clustering approaches to scRNA-seq data and CyTOF data [@levine2015]. Briefly, these methods embed cells in a graph structure - for example a **K-nearest neighbor (KNN) graph**, with edges drawn between cells with similar feature expression patterns, and then attempt to partition this graph into highly interconnected 'quasi-cliques' or 'communities'.\n\nAs in PhenoGraph, we first construct a KNN graph based on the euclidean distance in PCA space, and refine the edge weights between any two cells based on the shared overlap in their local neighborhoods (Jaccard similarity). This step is performed using the **`FindNeighbors()`** function, and takes as input the **previously defined dimensionality of the dataset** (first 10 PCs).\n\nTo cluster the cells, we next apply modularity optimization techniques such as the Louvain algorithm (default) or SLM [@blondel2008], to iteratively group cells together, with the goal of optimizing the standard modularity function. The **`FindClusters()`** function implements this procedure, and contains a **resolution parameter** that sets the 'granularity' of the downstream clustering, with **increased values leading to a greater number of clusters**. We find that setting this parameter **between 0.4-1.2** typically returns good results for single-cell datasets of **around 3K cells**. Optimal resolution often increases for larger datasets.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-18_a9d668da31c33e5559d243b8ddd29a27'}\n\n```{.r .cell-code}\npbmc <- FindNeighbors(pbmc, dims = 1:10)\npbmc <- FindClusters(pbmc, resolution = 0.5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nModularity Optimizer version 1.3.0 by Ludo Waltman and Nees Jan van Eck\n\nNumber of nodes: 2638\nNumber of edges: 95905\n\nRunning Louvain algorithm...\nMaximum modularity in 10 random starts: 0.8735\nNumber of communities: 9\nElapsed time: 0 seconds\n```\n:::\n:::\n\n\nThe clusters can be found using the `Idents()` function. 或者通过`seurat@active.ident`获取。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-19_f4735efd5619500afdb4770a894dba58'}\n\n```{.r .cell-code}\n# Look at cluster IDs of the first 5 cells\nhead(Idents(pbmc), 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n               0                3                2                1 \nAAACCGTGTATGCG-1 \n               6 \nLevels: 0 1 2 3 4 5 6 7 8\n```\n:::\n\n```{.r .cell-code}\n# 等价于：head(pbmc@active.ident, 5)\n# 类似于：pbmc@meta.data[[\"seurat_clusters\"]][1:5]\n```\n:::\n\n\n现在的meta.data中出现了RNA_snn_res.0.5列和seurat_clusters列，分别代表了在分辨率为0.5的情况下的细胞cluster id以及目前激活的cluster id。由于目前只有一个0.5的分辨率，所以这两列是一样的。\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-20_629124c70c4a5355b739ab3821fa0624'}\n\n```{.r .cell-code}\nhead(pbmc@meta.data)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                 orig.ident nCount_RNA nFeature_RNA percent.mt RNA_snn_res.0.5\nAAACATACAACCAC-1     pbmc3k       2419          779  3.0177759               0\nAAACATTGAGCTAC-1     pbmc3k       4903         1352  3.7935958               3\nAAACATTGATCAGC-1     pbmc3k       3147         1129  0.8897363               2\nAAACCGTGCTTCCG-1     pbmc3k       2639          960  1.7430845               1\nAAACCGTGTATGCG-1     pbmc3k        980          521  1.2244898               6\nAAACGCACTGGTAC-1     pbmc3k       2163          781  1.6643551               2\n                 seurat_clusters\nAAACATACAACCAC-1               0\nAAACATTGAGCTAC-1               3\nAAACATTGATCAGC-1               2\nAAACCGTGCTTCCG-1               1\nAAACCGTGTATGCG-1               6\nAAACGCACTGGTAC-1               2\n```\n:::\n:::\n\n\n## 非线性降维\n\nSeurat offers several non-linear dimensional reduction techniques, such as **tSNE** and **UMAP**, to visualize and explore these datasets. The goal of these algorithms is to learn underlying structure in the dataset, in order to **place similar cells together** in low-dimensional space. Therefore, cells that are grouped together within graph-based clusters determined above should co-localize on these dimension reduction plots.\n\nWhile we and others have routinely found 2D visualization techniques like tSNE and UMAP to be valuable tools for exploring datasets, all visualization techniques have limitations, and cannot fully represent the complexity of the underlying data. In particular, these methods aim to preserve local distances in the dataset (i.e. ensuring that cells with very similar gene expression profiles co-localize), but often do not preserve more global relationships. **We encourage users to leverage techniques like UMAP for visualization**, but to avoid drawing biological conclusions solely on the basis of visualization techniques.\n\n::: callout-caution\n需要先进行线性降维`RunPCA`，再进行非线性降维`RunUMAP`。因为`RunUMAP`默认将PCA的结果作为输入（`reduction = \"pca\"`）。\n:::\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-21_65da30ecac7a217cf74f4c03ba2dcbc6'}\n\n```{.r .cell-code}\npbmc <- RunUMAP(pbmc, reduction = \"pca\", dims = 1:10)\n```\n:::\n\n\n可以看到在Seurat对象的reductions中多了umap项：\n\n![](images/截屏2023-11-21%2015.14.18.png)\n\n### 非线性降维可视化\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-22_73b1f061bc72bfca59342a67a0d6efd0'}\n\n```{.r .cell-code}\nDimPlot(pbmc, reduction = \"umap\")\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-22-1.png){width=672}\n:::\n:::\n\n\nYou can save the object at this point so that it can easily be loaded back in without having to rerun the computationally intensive steps performed above, or easily shared with collaborators.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-23_ddc2c590f4d5c2ae5e3fb6d808f6b5bc'}\n\n```{.r .cell-code}\nsaveRDS(pbmc, file = \"output/seurat_official/pbmc_tutorial.rds\")\n```\n:::\n\n\n## 寻找细胞群间的差异表达基因（cluster biomarkers） {#sec-seurat_cluster_biomarkers}\n\nSeurat can help you find markers that define clusters via **differential expression (DE)**. By default, it identifies positive and negative markers of a single cluster (**specified in `ident.1`**), **compared to all other cells**. `FindAllMarkers()` automates this process for all clusters, but you can also test groups of clusters vs. each other, or against all cells.\n\n::: callout-caution\nIn Seurat v5, we use the **presto package** (as described [here](https://www.biorxiv.org/content/10.1101/653253v1) and available for installation [here](https://github.com/immunogenomics/presto)), to dramatically improve the speed of DE analysis, particularly for large datasets.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-24_f5df49f361f1cc176eb36965ec9e495d'}\n\n```{.r .cell-code}\ndevtools::install_github('immunogenomics/presto')\n```\n:::\n\n\nFor users who are not using presto, you can examine the documentation for this function ([`?FindMarkers`](https://satijalab.org/seurat/reference/findmarkers)) to explore the `min.pct` and `logfc.threshold` parameters, which can be increased in order to increase the speed of DE testing.\n:::\n\nFind all markers of cluster 2：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-25_66bf28d363a1dec24425a9c9a1982308'}\n\n```{.r .cell-code}\ncluster2.markers <- FindMarkers(pbmc, ident.1 = 2)\nhead(cluster2.markers, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n            p_val avg_log2FC pct.1 pct.2    p_val_adj\nLTB  1.709675e-83   1.330256 0.982 0.647 2.344648e-79\nIL32 5.076510e-83   1.242930 0.947 0.471 6.961926e-79\nLDHB 2.467055e-68   1.044820 0.967 0.615 3.383320e-64\nCD3D 1.817480e-66   1.058609 0.920 0.438 2.492492e-62\nIL7R 8.698894e-61   1.389909 0.744 0.333 1.192966e-56\n```\n:::\n:::\n\n\nFind all markers distinguishing cluster 5 from clusters 0 and 3：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-26_656efe765281281756394dad6e83d1a6'}\n\n```{.r .cell-code}\ncluster5.markers <- FindMarkers(pbmc, ident.1 = 5, ident.2 = c(0, 3))\nhead(cluster5.markers, n = 5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                      p_val avg_log2FC pct.1 pct.2     p_val_adj\nFCGR3A        5.972471e-204   6.795991 0.975 0.041 8.190647e-200\nIFITM3        5.671364e-195   6.201036 0.975 0.048 7.777708e-191\nCFD           2.389538e-193   6.081028 0.937 0.038 3.277012e-189\nCD68          1.800066e-189   5.472200 0.925 0.036 2.468611e-185\nRP11-290F20.3 6.852416e-189   6.390800 0.843 0.015 9.397404e-185\n```\n:::\n:::\n\n\nFind markers for every cluster compared to all remaining cells, report only the positive ones：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-27_5853f4d447b5e2dd69ddb952066cf840'}\n\n```{.r .cell-code}\npbmc.markers <- FindAllMarkers(pbmc, only.pos = TRUE)\nlibrary(dplyr)\npbmc.markers %>%\n    group_by(cluster) %>%\n    filter(avg_log2FC > 1)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n# A tibble: 7,024 × 7\n# Groups:   cluster [9]\n       p_val avg_log2FC pct.1 pct.2 p_val_adj cluster gene     \n       <dbl>      <dbl> <dbl> <dbl>     <dbl> <fct>   <chr>    \n 1 5.32e-114       1.19 0.912 0.591 7.29e-110 0       LDHB     \n 2 1.31e- 83       2.35 0.439 0.11  1.79e- 79 0       CCR7     \n 3 2.61e- 78       1.06 0.85  0.403 3.58e- 74 0       CD3D     \n 4 5.89e- 55       1.03 0.731 0.398 8.07e- 51 0       CD3E     \n 5 3.91e- 50       2.11 0.338 0.104 5.36e- 46 0       LEF1     \n 6 2.53e- 47       1.23 0.624 0.36  3.47e- 43 0       NOSIP    \n 7 5.11e- 46       2.04 0.335 0.109 7.01e- 42 0       PRKCQ-AS1\n 8 5.49e- 43       1.51 0.438 0.186 7.52e- 39 0       PIK3IP1  \n 9 9.17e- 41       2.73 0.199 0.04  1.26e- 36 0       FHIT     \n10 1.26e- 33       1.32 0.39  0.177 1.72e- 29 0       TCF7     \n# ℹ 7,014 more rows\n```\n:::\n:::\n\n\nSeurat has several tests for differential expression which can be set with the `test.use` parameter (see @sec-perform_de_analysis for details). 默认是用的\"wilcox\"方法。For example, the ROC test（`test.use = \"roc\"`） returns the 'classification power' for any individual marker (ranging from 0 - random, to 1 - perfect)：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-28_5644535bdfbf12ebc91b387175bdda87'}\n\n```{.r .cell-code}\ncluster0.markers <- FindMarkers(pbmc, \n                                ident.1 = 0, \n                                logfc.threshold = 0.25, \n                                test.use = \"roc\", \n                                only.pos = TRUE)\nhead(cluster0.markers)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n      myAUC  avg_diff power avg_log2FC pct.1 pct.2\nRPS6  0.828 0.4737648 0.656  0.6898595 1.000 0.995\nRPS12 0.827 0.5065637 0.654  0.7396535 1.000 0.991\nRPL32 0.822 0.4338741 0.644  0.6330085 0.999 0.995\nRPS27 0.819 0.4971128 0.638  0.7261693 0.999 0.992\nRPS14 0.814 0.4354967 0.628  0.6367519 1.000 0.994\nRPS25 0.809 0.5345947 0.618  0.7911714 0.997 0.975\n```\n:::\n:::\n\n\n## 可视化marker基因的表达\n\nWe include several tools for visualizing marker expression. `VlnPlot()` (shows expression probability distributions across clusters), and `FeaturePlot()` (visualizes feature expression on a tSNE or PCA plot) are our most commonly used visualizations. We also suggest exploring `RidgePlot()`, `CellScatter()`, and `DotPlot()` as additional methods to view your dataset.\n\n### 小提琴图：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-29_271b7871dd18c41d80ecf1834a36b22f'}\n\n```{.r .cell-code}\nVlnPlot(pbmc, features = c(\"MS4A1\", \"CD79A\"))\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-29-1.png){width=672}\n:::\n:::\n\n\nYou can plot raw counts as well（`layer = \"counts\"`）：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-30_1b344cd815ec5bd137a87c629fdae57b'}\n\n```{.r .cell-code}\nVlnPlot(pbmc, \n        features = c(\"NKG7\", \"PF4\"), \n        layer = \"counts\", # Layer to pull expression data from (e.g. \"counts\" or \"data\")\n        log = TRUE)\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-30-1.png){width=672}\n:::\n:::\n\n\n### UMAP图：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-31_b568358fb54d8974bb24e1d327c5e483'}\n\n```{.r .cell-code}\nFeaturePlot(pbmc,\n            features = c(\"MS4A1\", \"GNLY\", \"CD3E\", \"CD14\", \"FCER1A\", \"FCGR3A\", \"LYZ\",\n                         \"PPBP\", \"CD8A\"))\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-31-1.png){width=672}\n:::\n:::\n\n\n### 热图：\n\n`DoHeatmap()` generates an expression heatmap for given cells and features. In this case, we are plotting the top 20 markers (or all markers if less than 20) for each cluster.\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-32_7a2189a3ec821fdedc72854657cce50c'}\n\n```{.r .cell-code}\npbmc.markers %>%\n  group_by(cluster) %>%\n  filter(avg_log2FC > 1) %>%\n  slice_head(n = 10) %>% # 选取开头的10行\n  ungroup() -> top10\nDoHeatmap(pbmc, features = top10$gene) + NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-32-1.png){width=672}\n:::\n:::\n\n\n## 细胞注释\n\n本案例使用的细胞注释：\n\n| Cluster ID | Markers       | Cell Type    |\n|:-----------|:--------------|:-------------|\n| 0          | IL7R, CCR7    | Naive CD4+ T |\n| 1          | CD14, LYZ     | CD14+ Mono   |\n| 2          | IL7R, S100A4  | Memory CD4+  |\n| 3          | MS4A1         | B            |\n| 4          | CD8A          | CD8+ T       |\n| 5          | FCGR3A, MS4A7 | FCGR3A+ Mono |\n| 6          | GNLY, NKG7    | NK           |\n| 7          | FCER1A, CST3  | DC           |\n| 8          | PPBP          | Platelet     |\n\n目前的`pbmc@active.ident`（或`Idents(pbmc)`）和`meta.data`中的\"seurat_clusters\"列储存了激活的分群信息：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-33_538ec9682749e686f13a2fd6ddff4ec7'}\n\n```{.r .cell-code}\nIdents(pbmc) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n               0                3                2                1 \nAAACCGTGTATGCG-1 AAACGCACTGGTAC-1 \n               6                2 \nLevels: 0 1 2 3 4 5 6 7 8\n```\n:::\n:::\n\n\n通过上面表格的注释依据对细胞群重命名，将命名信息储存在\"new.cluster.ids\"中，然后返回到meta.data中，形成新的\"new.cluster.ids\"列：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-34_ca9f996e8668e83bc5b40443fbfe4199'}\n\n```{.r .cell-code}\nnew.cluster.ids <- c(\"Naive CD4 T\", \"CD14+ Mono\", \"Memory CD4 T\", \"B\", \"CD8 T\", \n                     \"FCGR3A+ Mono\", \"NK\", \"DC\", \"Platelet\")\nnames(new.cluster.ids) <- levels(pbmc)\npbmc <- RenameIdents(pbmc, new.cluster.ids)\nDimPlot(pbmc, \n        reduction = \"umap\", \n        label = TRUE, \n        pt.size = 0.5) + \n  NoLegend()\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-34-1.png){width=672}\n:::\n:::\n\n\n目前的分群信息：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-35_c506b96aaa329f78dd9b5f34ea8f548f'}\n\n```{.r .cell-code}\nIdents(pbmc) %>% head()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nAAACATACAACCAC-1 AAACATTGAGCTAC-1 AAACATTGATCAGC-1 AAACCGTGCTTCCG-1 \n     Naive CD4 T                B     Memory CD4 T       CD14+ Mono \nAAACCGTGTATGCG-1 AAACGCACTGGTAC-1 \n              NK     Memory CD4 T \n9 Levels: Naive CD4 T CD14+ Mono Memory CD4 T B CD8 T FCGR3A+ Mono NK ... Platelet\n```\n:::\n:::\n\n\n`DimPlot`基于`ggplot2`绘图框架，所以可以用`ggplot2`语法对图像进行自定义调整：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-36_14fcc68bc951760e932498084180de71'}\n\n```{.r .cell-code}\nlibrary(ggplot2)\nDimPlot(pbmc, \n        reduction = \"umap\", \n        label = TRUE, \n        label.size = 4.5) + \n  xlab(\"UMAP 1\") + \n  ylab(\"UMAP 2\") +\n  theme(axis.title = element_text(size = 18), \n        legend.text = element_text(size = 18)) + \n  guides(colour = guide_legend(override.aes = list(size = 10)))\n```\n\n::: {.cell-output-display}\n![](seurat_tutorial_files/figure-html/unnamed-chunk-36-1.png){width=672}\n:::\n:::\n\n\n保存Seurat对象：\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-37_10fe722fdd17fce3ec0e874ef7e19fcf'}\n\n```{.r .cell-code}\nsaveRDS(pbmc, file = \"output/seurat_official/pbmc3k_final.rds\")\n```\n:::\n\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell hash='seurat_tutorial_cache/html/unnamed-chunk-38_3c48381dd1e75aa5679a59640683acfc'}\n\n```{.r .cell-code}\nsessionInfo()\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.2.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] ggplot2_3.4.4      dplyr_1.1.4        Seurat_5.0.1       SeuratObject_5.0.1\n[5] sp_2.1-2          \n\nloaded via a namespace (and not attached):\n  [1] RColorBrewer_1.1-3     rstudioapi_0.15.0      jsonlite_1.8.8        \n  [4] magrittr_2.0.3         spatstat.utils_3.0-4   ggbeeswarm_0.7.2      \n  [7] farver_2.1.1           rmarkdown_2.25         vctrs_0.6.5           \n [10] ROCR_1.0-11            spatstat.explore_3.2-5 htmltools_0.5.7       \n [13] sctransform_0.4.1      parallelly_1.36.0      KernSmooth_2.23-22    \n [16] htmlwidgets_1.6.4      ica_1.0-3              plyr_1.8.9            \n [19] plotly_4.10.4          zoo_1.8-12             igraph_1.6.0          \n [22] mime_0.12              lifecycle_1.0.4        pkgconfig_2.0.3       \n [25] Matrix_1.6-5           R6_2.5.1               fastmap_1.1.1         \n [28] fitdistrplus_1.1-11    future_1.33.1          shiny_1.8.0           \n [31] digest_0.6.34          colorspace_2.1-0       patchwork_1.2.0       \n [34] tensor_1.5             RSpectra_0.16-1        irlba_2.3.5.1         \n [37] labeling_0.4.3         progressr_0.14.0       fansi_1.0.6           \n [40] spatstat.sparse_3.0-3  httr_1.4.7             polyclip_1.10-6       \n [43] abind_1.4-5            compiler_4.3.2         withr_3.0.0           \n [46] fastDummies_1.7.3      R.utils_2.12.3         MASS_7.3-60.0.1       \n [49] tools_4.3.2            vipor_0.4.7            lmtest_0.9-40         \n [52] beeswarm_0.4.0         httpuv_1.6.13          future.apply_1.11.1   \n [55] goftest_1.2-3          R.oo_1.25.0            glue_1.7.0            \n [58] nlme_3.1-164           promises_1.2.1         grid_4.3.2            \n [61] Rtsne_0.17             cluster_2.1.6          reshape2_1.4.4        \n [64] generics_0.1.3         gtable_0.3.4           spatstat.data_3.0-4   \n [67] R.methodsS3_1.8.2      tidyr_1.3.0            data.table_1.14.10    \n [70] utf8_1.2.4             spatstat.geom_3.2-7    RcppAnnoy_0.0.21      \n [73] ggrepel_0.9.5          RANN_2.6.1             pillar_1.9.0          \n [76] stringr_1.5.1          spam_2.10-0            RcppHNSW_0.5.0        \n [79] limma_3.58.1           later_1.3.2            splines_4.3.2         \n [82] lattice_0.22-5         survival_3.5-7         deldir_2.0-2          \n [85] tidyselect_1.2.0       miniUI_0.1.1.1         pbapply_1.7-2         \n [88] knitr_1.45             gridExtra_2.3          scattermore_1.2       \n [91] xfun_0.41              statmod_1.5.0          matrixStats_1.2.0     \n [94] stringi_1.8.3          lazyeval_0.2.2         yaml_2.3.8            \n [97] evaluate_0.23          codetools_0.2-19       tibble_3.2.1          \n[100] cli_3.6.2              uwot_0.1.16            xtable_1.8-4          \n[103] reticulate_1.34.0      munsell_0.5.0          Rcpp_1.0.12           \n[106] globals_0.16.2         spatstat.random_3.2-2  png_0.1-8             \n[109] ggrastr_1.0.2          parallel_4.3.2         ellipsis_0.3.2        \n[112] presto_1.0.0           dotCall64_1.1-1        listenv_0.9.0         \n[115] viridisLite_0.4.2      scales_1.3.0           ggridges_0.5.5        \n[118] leiden_0.4.3.1         purrr_1.0.2            rlang_1.1.3           \n[121] cowplot_1.1.2         \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
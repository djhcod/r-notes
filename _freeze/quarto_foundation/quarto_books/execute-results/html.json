{
  "hash": "be89c0598c67a27c8e19a773b1fe89df",
  "result": {
    "markdown": "---\nexecute: \n  eval: false\n---\n\n\n# Quarto Books {#sec-quarto-books}\n\nQuarto Books能够将多个Quarto文档（章节）组合成一份文档。这样我们可以将所有的笔记、脚本文件汇总成一个完整的知识框架。\n\n在RStudio中创建一个Quarto Books的方法是首先新建一个项目，选择\"New Directory\"：\n\n![](images/截屏2023-11-26%2011.38.15.png){width=\"387\"}\n\n项目类型选择\"Quarto Book\"：\n\n![](images/截屏2023-11-26%2011.38.25.png){width=\"410\"}\n\n然后给项目起个名字，这个名字是最终项目文件夹和`.Rproject`文件的名字。选择项目的创建目录。如果需要将项目作为Git仓库同步到GitHub（详见： @sec-publish_github_pages ）的话可以勾选上\"Create a git repository\"：\n\n![](images/截屏2023-11-26%2011.38.56.png){width=\"416\"}\n\n现在就会在目标目录下创建一个新的项目文件夹。里面包含了Quarto自动创建好的示例qmd文件以及配置文件，相当于搭建好了Quarto Books的框架。\n\n![](images/截屏2023-11-26%2011.39.25.png){width=\"353\"}\n\n其中后缀为`.Rproject`的文件即项目文件。`index.qmd`文件编译后是book的封面。由于Quarto Books一般编译为HTML文件，所以这个文件就是网页的首页。**注意不要更改其文件名**。`references.qmd`编译后为参考文献页面；`references.bib`为插入参考文献后自动生成的参BibTeX/Citation文件，里面包括了所有考文献的列表（详见： @sec-ref_settings ）。\n\n`_quarto.yml`文件为YAML配置文件。要实现按照一定的格式将各个Quarto文档组合成一个完整的网页或Quarto Books，定义这个YAML配置文件是核心。**YAML配置文件一般以\"\\_quarto.yml\"命名**，并保存在项目的根目录中，在每次编译书籍时都会读取这个配置文件。实际上Quarto Books的YAML配置和此前独立的qmd文档的YAML配置（ @sec-Overview_of_yaml_settings ）有大量相似之处。最大的区别是Quarto Books需要通过`chapter`来将不同的qmd文件（章节）按照一定的顺序组合起来形成一本完整的书籍。下面主要介绍YAML配置文件的主要内容。各个章节即各个独立的qmd文件的编写方法参考之前的章节即可。\n\n## 项目设置\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-1_ad2b3f24448a044b4c137e2401d1c28c'}\n\n```{.r .cell-code}\n---\nproject:\n  type: book\n  output-dir: \"docs\" \n  execute-dir: project \n---\n```\n:::\n\n\n-   `project`：项目类型。定义了项目编译后的文档类型，包括`default`, **`website`**（Quarto Websites）和**`book`**（Quarto Book）。这里我们在新建项目时选择了Quarto Books，所以这里自动填写了`book`。\n\n-   `output-dir`：输出文件夹。编译后的HTML文件、PDF文件以及运行code chunk后产生的图像、数据等的输出文件夹。上面的例子中将输出文件夹指定为\"docs\"文件夹可以方便将输出的HTML文件通过GitHub Pages发布（详见 @sec-publish_github_pages ）。\n\n-   `execute-dir`：**在编译时**，各个qmd文件内的code chunk脚本运行的根目录，默认是`file`，即**当前qmd文档所在目录**，可设置为 \"**project**\"，这样在编译过程中执行代码块时会**将脚本运行根目录设置为项目根目录**。\n\n## 书结构设置\n\n`book`参数定义了Quarto Book的章节结构以及顶栏、导航栏等内容。**是Quarto Books的YAML配置的核心**。\n\n### 标题/作者/日期信息\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-2_d157e025fbebd643d61e5a90a787f4cb'}\n\n```{.r .cell-code}\n---\nbook:\n  title: \"R语言数据科学\"\n  subtitle: \"从数据清洗到高级统计学和生物信息学\"\n  author: \"杜俊宏\"\n  date: 2023/11/10\n  date-format: \"YYYY[年]M[月]D[日]\"\n  cover-image: images/book_cover.png\n---\n```\n:::\n\n\n-   `title`：标题。\n\n-   `subtitle`：副标题。在标题下方以较小字号展示。\n\n-   `author`：作者姓名。\n\n-   `date`：文档发行日期。日期既可以手动添加，如\"2023/11/10\"，也可以通过`now`（输出样式：2023年11月11日 19:01）或`today`（输出样式：2023年11月11日）自动生成日期。\n\n-   `date-format`：日期格式（详见： @sec-dateformat ）。\n\n-   `cover-image`：封面图片。\n\n::: callout-tip\n上面列出的信息也可以在index.qmd文件中定义。\n:::\n\n### `chapter`章节\n\n**章节的定义是Quarto Books的YAML配置的核心**。通过`chapter`函数将多个不同的qmd文件（章节）按照指定的顺序结合起来就形成了一本书或者网站。\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-3_5e0baa5f414edeea5aa8588b74873ee6'}\n\n```{.r .cell-code}\n---\nbook:\n  chapters:\n    - text: 主页\n      file: index.qmd\n    - intro.qmd\n    - text: \"---\" \n    - part: r_basic/r_basics.qmd\n      chapters:\n        - r_basic/environment_configuration.qmd\n        - r_basic/data_input_output.qmd\n    - part: bioinformatics/single_cell/r_single_cell.qmd\n      chapters:\n        - bioinformatics/single_cell/seurat_command_list.qmd\n        - bioinformatics/single_cell/seurat_tutorial.qmd\n        - bioinformatics/single_cell/data_visualization_methods_in_seurat.qmd\n        - bioinformatics/single_cell/sctransform.qmd\n        - bioinformatics/single_cell/integration.qmd\n    - part: quarto_foundation/quarto_foundation.qmd\n      chapters:\n        - quarto_foundation/yaml_settings.qmd\n        - quarto_foundation/images_settings.qmd\n        - quarto_foundation/cross_references.qmd\n        - quarto_foundation/insert_other_content.qmd\n        - quarto_foundation/quarto_books.qmd\n        - quarto_foundation/github_pages.qmd\n    - text: \"---\"\n    - part: \"参考文献\"\n      chapters:\n        - references.qmd\n---\n```\n:::\n\n\n-   `part`：如果一本书有大量的qmd文件（章节），那么我们可以按照不同的主题将这些qmd文件分成不同的篇章。`part`可以用qmd文件或者字符定义。如果提供的是qmd文件，那么该qmd文件在编译后会是该篇章的首页，并以单独的一个页面显示。每个篇章可由多个不同的qmd文件（章节）组成。篇章的首页内容会以单独的一个页面显示，一般写该篇章的内容概要。如果提供的是字符，那么这个篇章只会反映在左侧导航栏上，而不会有单独的篇章首页。如上面的`part: \"参考文献\"`。\n-   `chapters`：章节。在其下方列出需要包含的所有qmd文件。`part`和`chapters`共同完成对章节的组织。\n-   `text`： \"---\"：分隔符。会在导航栏对应位置上显示一条横线。\n\n上面的配置在编译后的效果：\n\n![](images/截屏2023-11-26%2013.02.00.png){width=\"199\"}\n\n### 侧边栏 {#sec-sidebar}\n\n侧边栏是传统意义上的总目录，默认在网页的左侧显示，其内容反映了上面`chapter`中定义的章节编排。通过`sidebar`对侧边栏的样式、内容等进行进一步的设定。\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-4_1c3e3e355c03aca504340df9273d12ff'}\n\n```{.r .cell-code}\n---\nbook:\n  sidebar:\n    style: \"docked\" \n    collapse-level: 1 \n    search: true \n    logo: images/logo.png \n    tools:\n      - icon: twitter \n        href: https://twitter.com \n      - icon: youtube\n        href: https://youtube.com\n---\n```\n:::\n\n\n-   `style`：侧边导航栏的风格。默认为`docked`，固定导航栏。也可以选择浮动导航栏，`floating`。\n\n-   `collapse-level`：侧边导航栏初始显示到多少级标题，默认显示到一级标题，只有当浏览到某一篇章时才会展开该篇章下的2级标题。\n\n-   `search`：是否打开侧边栏上的搜索框。注意如果开启了顶栏（见下一节顶部导航栏），那么搜索按钮会默认在顶栏显示。\n\n-   `logo`：在侧边导航栏上方显示图像。\n\n-   `tools`：定制侧边栏工具。语法同下一节顶部导航栏中的`left`和`right`内的定义类似。\n\n采用上述配置后的侧边栏样式：\n\n![](images/截屏2023-11-26%2019.30.06.png){width=\"171\"}\n\n### 顶部导航栏 {#sec-navbar}\n\n除了添加侧边导航栏之外，还可以通过`navbar`参数添加顶部导航栏。\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-5_79b31553d801dc6d33eed12a735c118a'}\n\n```{.r .cell-code}\n---\nbook:\n  navbar:\n    logo: images/logo.jpg\n    background: \"#f1f1f3\" \n    foreground: \"black\" \n    search: true\n    left:\n      - text: \"Home\"\n        file: index.qmd\n      - file: intro.qmd\n      - text: \"Parts\"\n        menu:\n          - r_basic/r_basics.qmd\n          - bioinformatics/single_cell/r_single_cell.qmd\n          - quarto_foundation/quarto_foundation.qmd\n      - file: references.qmd\n    right:\n      - icon: book-fill\n        text: Bookdown\n        href: https://bookdown.org\n      - icon: github\n        text: GitHub\n        menu:\n          - text: Source Code\n            url: https://github.com/djhcod/r-notes\n          - text: Report a Bug\n            url: https://github.com/djhcod/r-notes/issues\n          - text: Pull Request\n            url: https://github.com/djhcod/r-notes/pulls\n---\n```\n:::\n\n\n-   `logo`：顶栏左侧的logo。\n\n-   `background`：顶栏背景色（默认为primary，网页主色）。\n\n-   `foreground`：顶栏字体颜色。\n\n-   `search`：是否在顶栏右侧显示搜索按钮。\n\n-   `left`和`right`：分别定义顶栏左侧和右侧显示的内容：\n\n    -   `file`：qmd文件。qmd文件内的一级标题就是编译后显示在导航栏上的文字。\n\n    -   `text`：显示文字。在其下方添加qmd文件即可将文字链接到对应的qmd文件编译后的页面。这可以用于自定义某个qmd文件在导航栏上显示的文字。例如这里的index.qmd的标题是\"主页\"（`title：主页`），如果我们直接用`file`把它列出来，那么在导航栏上就会显示index.qmd的标题，即\"主页\"。但是我们通过`text: \"Home\"`，并在其下方接`file: index.qmd`，那么在编译后的HTML中顶栏上会显示\"Home\"文字，点击后还是链接到index.qmd编译后的首页。如果`text`下方提供的是`url`，那么点击该文字后就会跳转到指定网站。\n\n    -   `icon`：图标，和`text`的作用类似。Quarto可以调用[Bootstrap Icons](https://icons.getbootstrap.com)**图标库**，只需指定图标在Bootstrap Icons网站中的的官方名字，如\"github\"、\"twitter\"，就可以直接调用该图标。\n\n    ![Bootstrap Icons图标库](images/截屏2023-11-26%2019.04.06.png){#fig-Bootstrap_Icons}\n\n    -   `menu`：下拉菜单。效果如 @fig-顶栏 所示。\n\n    -   `url`和`herf`：效果类似，都是添加外部网址。\n\n![顶栏示例](images/截屏2023-11-26%2013.05.19.png){#fig-顶栏}\n\n::: callout-tip\n顶栏和侧边导航栏的更多设置，参考[Quarto官方指南](https://quarto.org/docs/websites/website-navigation.html#side-navigation)。\n:::\n\n### 右侧页内导航 {#sec-page_navigation}\n\n右侧页内导航显示的是当前页面的目录。可在`book`内的`page-navigation`和`format`-`html`内的`toc`相关函数中共同配置。\n\n![](images/截屏2023-11-26%2019.36.29.png)\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-6_13d853e8b4e67ad9dc8eb23fae885e04'}\n\n```{.r .cell-code}\n---\nbook:\n  page-navigation: true\n  repo-url: https://github.com/djhcod/r-notes \n  repo-actions: [source, issue, edit] \n---\n```\n:::\n\n\n-   `page-navigation`：是否打开右侧的页内导航。\n\n-   `repo-url`：（可选）GitHub仓库的链接。\n\n-   `repo-actions`：（可选）在右侧页内导航的下方显示导航到GitHub仓库各板块的链接。可选的值有`source`、`issue`、`edit`。如果是`source`，`repo-actions`会首先根据当前所浏览的页面，在`repo-url`定义的URL后加上当前页面源码的后缀（如\"/blob/main/quarto_foundation/quarto_books.qmd\"），这样就会得到一个指向GitHub项目中编译该页面的源码的链接。如果是`edit`则会在此链接的基础上再加上编辑该页面源码的后缀（\"/edit/main/quarto_foundation/quarto_books.qmd\"）。如果是`issue`则会在GitHub仓库链接的基础上加上定位到问题报告的后缀（\"/issues/new\"）。\n\n### 搜索框设置\n\n`search`可以用来指定搜索按钮的样式。同时，对于既有顶栏又有左侧导航栏的book，可以通过`search`来指定搜索按钮出现的位置。\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-7_5f0598a7a25d09540bdf81037bb8daa4'}\n\n```{.r .cell-code}\n---\nbook:\n  search:\n    location: sidebar\n    type: textbox\n---\n```\n:::\n\n\n-   `location`：搜索按钮的位置。默认为出现在顶栏（ ）最右侧（`navbar`）；也可以定义为`sidebar`，让其在侧边栏（ @sec-sidebar ）的上方显示。\n\n-   `type`：搜索按钮的样式。可以仅搜索图标（`overlay`），也可以展示搜索框（`textbox`）。\n\n### 页脚设置\n\n页脚出现在每个页面的最下面，通过`page-footer`统一配置。\n\n![页脚示例](images/截屏2023-11-26%2020.01.55.png){#fig-页脚}\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-8_4ded50945ab5bfe8b1b5c7f2dd64c55e'}\n\n```{.r .cell-code}\n---\nbook:\n  page-footer:\n    left:\n      - text: \"This book was built with Quarto\"\n    center: \"Copyright 2023, Du Junhong\"\n    right:\n      - icon: github\n        href: https://github.com/djhcod\n    border: true  \n---\n```\n:::\n\n\n页脚的配置和 @sec-navbar 的语法基本一致，此处不再赘述。\n\n### 网站分享设置\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-9_fa0b11f328c08bfa20dbe49afa5c9a19'}\n\n```{.r .cell-code}\n---\nbook:\n  favicon: images/logo.png # \n  sharing: [twitter, facebook] # \n  twitter-card: true\n  site-url: https://example.com\n---\n```\n:::\n\n\n-   `favicon`：网页的图标。会在标签页上显示。\n\n![](images/截屏2023-11-26%2020.05.32.png)\n\n-   `sharing`：显示分享到社交网络图标。调用的是[Bootstrap Icons](https://icons.getbootstrap.com)**图标库。效果如下：**\n\n![](images/截屏2023-11-26%2020.07.29.png){width=\"188\"}\n\n### 用户批注功能\n\nQuarto Books编译后的HTML网页支持配置[Hypothesis](https://web.hypothes.is)标注功能。配置后不同的读者在登录Hypothesis账号后可以在页面上进行标注和评论。效果如下：\n\n![](images/截屏2023-11-26%2020.13.32.png)\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-10_c762c00905da1a0a40db32b177a28d8e'}\n\n```{.r .cell-code}\n---\nbook:\n  comments:\n    hypothesis:\n      theme: classic\n      openSidebar: false\n      showHighlights: always\n      enableExperimentalNewNoteButton: true\n---\n```\n:::\n\n\n## `format`编译设置\n\n`format`定义了Quarto Books最终编译成的格式。Quarto Books可以编译成各种格式，如HTML、PDF、MS Word、EPub，或AsciiDoc。最常用和最好的编译格式是HTML。HTML books实际上是一种特殊类型的[Quarto Website](https://quarto.org/docs/websites/)，因此支持包括全文搜索在内的网站功能。这两者最重要的一个区别是，**HTML books能够使用章节编号，因此支持不同章节之间的交叉引用**。因此下面只介绍编译成HTML的相关设置。\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-11_452797fd712bcba25a079f8a10e74b4c'}\n\n```{.r .cell-code}\n---\nformat:\n  html:\n    theme:\n      light: Flatly \n      dark: darkly\n    embed-resources: false \n    code-tools: true\n    code-link: true\n    anchor-sections: true \n    link-external-newwindow: true \n    toc-depth: 3 \n    toc-expand: 1 \n---\n```\n:::\n\n\n-   `theme`：定义了编译文档的主题（详见： @sec-theme ）。\n\n-   `embed-resources`：是否将所有源文件嵌入HTML文件以方便分享。默认为\"false\"。\n\n-   `code-tools`：是否在网页右上角显示\"\\<code\\>\"按钮。点击该按钮可以看到Quarto文档的原始markdown代码。\n\n-   `code-link`: 是否自动为函数加上超链接。该功能基于[downlit](https://downlit.r-lib.org/)包，可以自动为识别到的函数加上一个链接到官方文档的超链接。\n\n-   `anchor-sections`: 设置为`true`时，当鼠标移到各级标题上时会显示anchor link，方便我们复制直接定位到该标题的超链接。\n\n-   `link-external-icon`：设置为`true`时会在外部链接上显示一个小图标。\n\n-   `link-external-newwindow`：是否在新标签页打开外部链接。\n\n-   `toc`：是否显示页内目录。对于HTML格式的Quarto Books，开启该选项后会在每个网页的右侧显示一个页面内的导航目录（ @sec-page_navigation ）。\n\n-   `toc-title`：页内目录的标题。\n\n-   `toc-depth`：设置页内目录显示的最低层级（默认为显示到3级标题）。\n\n-   `toc-expand`：设置页内目录在一开始显示到多少级，默认显示到一级标题。当向下浏览内容时目录会自动展开到`toc-depth`所设置的层级。设置为`true`时，则在一开始就展开所有目录；设置为`false`则在一开始折叠所有目录。\n\n-   `toc-location`：设置页内目录的位置。默认在右侧（`right`）,可以设置为`left`或`body`（在文稿最开头显示）。\n\n## 代码块执行设置\n\n`execute`用来指定代码块的执行行为，例如是否运行、是否显示警告信息和是否缓存运行结果等。\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-12_55c43ff67de032e3727c76f8b9f93b81'}\n\n```{.r .cell-code}\n---\nexecute:\n  eval: true\n  warning: false\n  cache: true\n---\n```\n:::\n\n\n-   `eval`：设置为`false`时**只显示代码，不运行**。默认为`true`。\n\n-   `echo`：设置为`false`时在输出文件中**不显示代码，仅显示代码的运行结果**。设置为`fenced`，会将代码块的设置，即\"#\\|\"符号后的内容，也展示出来。@fig-箱型图 这个代码块就用了`echo: fenced`这个设定，可以看一下效果。默认为`true`。\n\n-   `output`：设置为`false`时，**只运行代码不显示运行结果**。默认为`true`。\n\n-   `warning`：是否显示代码运行的警告信息。默认为`true`。\n\n-   `cache`：是否开启运算结果缓存。默认为`false`。如果设置为`true`，就会在编译时将源代码的运算结果保存到文件目录中后缀为\"\\_cache\"的文件夹中。这样在重新编译同一个文档时会加快编译速度。\n\n-   `freeze`: 在全局渲染（project渲染）时是否冻结运算结果。在渲染包含了大量计算任务的项目时，通过更改这个参数可以改善渲染时间。默认为`false`，即在执行project渲染时重新计算之前已经生成的计算输出。`true`：在全局渲染时，不重新计算先前生成的计算输出。`auto`：只有在源文件发生变化时，才重新计算之前生成的计算输出结果。当设置为`true`或者`auto`时，在首次渲染后会在项目根目录下生成一个“\\_freeze”文件夹（见下图），如果想要重新执行此前的运算可以手动删除这个文件夹。\n\n    ![](images/截屏2024-01-18 11.56.01.png)\n\n::: callout-caution\n`freeze`仅更改全局渲染时的行为。全局渲染或称project渲染指的是通过`quarto render`终端命令，或者通过RStudio中“Build”选项卡下的“Render Book”按钮发起的渲染。\n\n![](images/截屏2024-01-18%2011.43.55.png)\n\n如果只是渲染单个Quarto文件，则不会受到`freeze`的控制。参考[*Quarto官方文档：Managing Execution*](https://quarto.org/docs/projects/code-execution.html#freeze)获取更多关于`freeze`的说明。\n:::\n\n## 标题编号设置 {#sec-number_sections}\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-13_cbfc4682880d626c0d3423fb893b7cb9'}\n\n```{.r .cell-code}\n---\nnumber-sections: true \nnumber-depth: 2 \n---\n```\n:::\n\n\n-   `number-sections`：设置为`true`时会给各级标题编号。默认为`false`。\n\n-   `number-depth`：编号的最低标题层级。默认给所有级别的标题编号。\n\n-   `{.unnumbered}`：如果想要某一个标题不编号，则把这行命令粘贴到该标题后面。如\"第三章{.unnumbered}\"。\n\n-   `{.unlisted}`：将某个标题设置为不在目录中列出。如\"第三章{.unlisted}\"。如果想要某个标题既不编号也不在目录中列出就可以这样写：\"标题{.unnumbered .unlisted}\"。\n\n## 交叉引用设置\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-14_2f6b391e6f812db2b70d831e594ba4e5'}\n\n```{.r .cell-code}\n---\ncrossref:\n  appendix-title: \"附录\" \n  appendix-delim: \":\" \n  fig-title: 图    \n  tbl-title: 表    \n  fig-prefix: 图  \n  tbl-prefix: 表   \n  fig-labels: arabic   \n  tbl-labels: arabic   \n  subref-labels: alpha A \n---\n```\n:::\n\n\n-   `appendix-title`: 附录的标签文字\n\n-   `appendix-delim`: 附录标签文字和附录标题的分隔符\n\n-   `fig-title`: 图的默认标签文字（默认是\"Figure\"）\n\n-   `tbl-title`: 表的默认标签文字（默认是\"Table\"）\n\n-   `title-delim`: 图、表标签文字和后面的图、表标题之间的连接符（默认是\":\"）\n\n-   `fig-prefix`: 图的默认引用样式（默认是\"Figure\"）\n\n-   `tbl-prefix`: 表的默认引用样式（默认是\"Table\"）\n\n-   `sec-prefix`: 章节的默认引用样式（默认是\"Section\"）\n\n-   `ref-hyperlink`: 是否为交叉引用加上内部链接（默认是\"true\"）\n\n-   `fig-labels`: 图片的编号类型（默认是阿拉伯数字：arabic)\n\n-   `tbl-labels`: 表格的编号类型（默认是阿拉伯数字：arabic）\n\n-   `subref-labels`: 次级引用编号类型，如组图中的小图（默认是小写字母：alpha a）\n\n可用的编号类型包括：\n\n-   `arabic` (1, 2, 3)\n\n-   `roman` (I, II, III, IV)\n\n-   `roman i` (i, ii, iii, iv)\n\n-   `alpha x` (start from letter 'x')\n\n-   `alpha X` (start from letter 'X')\n\n## 排版设置\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-15_12a43408b9a3346fb6d748cb0a49ce9d'}\n\n```{.r .cell-code}\n---\nfig-cap-location: bottom\ntbl-cap-location: top\nreference-location: margin \ncitation-location: document \n---\n```\n:::\n\n\n-   `fig-cap-location`：图片标题的位置。默认在图片底部（`bottom`）。\n-   `tbl-cap-location`：表格标题的位置。默认在表格上方（`top`）。\n-   `reference-location`：脚注的默认展示位置。默认为文档最后 (`document`)。\n-   `citation-location`：参考文献的默认展示位置。默认为文档最后 (`document`)。\n\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| Option               | Description                                                                                                                           |\n+======================+=======================================================================================================================================+\n| `reference-location` | Where to place footnotes. Defaults to `document`.\\                                                                                    |\n|                      | \\[`document` \\| `section` \\| `block` \\| `margin` \\]                                                                                   |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `citation-location`  | Where to place citations. Defaults to `document`.\\                                                                                    |\n|                      | \\[`document` \\| `margin` \\]                                                                                                           |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `cap-location`       | Where to place figure and table captions. Defaults to `bottom` for figures and `top` for tables. \\| \\[`top` \\| `bottom` \\| `margin`\\] |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `fig-cap-location`   | Where to place figure captions. Defaults to `bottom`.\\                                                                                |\n|                      | \\[`top` \\| `bottom` \\| `margin`\\]                                                                                                     |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `tbl-cap-location`   | Where to place table captions. Defaults to `top`.\\                                                                                    |\n|                      | \\[`top` \\| `bottom` \\| `margin`\\]                                                                                                     |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n\n## 参考文献设置\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-16_3a02123e779e737b26d482afe702210e'}\n\n```{.r .cell-code}\n---\nbibliography: references.bib # 参考文献目录\n---\n```\n:::\n\n\n只要在编辑qmd文档时插入了参考文献，YAML中会新增参考文献的配置选项：`bibliography: references.bib`。同时根目录下会生成一个名为\"references.bib\"的参考文献配置文件。该配置文件包括了qmd文档中所插入的所有参考文献的列表。以BibTeX/Citation风格语言编写。`bibliography`指定了这个参考文献配置文件所在的路径。\n\n::: callout-tip\n关于Quarto Books的详细指南，参考：<https://quarto.org/docs/books/book-structure.html>。\n:::\n\n## 附：制作About Pages\n\nindex.qmd文件会编译形成首页/封面文件（index.html），如果我们将书籍/网页发布（详见： @sec-publish_github_pages ），这是打开网站链接后首先看到的页面。我们可以通过Quarto提供的About Pages模板来快速创建一个美观的首页，其核心是`about`命令。下面是一个采用了About Pages模板的index.qmd文件的示例：\n\n\n::: {.cell hash='quarto_books_cache/html/unnamed-chunk-17_cd754626f252a66422f035a2778ca95c'}\n\n```{.r .cell-code}\n---\ntitle: \"关于这本笔记\"\nsidebar: false # 关闭左侧栏\ntoc: false # 关闭右侧的页面目录\nnumber-sections: false # 取消对标题的编号\ncode-tools: false # 关闭代码工具\nabout:\n  template: trestles # 模板\n  image: images/book_cover.jpg # 封面图片\n  # 添加链接\n  links:\n    - icon: book-fill # 添加图标（https://icons.getbootstrap.com）\n      text: Bookdown # 图标的文字\n      href: https://bookdown.org # 图标的链接\n    - icon: github\n      text: Github\n      href: https://github.com/djhcod/r-notes\n    - text: Email\n      href: mailto::du.jh@icloud.com\n---\n\nFinley Malloc is the Chief Data Scientist at Wengo Analytics. When not innovating on data platforms, Finley enjoys spending time unicycling and playing with her pet iguana.\n\n------------------------------------------------------------------------ # 分割线\n\n## Education\n\nUniversity of California, San Diego \\| San Diego, CA PhD in Mathematics \\| Sept 2011 - June 2015\n\nMacalester College \\| St. Paul MA B.A in Economics \\| Sept 2007 - June 2011\n\n------------------------------------------------------------------------\n\n## Experience\n\nWengo Analytics \\| Head Data Scientist \\| April 2018 - present\n\nGeoScynce \\| Chief Analyst \\| Spet 2012 - April 2018\n```\n:::\n\n\n::: callout-note\n`mailto`是一种特殊的超链接，其语法是`mailto::youremail.com`。点击`mailto::`后的邮箱地址之后会打开设备的邮件应用，并且自动填写邮箱地址。\n:::\n\n::: callout-tip\n更多关于About Pages的技巧，参考：[*Creating your personal website using Quarto*](https://ucsb-meds.github.io/creating-quarto-websites/#fa-arrow-right-titlean-arrow-pointing-to-the-right-turn-your-landing-page-index.qmd-into-an-about-page-with-a-photo)**。**\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "05d6844ed3795ce34f7ea6cf7977e1dd",
  "result": {
    "markdown": "---\ntitle: \"图片设置\"\nexecute:\n      eval: false\n      warning: false\n---\n\n\n## 插入图片的设置 {#sec-Settings_for_inserting_figs}\n\n图片可以通过复制粘贴直接插入，Quarto定义图像的基本语法是：\n\n`![图片标题](images/crossref-figure.png){#fig-elephant width=\"290\"}`。\n\n其中，方括号内的是对象的`caption`（可选），小括号内是图像所在目录，\"{}\"内的内容是图像的`label`以及其他可选设置，各参数间用空格进行分割。常用的图像设置如下：\n\n-   `width`和`height`：图像的宽、高。默认单位为像素。\n\n-   `fig-align`：图片的对齐方式，如\"left\"，\"right\"。\n\n-   可以在小括号内添加超链接，如``` [![](``images/crossref-figure.png``)](https://en.wikipedia.org/wiki/Elephant) ```，当点击该图像时会跳转该网站。\n\n-   `caption`和`label`的设置会使该图像能够被[交叉引用](/quarto_foundation/cross_references.qmd#sec-Cross_referencing_of_figs)。\n\n-   `.column-page`：让图片以整个文档的宽度展示。需要首先建立一个Pandoc Div块（@fig-div）。然后在Pandoc Div块的参数项内填上`{.column-page}`。如下所示：\n\n\n    ::: {.cell hash='images_settings_cache/html/unnamed-chunk-1_d96d014ee104da28c4558fb3fad516f3'}\n    \n    ```{.r .cell-code}\n    :::{.column-page}\n    ![](images/elephant.jpg)\n    :::\n    ```\n    :::\n\n\n    这样这张图片就会以文档最大宽度显示：\n\n::: column-page\n![](images/aerial-beautiful-color-2553004.jpg)\n:::\n\n::: {.callout-note appearance=\"minimal\"}\n应用于代码块时为：`#| column: page`\n:::\n\n-   `.column-screen`：让图片占满整个网页的宽度。应用于代码块时为：`#| column: screen`。\n\n::: column-screen\n![](images/aerial-beautiful-color-2553004.jpg)\n:::\n\n-   `column-screen-inset-shaded`：让图片以整个文档的宽度展示，但是在后方加上一个网页宽度的阴影。应用于代码块时为：`#| column: screen-inset-shaded`。\n\n::: column-screen-inset-shaded\n![](images/aerial-beautiful-color-2553004.jpg)\n:::\n\n### 组图的设置 {#sec-Setting_of_group_figs}\n\n要容纳和排版组图，需要首先建立一个Pandoc Div块（@fig-div）。\n\n![建立Div块](images/screenshot_2023-11-09%2010.23.28.png){#fig-div width=\"288\"}\n\nDiv块的图像排版基本语法如下：\n\n![Div块的基本语法](images/screenshot_2023-11-09%2010.38.16.png){#fig-div_code width=\"458\"}\n\n-   \"{}\"内为组图的label、排版设置。\n\n-   在所有图片最后可输入组图的总标题，如上图中的\"交叉引用的设置\"。\n\n设置图片的排版方式。\n\n`layout-ncol`和`layout-nrow`：设置组图的行和列分别排多少张图片。如`::: {layout-ncol=\"2\"}`。\n\n::: {layout-ncol=\"2\"}\n![](images/upregulate_genes.png){width=\"326\"}\n\n![](images/VENN%20down.jpeg){width=\"334\"}\n\n![](images/screenshot_2023-11-09%2010.27.15.png){width=\"236\"}\n\n![](images/screenshot_2023-11-09%2010.27.25.png){width=\"261\"}\n:::\n\n### `Layout`复杂排版\n\n其基本语法和 @sec-Code_chunk_figs_output_settings 一致。不同点在于需要在Div块开头的\"{}\"内设置，同时`layout`后要接\"=\"，并且注意加引号，例如：`layout=\"[[1，1]，[1]]\"`。通过设置`layout`可以完成对多图的复杂排版。`layout`属性是一个二维数组，其中第一维定义行，第二维定义列。`layout=\"[[1，1]，[1]]\"`表示：创建两行，第一行有两列大小相等的列，第二行只有一列。\n\n::: {#组图复杂排版设置 layout=\"[[1,1], [1]]\"}\n![](images/upregulate_genes.png){width=\"195\"}\n\n![](images/VENN%20down.jpeg){width=\"205\"}\n\n![](images/screenshot_2023-11-09%2010.27.25.png){width=\"569\"}\n\n组图复杂排版设置\n:::\n\n::: callout-note\n关于图片设置的详细指南，参考：<https://quarto.org/docs/authoring/figures.html>。\n:::\n\n## 代码块图片输出设置 {#sec-Code_chunk_figs_output_settings}\n\n对于代码块运行后生成的图片，我们也可以对其进行各种设置以使其在编译后的文档中符合理想的展示要求。基本语法和 中类似，只不过需要在前面加上\"**#\\|**\"符号，然后将其放置在代码块开头。常用的参数有：\n\n-   `#| lable`：图片标签。\n\n-   `#| fig-cap`：图片标题（`caption`）。`fig-cap`和`lable`共同用于[图片的交叉引用](/quarto_foundation/cross_references.qmd#sec-Cross_referencing_of_figs)。\n\n-   `#| fig-width`：图片的宽度。\n\n-   `#| fig-height`：图片的高度。\n\n其他设置包括`#| fig-align`、`#| fig-cap-location`等，见 @sec-Settings_for_inserting_figs 。\n\n\n::: {.cell hash='images_settings_cache/html/fig-散点图_c60830f38f70002346c5d382caba265d'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| label: fig-散点图\n#| fig-cap: \"38种流行车型的城市和高速公路里程\"\n#| fig-width: 6\n#| fig-height: 3.5\nlibrary(ggplot2)\nggplot(mpg, aes(x = hwy, y = cty, color = cyl)) +\n  geom_point(alpha = 0.5, size = 2) +\n  scale_color_viridis_c() +\n  theme_minimal()\n```\n````\n\n::: {.cell-output-display}\n![38种流行车型的城市和高速公路里程](images_settings_files/figure-html/fig-散点图-1.png){#fig-散点图 width=576}\n:::\n:::\n\n\n### 代码块组图输出设置\n\n如果一个代码块运行后可以生成多张图像，那么我们也可以和 @sec-Setting_of_group_figs 中一样，对这些图片进行组图排版。常用的参数包括：\n\n-   `layout-ncol`和`layout-nrow`：设置组图的行和列分别排多少张图片。如`layout-ncol: \"2\"`。\n\n-   `label`：组图的标签。\n\n-   `fig-cap`：每张图的标题。通过\"-\"符号分别设置。效果如下所示：\n\n\n::: {.cell layout-ncol=\"2\" hash='images_settings_cache/html/fig-组图输出_a6670e65e7748dc953ede5bc57491f06'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| layout-ncol: 2\n#| label: fig-组图输出\n#| fig-cap:\n#|   - \"车辆的速度和停车距离\"\n#|   - \"汽压与温度的关系\"\n\nplot(cars)\nplot(pressure)\n```\n````\n\n::: {.cell-output-display}\n![车辆的速度和停车距离](images_settings_files/figure-html/fig-组图输出-1.png){#fig-组图输出-1 width=672}\n:::\n\n::: {.cell-output-display}\n![汽压与温度的关系](images_settings_files/figure-html/fig-组图输出-2.png){#fig-组图输出-2 width=672}\n:::\n:::\n\n\n-   `fig-subcap`：每张图以小标题进行标注，如\"*(a) sub caption\"*、\"*(b) sub caption\"*。效果如下所示：\n\n\n::: {#fig-小标题组图输出 .cell layout-ncol=\"2\" hash='images_settings_cache/html/fig-小标题组图输出_081e9096e3f45e93a00161a3acb3f8c7'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| label: fig-小标题组图输出\n#| fig-cap: \"小标题组图输出\"\n#| fig-subcap:\n#|   - \"汽车\"\n#|   - \"压力\"\n#| layout-ncol: 2\n\nplot(cars)\nplot(pressure)\n```\n````\n\n::: {.cell-output-display}\n![汽车](images_settings_files/figure-html/fig-小标题组图输出-1.png){#fig-小标题组图输出-1 width=672}\n:::\n\n::: {.cell-output-display}\n![压力](images_settings_files/figure-html/fig-小标题组图输出-2.png){#fig-小标题组图输出-2 width=672}\n:::\n\n小标题组图输出\n:::\n\n\n#### 用`layout`进行复杂排版\n\n`layout`属性是一个二维数组，其中第一维定义行，第二维定义列。如`layout: \"[[1，1]，[1]]`表示：创建两行，第一行有两列大小相等的列，第二行只有一列。\n\n\n::: {#fig-输出复杂排版图片 .cell layout=\"[[1],[1,1]]\" hash='images_settings_cache/html/fig-输出复杂排版图片_099448e113591e632c23671110a6c5b0'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| label: fig-输出复杂排版图片\n#| fig-cap: 复杂排版组图输出\n#| fig-subcap:\n#|   - 汽车\n#|   - 压力\n#|   - mtcars\n#| layout: [[1], [1, 1]]\n\nplot(cars)\nplot(pressure)\nplot(mtcars)\n```\n````\n\n::: {.cell-output-display}\n![汽车](images_settings_files/figure-html/fig-输出复杂排版图片-1.png){#fig-输出复杂排版图片-1 width=672}\n:::\n\n::: {.cell-output-display}\n![压力](images_settings_files/figure-html/fig-输出复杂排版图片-2.png){#fig-输出复杂排版图片-2 width=672}\n:::\n\n::: {.cell-output-display}\n![mtcars](images_settings_files/figure-html/fig-输出复杂排版图片-3.png){#fig-输出复杂排版图片-3 width=672}\n:::\n\n复杂排版组图输出\n:::\n\n\n`layout`后的\"\\[\\]\"中的数字大小表示各个图像的相对大小。所以可以用任何值来自定义：\n\n\n::: {#fig-输出复杂排版图片2 .cell layout=\"[[100],[30,70]]\" hash='images_settings_cache/html/fig-输出复杂排版图片2_12d581ee8c6cfbfa7c2dcff30e078e0c'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| label: fig-输出复杂排版图片2\n#| fig-cap: 复杂排版组图输出2\n#| fig-subcap:\n#|   - 汽车\n#|   - 压力\n#|   - mtcars\n#| layout: [[100], [30, 70]]\n\nplot(cars)\nplot(pressure)\nplot(mtcars)\n```\n````\n\n::: {.cell-output-display}\n![汽车](images_settings_files/figure-html/fig-输出复杂排版图片2-1.png){#fig-输出复杂排版图片2-1 width=672}\n:::\n\n::: {.cell-output-display}\n![压力](images_settings_files/figure-html/fig-输出复杂排版图片2-2.png){#fig-输出复杂排版图片2-2 width=672}\n:::\n\n::: {.cell-output-display}\n![mtcars](images_settings_files/figure-html/fig-输出复杂排版图片2-3.png){#fig-输出复杂排版图片2-3 width=672}\n:::\n\n复杂排版组图输出2\n:::\n\n\n如果我们输入负数，如下面的\"-10\"，则会在两个图之间加上相应的间距：\n\n\n::: {#fig-输出复杂排版图片3 .cell layout=\"[[45,-10,45],[100]]\" hash='images_settings_cache/html/fig-输出复杂排版图片3_023ce4bc1fb69c810f84659d78671a12'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| label: fig-输出复杂排版图片3\n#| fig-cap: 复杂排版组图输出3\n#| fig-subcap:\n#|   - 汽车\n#|   - 压力\n#|   - mtcars\n#| layout: [[45,-10, 45], [100]]\n\nplot(cars)\nplot(pressure)\nplot(mtcars)\n```\n````\n\n::: {.cell-output-display}\n![汽车](images_settings_files/figure-html/fig-输出复杂排版图片3-1.png){#fig-输出复杂排版图片3-1 width=672}\n:::\n\n::: {.cell-output-display}\n![压力](images_settings_files/figure-html/fig-输出复杂排版图片3-2.png){#fig-输出复杂排版图片3-2 width=672}\n:::\n\n::: {.cell-output-display}\n![mtcars](images_settings_files/figure-html/fig-输出复杂排版图片3-3.png){#fig-输出复杂排版图片3-3 width=672}\n:::\n\n复杂排版组图输出3\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "c6e81ac0e8c60fef1aeeff91b8daed92",
  "result": {
    "markdown": "---\nexecute:\n      eval: false\n      warning: false\n---\n\n\n# YAML设置 {#sec-Overview_of_yaml_settings}\n\n**Quarto主要由三大部分组成：metadata, text, 和 code**。其中metadata是文档开头写在\"---\"之间的句子，它采用的是[YAML语法](https://en.wikipedia.org/wiki/YAML)，所以有时候也被叫做YAML metadata 或者 the YAML frontmatter。YAML定义了Quarto文档的各种属性，比如编译文件类型、主题、代码块的执行行为以及目录等。**在**YAML metadata**中采用正确的缩进十分重要**。\n\n::: {.callout-tip appearance=\"minimal\"}\n[Quarto Cheat sheet](https://images.datacamp.com/image/upload/v1676540721/Marketing/Blog/Quarto_Cheat_Sheet.pdf)\n:::\n\n![](images/截屏2023-11-22%2020.30.02.png)\n\n## `project`设置 {#sec-project_setting}\n\n`project`在编写**Quarto Book**或者**Quarto Websites**时使用，因为要创建这些类型的Quarto项目需要通过新建一个Quarto Project来进行，因此YAML中的`project`项就定义了项目的类型是Quarto Book还是Quarto Websites，以及其他项目的基本设定。并且这些类型的Quarto项目会在根目录中生成一个\"**\\_quarto.yml**\"文件，对于YAML的配置在这个独立的文件中进行，从而将项目内的多个.qmd文档合并编译成一个Quarto Book或者Quarto Websites。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-1_9f98e9ad5b51858a158bc43dbb043e5c'}\n\n```{.r .cell-code}\n---\nproject:\n  type: book\n  output-dir: \"docs\" \n  execute-dir: project \n---\n```\n:::\n\n\n-   `project`：项目类型。定义了项目编译后的文档类型，包括\"default\", \"**website**\"（Quarto Websites）和\"**book**\"（Quarto Book）。这里我们在新建项目时选择了Quarto Books，所以这里自动填写了\"books\"。\n\n    ![](images/截屏2023-11-22%2019.34.34.png){width=\"389\"}\n\n-   `output-dir`：输出文件夹。编译后的HTML文件、PDF文件以及运行code chunk后产生的图像、数据等的输出文件夹。上面的例子中将输出文件夹指定为\"docs\"文件夹可以方便将输出的HTML文件通过GitHub Pages发布（详见 @sec-publish_github_pages ）。\n\n-   `execute-dir`：**在编译时**，各个qmd文件内的code chunk脚本运行的根目录，默认是\"file\"，即当前qmd文**档所在目录**，可设置为 \"**project**\"，这样在编译过程中执行代码块时会将运行根目录设置为项目根目录。\n\n## 标题/作者/日期信息\n\n对于HTML的编译，这些信息会展示在文档的开头部分。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-2_3882f7b00c66defc31514aa4ad35cfad'}\n\n```{.r .cell-code}\n---\ntitle: Quarto学习笔记\nsubtitle: 面向多编程语言的新一代R Markdown\nauthor: 杜俊宏\ndate: 2023/11/10\ndate-modified: now\ndate-format: \"YYYY[年]M[月]D[日] HH:mm\"\nauthor-title: 作者\npublished-title: 写作日期\n---\n```\n:::\n\n\n-   `title`：标题。\n\n-   `subtitle`：副标题。在标题下方以较小字号展示。\n\n-   `author`：作者姓名。\n\n-   `author-title`：作者栏的标签。默认标签为\"AUTHOR\"\n\n-   `date`：文档发行日期。日期既可以手动添加，如\"2023/11/10\"，也可以通过`now`（输出样式：2023年11月11日 19:01）或`today`（输出样式：2023年11月11日）自动生成日期。\n\n-   `date-modified`：文档的修改日期。\n\n-   `date-format`：日期格式。\n\n-   `published-title`：修改`date`的标签，默认是\"PUBLISHED DATE\"。\n\n### `date-format`的设置 {#sec-dateformat}\n\n`date-format`通过以下关键词来定义日期格式：\n\n| Style    | Description                                 | Example               |\n|----------|---------------------------------------------|-----------------------|\n| `full`   | A full date that includes the weekday name  | Monday, March 7, 2005 |\n| `long`   | A long date that includes a wide month name | March 7, 2005         |\n| `medium` | A medium date                               | Mar 7, 2005           |\n| `short`  | A short date with a numeric month           | 3/7/05                |\n| `iso`    | A short date in ISO format                  | 2005-03-07            |\n\n也可以通过以下语法更加灵活的定义日期格式：\n\n| **ormat String** | **Output**       | **Description**                       |\n|------------------|------------------|---------------------------------------|\n| `YY`             | 18               | Two-digit year                        |\n| `YYYY`           | 2018             | 四位数年份                            |\n| `M`              | 1-12             | The month, beginning at 1             |\n| `MM`             | 01-12            | 两位数月份                            |\n| `MMM`            | Jan-Dec          | The abbreviated month name            |\n| `MMMM`           | January-December | The full month name                   |\n| `D`              | 1-31             | The day of the month                  |\n| `DD`             | 01-31            | 两位数日期                            |\n| `d`              | 0-6              | The day of the week, with Sunday as 0 |\n| `dd`             | Su-Sa            | The min name of the day of the week   |\n| `ddd`            | Sun-Sat          | The short name of the day of the week |\n| `dddd`           | Sunday-Saturday  | The name of the day of the week       |\n| `H`              | 0-23             | The hour                              |\n| `HH`             | 00-23            | 两位数小时，24小时制                  |\n| `h`              | 1-12             | The hour, 12-hour clock               |\n| `hh`             | 01-12            | The hour, 12-hour clock, 2-digits     |\n| `m`              | 0-59             | The minute                            |\n| `mm`             | 00-59            | 两位数分钟                            |\n| `s`              | 0-59             | The second                            |\n| `ss`             | 00-59            | The second, 2-digits                  |\n| `SSS`            | 000-999          | The millisecond, 3-digits             |\n| `Z`              | +05:00           | The offset from UTC, ±HH:mm           |\n| `A`              | AM PM            |                                       |\n| `a`              | am pm            |                                       |\n| `Do`             | 1st 2nd ... 31st | Day of Month with ordinal             |\n\n可以通过\"\\[\\]\"添加自定义字符。通过这些语法，可以定制符合中文语法的日期格式，如：`date-format: \"YYYY[年]M[月]D[日] HH:mm\"`\n\n::: callout-tip\n关于日期的详细指南，详见：<https://quarto.org/docs/reference/dates.html>。\n:::\n\n## `theme`主题设置 {#sec-theme}\n\n`theme`定义了编译文档的主题。可以直接调用Quarto内置的Bootswatch主题，如\"default\"、\"cerulean\"和\"cosmo\"等，也可以通过Sassy Cascading Style Sheets (SCSS)文件来自定义主题。`theme`参数既可以在YAML中直接定义，也可以在不同的`format`内定义，这样可以对不同的编译格式应用不同的主题。关于Quarto主题的详细指南，参考[Quarto Guide](https://quarto.org/docs/output-formats/html-themes.html)。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-3_bb015a2d42d5f62d49d459d3608e2663'}\n\n```{.r .cell-code}\n---\nformat: \n  html:\n    theme: flatly\n---\n```\n:::\n\n\nQuarto的HTML文档默认使用Bootstrap 5样式输出（`theme: default`）。Quarto内置了来自[Bootswatch](https://bootswatch.com)项目的25个主题。下面列出了可用的主题。关于这些主题的介绍详见：<https://bootswatch.com>。\n\n![](images/screenshot_2023-11-08%2017.58.05.png){width=\"334\"}\n\n个人认为比较美观、清晰的主题有：**Cosmo**、**Flatly**、**Lux**和**Darkly。可以通过**`light`和`dark`**分别设置一套亮色主题和一套深色主题，如：**\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-4_3ec929e4f4993d8c0ac6faf8a9010c3a'}\n\n```{.r .cell-code}\n---\nformat: \n  html:\n    theme:\n      light: flatly\n      dark: darkly\n---\n```\n:::\n\n\n这样，在输出的HTML网页的右上角会出现一个亮色/深色模式的切换开关。\n\n## `toc`目录设置 {#sec-toc}\n\n和`theme`一样`toc`同样可以在YAML中直接定义，也可以在不同的`format`内定义。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-5_b96a94c2231e83a98fbdbee28cc06573'}\n\n```{.r .cell-code}\n---\ntoc: true\ntoc-title: Contents\ntoc-depth: 2 \ntoc-expand: 2 \ntoc-location: left\n---\n```\n:::\n\n\n-   `toc`：是否显示目录。\n\n-   `toc-title`：目录的标题。\n\n-   `toc-depth`：设置目录显示的最低层级（默认为显示到3级标题）。\n\n-   `toc-expand`：在一开始目录显示到多少级，默认显示到一级标题。当向下浏览内容时目录会自动展开到`toc-depth`所设置的层级。设置为`true`时，则在一开始就展开所有目录；设置为`false`则在一开始折叠所有目录。\n\n-   `toc-location`：设置目录的位置。默认在右侧（`right`）,可以设置为`left`或`body`（在文稿最开头显示）。\n\n## `number-sections`标题编号设置 {#sec-number_sections}\n\n和`theme`一样`number-sections`同样可以在YAML中直接定义，也可以在不同的`format`内定义。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-6_c88dedc16416d616f5ed3c87c8702ca7'}\n\n```{.r .cell-code}\nnumber-sections: true\nnumber-depth: 3\n```\n:::\n\n\n-   `number-sections`：设置为`true`时会给各级标题编号。默认为`false`。\n\n-   `number-depth`：编号的最低标题层级。默认给所有级别的标题编号。\n\n-   `{.unnumbered}`：如果想要某一个标题不编号，则把这行命令粘贴到该标题后面。如\"第三章{.unnumbered}\"。\n\n-   `{.unlisted}`：将某个标题设置为不在目录中列出。如\"第三章{.unlisted}\"。如果想要某个标题既不编号也不在目录中列出就可以这样写：\"标题{.unnumbered .unlisted}\"。\n\n## 排版设置\n\n主要定义了图/表标题的位置、参考文献/脚注的位置、页面大小和页边距等。可以在YAML中直接定义，也可以在不同的`format`内定义。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-7_67695a915274fe228128b4c160d04844'}\n\n```{.r .cell-code}\n---\nfig-cap-location: bottom\ntbl-cap-location: top\nreference-location: margin \ncitation-location: document  \n---\n```\n:::\n\n\n-   `fig-cap-location`：图片标题的位置。默认在图片底部（`bottom`）。\n-   `tbl-cap-location`：表格标题的位置。默认在表格上方（`top`）。\n-   `reference-location`：脚注的默认展示位置。默认为文档最后 (`document`)。\n-   `citation-location`：参考文献的默认展示位置。默认为文档最后 (`document`)。\n\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| Option               | Description                                                                                                                           |\n+======================+=======================================================================================================================================+\n| `reference-location` | Where to place footnotes. Defaults to `document`.\\                                                                                    |\n|                      | \\[`document` \\| `section` \\| `block` \\| `margin` \\]                                                                                   |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `citation-location`  | Where to place citations. Defaults to `document`.\\                                                                                    |\n|                      | \\[`document` \\| `margin` \\]                                                                                                           |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `cap-location`       | Where to place figure and table captions. Defaults to `bottom` for figures and `top` for tables. \\| \\[`top` \\| `bottom` \\| `margin`\\] |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `fig-cap-location`   | Where to place figure captions. Defaults to `bottom`.\\                                                                                |\n|                      | \\[`top` \\| `bottom` \\| `margin`\\]                                                                                                     |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n| `tbl-cap-location`   | Where to place table captions. Defaults to `top`.\\                                                                                    |\n|                      | \\[`top` \\| `bottom` \\| `margin`\\]                                                                                                     |\n+----------------------+---------------------------------------------------------------------------------------------------------------------------------------+\n\n: 图/表标题位置、参考文献/脚注的位置设置 {#tbl-图表标题位置设置}\n\n## `execute`代码块执行设置\n\n`execute`用来指定代码块的执行行为，例如是否运行、是否显示警告信息和是否缓存运行结果等。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-8_9ee5d420807334e1ddb0b32a8d6b934c'}\n\n```{.r .cell-code}\n---\nexecute:\n      eval: false\n      warning: false\n      cache: true\n---\n```\n:::\n\n\n-   `eval`：设置为`false`时**只显示代码，不运行**。默认为`true`。\n\n-   `echo`：设置为`false`时在输出文件中**不显示代码，仅显示代码的运行结果**。设置为`fenced`，会将代码块的设置，即\"#\\|\"符号后的内容，也展示出来。@fig-箱型图 这个代码块就用了`echo: fenced`这个设定，可以看一下效果。默认为`true`。\n\n-   `output`：设置为`false`时，**只运行代码不显示运行结果**。默认为`true`。\n\n-   `warning`：是否显示代码运行的警告信息。默认为`true`。\n\n-   `cache`：是否开启运算结果缓存。默认为`false`。如果设置为`true`，就会在编译时将源代码的运算结果保存到文件目录中后缀为\"\\_cache\"的文件夹中。这样在重新编译同一个文档时会加快编译速度。\n\n除了对代码执行行为的全局设置，我们也可以针对每个代码块设置其执行行为。许多参数和YAML中的语法相似，只不过需要在每个参数前加上\"**#\\|**\"符号。如：\n\n\n::: {.cell hash='yaml_settings_cache/html/fig-箱型图_c1f567347a4a02585387094b0ec09e9d'}\n\n````{.cell-code}\n```{{r}}\n#| eval: true\n#| warning: false\n#| output: true\n#| label: fig-箱型图\n#| fig-cap: 箱型图\nboxplot(1:100)\n```\n````\n\n::: {.cell-output-display}\n![箱型图](yaml_settings_files/figure-html/fig-箱型图-1.png){#fig-箱型图 width=672}\n:::\n:::\n\n\n::: callout-caution\n有时候当一个代码块需要读取一个较大的对象时（如包含大量细胞的Seurat对象），尽管运行该代码块不会报错，但是在编译时可能会出现如下报错：\n\n```         \nlong vectors not supported yet: /Volumes/Builds/R4/R-4.3.2/src/main/connections.c:6093\n```\n\n这时我们可以通过添加`#| cache-lazy: false`命令，[取消延迟缓存](https://bookdown.org/yihui/rmarkdown-cookbook/cache-lazy.html)来解决这个问题：\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-10_018f7dc5fb90aa1648a89a7d38c48b23'}\n\n````{.cell-code}\n```{{r}}\n#| cache-lazy: false\nlibrary(Seurat)\nseurat_integrated <- readRDS(\"output/scRNA-seq_online/seurat_clustered.rds\")\n```\n````\n:::\n\n:::\n\n## `crossref`交叉引用设置\n\n`crossref`定义了图/表的标签、默认引用样式、编号类型等。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-11_677cd1a87f696065a5e723e3ef9cafea'}\n\n```{.r .cell-code}\n---\ncrossref:\n  fig-title: 图     \n  tbl-title: 表     \n  title-delim: \"：\"  \n  fig-prefix: 图   \n  tbl-prefix: 表    \n  sec-prefix: 章节 \n  ref-hyperlink: true \n  fig-labels: arabic    \n  tbl-labels: arabic   \n  subref-labels: alpha A \n---\n```\n:::\n\n\n-   `fig-title`: 图的默认标签文字（默认是\"Figure\"）\n\n-   `tbl-title`: 表的默认标签文字（默认是\"Table\"）\n\n-   `title-delim`: 图、表标签文字和后面的图、表标题之间的连接符（默认是\":\"）\n\n-   `fig-prefix`: 图的默认引用样式（默认是\"Figure\"）\n\n-   `tbl-prefix`: 表的默认引用样式（默认是\"Table\"）\n\n-   `sec-prefix`: 章节的默认引用样式（默认是\"Section\"）\n\n-   `ref-hyperlink`: 是否为交叉引用加上内部链接（默认是\"true\"）\n\n-   `fig-labels`: 图片的编号类型（默认是阿拉伯数字：arabic)\n\n-   `tbl-labels`: 表格的编号类型（默认是阿拉伯数字：arabic）\n\n-   `subref-labels`: 次级引用编号类型，如组图中的小图（默认是小写字母：alpha a）\n\n可用的编号类型包括：\n\n-   `arabic` (1, 2, 3)\n\n-   `roman` (I, II, III, IV)\n\n-   `roman i` (i, ii, iii, iv)\n\n-   `alpha x` (start from letter 'x')\n\n-   `alpha X` (start from letter 'X')\n\n## 参考文献设置 {#sec-ref_settings}\n\n只要在编辑qmd文档时插入了参考文献，YAML中会新增参考文献的配置选项：`bibliography: references.bib`。同时根目录下会生成一个名为\"references.bib\"的参考文献配置文件。该配置文件包括了qmd文档中所插入的所有参考文献的列表。以BibTeX/Citation风格语言编写。`bibliography`指定了这个参考文献配置文件所在的路径。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-12_62a5a45ba70551a618df44114c8c1fa3'}\n\n```{.r .cell-code}\n---\nbibliography: references.bib\n---\n```\n:::\n\n\n## `format`编译设置\n\n`format`定义了qmd文档编译后的文件类型，例如：\"html\", \"pdf\", \"docx\", \"odt\", \"pptx\", \"revealjs\", \"beamer\", \"gfm\"（GitHub风格的Markdown文档）, \"commonmark\", \"mediawiki\", \"epub\", \"ipynb\"。不同的编译格式对应的子项设置各不相同，有些参数适用于某些格式但是在另一些格式中则无法兼容。所有支持的编译格式详见[Quarto官方文档](https://quarto.org/docs/output-formats/all-formats.html)。下面的案例为编译HTML和GFM的常用设置。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-13_f3e7c13216b0de49e039b860510b78c8'}\n\n```{.r .cell-code}\n---\nformat: \n  html:\n    theme: \n      light: flatly \n      dark: darkly \n  gfm:\n    toc: true\n    toc-depth: 1\n    number-sections: true\n    citation-location: document\n    output-file: \"README.md\" \n---\n```\n:::\n\n\n编译Quarto文档时，首先[knitr](http://yihui.name/knitr/)将运行所有代码块，并创建一个新的markdown（.md）文档，其中包括源代码及其输出结果。接下来，生成的markdown文件经过[pandoc](http://pandoc.org/)（RStudio内置了pandoc）处理后，被转换成HTML、PDF或者Word等我们需要的文档格式。RStudio封装了这些操作，当我们完成Quarto编辑，点击渲染时，就会完成上述过程。\n\n[*Quarto的渲染工作流*]{.smallcaps}\n\n![](images/rstudio-qmd-how-it-works.png)\n\n### 编译HTML\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-14_22196196ae67f1ad3fd012c31f56fe31'}\n\n```{.r .cell-code}\n---\nformat: \n  html:\n    theme: \n      light: flatly \n      dark: darkly \n    embed-resources: false\n    code-tools: true\n    title-block-banner: images/banner.jpg \n    title-block-banner-color: \"black\"\n    toc: true\n    toc-title: 目录\n    toc-location: left\n    toc-depth: 2\n    toc-expand: 1\n    number-sections: true\n    number-depth: 3\n    anchor-sections: true\n    link-external-icon: true\n    link-external-newwindow: true\n    df-print: kable \n    code-link: true\n---\n```\n:::\n\n\n-   `theme`：主题。同 @sec-theme 。\n\n-   `embed-resources`：是否将所有源文件嵌入HTML文件以方便分享。默认为\"false\"。\n\n-   `code-tools`：是否在网页右上角显示\"\\<code\\>\"按钮。点击该按钮可以看到Quarto文档的原始markdown代码。\n\n-   `title-block-banner`：标题横幅设置。`title-block-banner`有以下选项：\n\n    -   `true`：将标题以网页横幅的形式展示，样式为`them`中所选样式的默认样式。\n\n    -   具体颜色：如`title-block-banner: \"#003262\"`。\n\n    -   图片路径：如`title-block-banner: images/banner.jpeg`。\n\n-   `toc`相关设置：同 @sec-toc 。\n\n-   `number-sections`、`number-depth`：同 @sec-number_sections 。\n\n-   `anchor-sections`: 设置为`true`时，当鼠标移到各级标题上时会显示anchor link，方便我们复制直接定位到该标题的超链接。\n\n-   `link-external-icon`：设置为`true`时会在外部链接上显示一个小图标。\n\n-   `link-external-newwindow`：是否在新标签页打开外部链接。\n\n-   `df-print`：表格输出样式\n\n-   `code-copy`：设置代码复制按钮：\n\n    -   `true`: 总是在代码块右上角显示代码复制按钮。\n\n    -   `false`: 隐藏代码复制按钮。\n\n    -   `hover`：（默认）当鼠标移过时显示代码复制按钮。\n\n-   `code-fold`: 是否折叠代码。\n\n-   `code-link`: 是否自动为函数加上超链接。该功能基于[downlit](https://downlit.r-lib.org/)包，可以自动为识别到的函数加上一个链接到官方文档的超链接。\n\n### 编译GitHub Flavored Markdown（GFM） {#sec-github-markdown}\n\n我们可以将Quarto文档转换为GitHub风格的Markdown文档（GitHub Flavored Markdown，GFM）。这可以用来生成GitHub项目的README.md文档。\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-15_7780638ba77bab675f50fa54eb003bb8'}\n\n```{.r .cell-code}\n---\ntitle: \"My Project\"\nformat: \n  gfm:\n    identifier-prefix: readme # 标识符\n    # preview-mode: raw # 预览原始markdown\n    keep-yaml: true\n    toc: true\n    toc-depth: 1\n    number-sections: true\n    citation-location: document\n    output-file: \"README.md\" # 输出文档的文件名\n---\n```\n:::\n\n\n### 编译PDF\n\n如果要在rmarkdown、bookdown中使用PDF输出功能， 可以在在R中安装tinytex扩展包并安装TinyTeX编译软件：\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-16_808cd27416c4cfce2fefae6122791baa'}\n\n```{.r .cell-code}\ninstall.packages('tinytex')\ntinytex::install_tinytex()\n```\n:::\n\n\n其中上面第一行命令安装R的tinytex扩展包， 第二行将下载LaTeX编译程序的服务器设置为清华大学tuna镜像站， 第三行安装LaTeX编译程序。\n\n如果安装成功， TinyTeX软件包在MS Windows系统中一般会安装在 `C:\\Users\\用户名\\AppData\\Roaming\\TinyTeX`目录中， 其中\"用户名\"应替换成系统当前用户名。 如果需要删除TinyTeX软件包， 只要直接删除那个子目录就可以。\n\n为了判断TinyTeX是否安装成功， 在RStudio中运行：\n\n\n::: {.cell hash='yaml_settings_cache/html/unnamed-chunk-17_5f8a76fd511c3a1290a79b987c85e838'}\n\n```{.r .cell-code}\ntinytex::is_tinytex()\n```\n:::\n\n\n结果应为`TRUE`, 出错或者结果为`FALSE`都说明安装不成功。\n\n当用户使用RMarkdown和tinytex包转换latex并编译为PDF时， 如果缺少某些latex宏包， tinytex会自动安装缺少的宏包。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
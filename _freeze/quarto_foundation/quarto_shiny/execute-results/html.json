{
  "hash": "073b1aac1b3e4712ff31dd15f2a35c44",
  "result": {
    "markdown": "---\ntitle: \"在Quarto中嵌入Shiny应用程序\"\nfilters: \n  - shinylive\n---\n\n\n> 参考：[*R-shinylive app in Quarto!*](https://quarto.thecoatlessprofessor.com/r-shinylive-demo/)\n\n::: callout-important\n本节不涉及Shiny的教程，请在学习本节前确保已基本掌握Shiny的使用，Shiny官方提供了一个很好的[Shiny入门指南](https://shiny.posit.co/r/getstarted/shiny-basics/lesson1/index.html)，通过它可以对Shiny应用程序的开发有一个全局的了解。\n\n![](images/截屏2024-01-13%2018.28.35.png)\n:::\n\n本节主要介绍如何在Quarto文档中嵌入Shiny交互式应用程序，而无需依赖服务器。这是一个Quarto的全新特性，感谢Barret Schloerke等人开发的[`shinylive`包](https://posit-dev.github.io/r-shinylive/index.html)让这一特性得以实现。\n\nShinylive是一种非服务器依赖的Shiny，它使得Shiny应用程序能够在网页浏览器中直接运行 ，而不需要依赖后台服务器。在 2022 年的Posit大会上，第一次推出了基于 WebAssembly 和 Pyodide 的 [Shinylive for Python](https://github.com/posit-dev/py-shinylive)。随后，在2023年的Posit大会上，首次推出了基于[webR](https://docs.r-wasm.org/webr/)的R版本的`shinylive`。该包的第一个[CRAN版本](https://cloud.r-project.org/web/packages/shinylive/index.html)于2023年10月11日首次发布。\n\n![Shinylive archticture, source: Joe Cheng \"Running Shiny without a server\"](images/shinylive-webr.png){width=\"526\"}\n\n`shinylive`视频教程《*Creating a Serverless R Shiny App using Quarto with R Shinylive*》：\n\n\n{{< video https://www.youtube.com/watch?v=6y2FnAugP8E >}}\n\n\n\n> Currently, there are three methods (or formats) to use Shinylive applications:\n>\n> -   [Render a Shiny app into HTML static file using the shinylive package](https://github.com/RamiKrispin/shinylive-r)\n>\n> -   Host a Shiny app in Fiddle - a built-in web application to run Shiny R and Python applications\n>\n> -   Embed Shiny app in Quarto documentation using the quarto-shinylive extension for Quarto (引自：[**shinylive-r**](https://github.com/RamiKrispin/shinylive-r))。\n\n本节我们介绍第三种方法，即在Quarto文档中通过[**quarto-shinylive extension**](https://posit-dev.github.io/r-shinylive/index.html#setup---quarto)嵌入Shiny应用程序。\n\n## 安装`shinylive`包\n\n要实现Shiny应用程序的嵌入，需要依赖`shinylive`包，可以从CRAN直接安装该包：\n\n``` md\ninstall.packages(\"shinylive\")\n```\n\n## 建立Quarto Project\n\n创建Quarto项目的方法详见[此前的章节](/quarto_foundation/yaml_settings.qmd#sec-project_setting)。需要注意的是，`shinylive` 扩展程序必须在 Quarto 项目目录内使用，否则在尝试渲染文档时会报错。错误信息如下：\n\n``` md\nERROR:\nThe shinylive extension must be used in a Quarto project directory\n(with a _quarto.yml file).\n```\n\n## **安装shinylive扩展程序**\n\n为Quarto安装`shinylive`**扩展程序。**在Rstudio终端（Terminal）面板中输入：\n\n``` md\nquarto add quarto-ext/shinylive\n```\n\n![](images/install-shinylive-in-terminal.png)\n\n## YAML设置\n\n为了让Quarto能够调用Shiny应用程序，需要在Quarto文档的YAML设置中加上`filters-shinylive`命令，如下：\n\n``` md\ntitle: \"Our first r-shinylive Quarto document!\"\nfilters:\n  - shinylive\n---\n```\n\n## 编写Shiny程序\n\n我们需要把Shiny程序的代码放到一个特殊的`{shinylive-r}`代码块内：\n\n```` md\n```{shinylive-r}\n#| standalone: true\n\nlibrary(shiny)\n\n# Define your Shiny UI here\nui <- fluidPage(\n  # Your UI components go here\n)\n\n# Define your Shiny server logic here\nserver <- function(input, output, session) {\n  # Your server code goes here\n}\n\n# Create and launch the Shiny app\nshinyApp(ui, server)\n```\n````\n\n::: callout-caution\n`{shinylive-r}`代码块必须包含 `#| standalone: true`，这表示代码代表了一个完整的独立 Shiny 应用程序。目前，我们需要把完整的Shiny应用程序的代码，包括ui、server等全部包括进一个代码块内。未来，Quarto可能会支持在一个qmd文档内的多个代码块内分别包含ui、server等结构。\n:::\n\n## 渲染Quarto文档\n\n编写好所有内容后，我们即可以通过点击“Render”按钮渲染嵌入了Shiny应用程序的Quarto文档了。渲染后，会在我们的Quarto项目根目录下生成一个`_extensions`文件夹，其结构如下：\n\n![](images/截屏2024-01-13%2017.45.20.png)\n\n## 发布Quarto文档\n\n一旦制作完成了令人满意的Quarto文档，就可以GitHub Pages和Quarto Pub**等**通过多种途径发布您的作品了。[后面的章节](/quarto_foundation/github_pages.qmd)对如何发布GitHub Pages有详细的说明。\n\n::: callout-tip\n更多关于shinylive的信息，参阅：[*R-shinylive app in Quarto!*](https://quarto.thecoatlessprofessor.com/r-shinylive-demo/)\n:::\n\n------------------------------------------------------------------------\n\n## 案例\n\n### 案例一\n\n下面是一个来自[Shiny官方入门指南](https://shiny.posit.co/r/getstarted/shiny-basics/lesson5/)中的案例：\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\n\n# Define UI ----\nui <- fluidPage(\n\n  # App title ----\n  titlePanel(\"Hello World!\"),\n\n  # Sidebar layout with input and output definitions ----\n  sidebarLayout(\n\n    # Sidebar panel for inputs ----\n    sidebarPanel(\n\n      # Input: Slider for the number of bins ----\n      sliderInput(inputId = \"bins\",\n                  label = \"Number of bins:\",\n                  min = 5,\n                  max = 50,\n                  value = 30)\n\n    ),\n\n    # Main panel for displaying outputs ----\n    mainPanel(\n\n      # Output: Histogram ----\n      plotOutput(outputId = \"distPlot\")\n\n    )\n  )\n)\n\n# Define server logic required to draw a histogram ----\nserver <- function(input, output) {\n\n  # Histogram of the Old Faithful Geyser Data ----\n  # with requested number of bins\n  # This expression that generates a histogram is wrapped in a call\n  # to renderPlot to indicate that:\n  #\n  # 1. It is \"reactive\" and therefore should be automatically\n  #    re-executed when inputs (input$bins) change\n  # 2. Its output type is a plot\n  output$distPlot <- renderPlot({\n\n    x    <- faithful$waiting\n    bins <- seq(min(x), max(x), length.out = input$bins + 1)\n\n    hist(x, breaks = bins, col = \"#007bc2\", border = \"orange\",\n         xlab = \"Waiting time to next eruption (in mins)\",\n         main = \"Histogram of waiting times\")\n\n    })\n\n}\n\n# Run the app ----\nshinyApp(ui = ui, server = server)\n```\n\n代码：\n\n```` md\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 600\nlibrary(shiny)\nlibrary(bslib)\n\n# Define UI for app that draws a histogram ----\nui <- page_sidebar(\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver <- function(input, output, session) {\n  data <- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot <- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x <- seq(from = -2, to = 2, length.out = 500)\n    y <- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd <- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n```\n````\n\n### 案例二\n\n来自：[***shinylive-in-book-test***](https://github.com/topepo/shinylive-in-book-test)\n\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| label: fig-shiny-spline\n\nlibrary(ggplot2)\nlibrary(htmltools)\n\nui <- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    imageOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\n\nserver <- function(input, output, session) {\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations on GitHub\n  \n  pred_path <-\n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"predicted_values.RData\",                     \n      sep = \"/\"                                             \n    )                                                       \n  data_path <-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"sim_val.RData\",                              \n      sep = \"/\"                                             \n    )                                                       \n  \n  rdata_file <- tempfile()\n  download.file(pred_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  download.file(data_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  \n  # Set some ranges for the plot\n  rngs <- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n  \n  output$spline_contours <-\n    renderImage({\n      \n      preds <- predicted_values[predicted_values$deg_free == input$deg_free,]\n      \n      p <-\n        ggplot(preds, aes(A, B)) +\n        # Plot the validation set\n        geom_point(\n          data = sim_val, \n          aes(col = class, pch = class), \n          alpha = 1 / 2,\n          cex = 3\n        ) +\n        # Show the class boundary\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1 / 2,\n          linewidth = 3 / 2,\n          col = \"black\"\n        ) +\n        # Formatting\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n      \n      file <-\n        htmltools::capturePlot(\n          print(p), \n          tempfile(fileext = \".svg\"),\n          grDevices::svg,\n          width = 4, \n          height = 4\n        )\n      list(src = file)\n    }, \n    deleteFile = TRUE)\n}\n\nshinyApp(ui = ui, server = server)\n```\n\n代码：\n\n```` md\n```{shinylive-r}\n#| standalone: true\n#| viewerHeight: 500\n#| label: fig-shiny-spline\n\nlibrary(ggplot2)\nlibrary(htmltools)\n\nui <- fluidPage(\n  \n  fluidRow(\n    column(8, \n           sliderInput(\n             \"deg_free\", \n             label = \"Spline degrees of freedom:\",\n             min = 3L, value = 3L, max = 8L, step = 1L\n           )\n    ),\n    \n    imageOutput(\"spline_contours\", height = \"400px\")\n  )\n)\n\n\nserver <- function(input, output, session) {\n  \n  # ------------------------------------------------------------------------\n  # Input data from remote locations on GitHub\n  \n  pred_path <-\n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"predicted_values.RData\",                     \n      sep = \"/\"                                             \n    )                                                       \n  data_path <-                                              \n    paste(                                                  \n      \"https://raw.githubusercontent.com\",                  \n      \"topepo\", \"shinylive-in-book-test\",                   \n      \"main\", \"sim_val.RData\",                              \n      sep = \"/\"                                             \n    )                                                       \n  \n  rdata_file <- tempfile()\n  download.file(pred_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  download.file(data_path, destfile = rdata_file)           \n  load(rdata_file)                                          \n  \n  # Set some ranges for the plot\n  rngs <- list(A = c(-3.3, 3.3), B = c(-4.4, 4.4))\n  \n  output$spline_contours <-\n    renderImage({\n      \n      preds <- predicted_values[predicted_values$deg_free == input$deg_free,]\n      \n      p <-\n        ggplot(preds, aes(A, B)) +\n        # Plot the validation set\n        geom_point(\n          data = sim_val, \n          aes(col = class, pch = class), \n          alpha = 1 / 2,\n          cex = 3\n        ) +\n        # Show the class boundary\n        geom_contour(\n          aes(z = .pred_one),\n          breaks = 1 / 2,\n          linewidth = 3 / 2,\n          col = \"black\"\n        ) +\n        # Formatting\n        lims(x = rngs$A, y = rngs$B) +\n        theme_bw() + \n        theme(legend.position = \"top\")\n      \n      file <-\n        htmltools::capturePlot(\n          print(p), \n          tempfile(fileext = \".svg\"),\n          grDevices::svg,\n          width = 4, \n          height = 4\n        )\n      list(src = file)\n    }, \n    deleteFile = TRUE)\n}\n\nshinyApp(ui = ui, server = server)\n```\n````\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell hash='quarto_shiny_cache/html/unnamed-chunk-1_c4126a6444620f281f777e03856823a4'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.3.2    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.3.2       htmltools_0.5.7   rstudioapi_0.15.0 yaml_2.3.8       \n [9] rmarkdown_2.25    knitr_1.45        jsonlite_1.8.8    xfun_0.41        \n[13] digest_0.6.34     rlang_1.1.3       evaluate_0.23    \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
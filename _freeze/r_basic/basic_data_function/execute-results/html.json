{
  "hash": "54d52211ee760b4b9d726abbc7116415",
  "result": {
    "markdown": "---\ntitle: \"数据处理基本函数\"\n---\n\n\n# 数据展示\n\n载入示例数据：\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-1_b40a1c2d9d98bfa293dc1d8ef3b8c01e'}\n\n```{.r .cell-code}\nmydata <- readRDS(\"data/r_basic/lms_ess.rds\")\n```\n:::\n\n\n## 展示最大值、最小值、平均数、中位数、缺失值数量\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-2_36a49fb97cc22987a4d5c1b797b69d9d'}\n\n```{.r .cell-code}\nsummary(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   year           year2          age            race                 marriage  \n 2010:111   2010-2011:216   Min.   :23.00   White :554   Married         :386  \n 2011:105   2012-2013:217   1st Qu.:48.00   Black : 99   Single/Unmarried:166  \n 2012:118   2014-2016:300   Median :55.00   Others: 76   Others          :148  \n 2013: 99                   Mean   :55.77   NA's  :  4   NA's            : 33  \n 2014:100                   3rd Qu.:64.00                                      \n 2015:101                   Max.   :95.00                                      \n 2016: 99                                                                      \n                                    grade            grade2      tumor_size   \n Well differentiated; Grade I          : 58   Low-grade :181   Min.   :  4.0  \n Moderately differentiated; Grade II   :123   High-grade:323   1st Qu.: 60.0  \n Poorly differentiated; Grade III      :105   Gx        :229   Median : 95.0  \n Undifferentiated; anaplastic; Grade IV:218                    Mean   :107.9  \n NA's                                  :229                    3rd Qu.:135.0  \n                                                               Max.   :950.0  \n                                                               NA's   :79     \n  his      T_stage   T_stage_plus N_stage    M_stage   figo       figo_plus  \n LMS:448   T1:499   T1b    :340   N0  :680   M0:628   I  :442   IB     :290  \n ESS:285   T2:131   T1a    :114   N1  : 49   M1:105   II : 82   IA     :109  \n           T3: 85   T2a    : 67   NA's:  4            III: 89   IVB    :105  \n           T4: 18   T3a    : 57                       IV :120   IIIA   : 39  \n                    T2b    : 55                                 IIIC   : 32  \n                    T1     : 45                                 (Other): 30  \n                    (Other): 55                                 NA's   :128  \n        peri         surg       alnd       plnd       lnd        rad     \n Negtive  :674   TH+BSO:629   No  :586   No  :417   No  :412   No  :609  \n Malignant: 59   TH    : 47   Yes :111   Yes :282   Yes :288   Yes :117  \n                 RH/EH : 57   NA's: 36   NA's: 34   NA's: 33   NA's:  7  \n                                                                         \n                                                                         \n                                                                         \n                                                                         \n   chem     dead     status         time                    income   \n No  :365   0:365   0   :365   Min.   :  2.00   <$60,000       :186  \n Yes :314   1:368   1   :332   1st Qu.: 15.00   $60,000-$74,999:293  \n NA's: 54           2   : 29   Median : 43.00   >$75,000       :254  \n                    NA's:  7   Mean   : 47.53                        \n                               3rd Qu.: 76.00                        \n                               Max.   :119.00                        \n                                                                     \n```\n:::\n:::\n\n\n## 展示变量数量和样本数量\n\n### 展示变量（列）数\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-3_edef10b14e703011841513ab993c5e4f'}\n\n```{.r .cell-code}\ndim(mydata)[2]#dim()函数获取数据的维度，即行、列数。所以[1]输出行数，[2]输出列数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n\n```{.r .cell-code}\nncol(mydata)#另一种方式\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 26\n```\n:::\n:::\n\n\n### 展示行数\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-4_b413c13e35c6e5ebe066838140a1b343'}\n\n```{.r .cell-code}\ndim(mydata)[1]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 733\n```\n:::\n\n```{.r .cell-code}\n#或者\nnrow(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 733\n```\n:::\n:::\n\n\n### 综合展示\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-5_618d30a850d42a4eed6b4ab0cde1dcbd'}\n\n```{.r .cell-code}\nprint(paste0(\"该数据集有 \",dim(mydata)[1],\" 个样本； \",dim(mydata)[2],\" 个变量\"))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"该数据集有 733 个样本； 26 个变量\"\n```\n:::\n:::\n\n\n### 展示所有变量名\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-6_d7e0f1112e30ebe7cdd1d7fdcea39412'}\n\n```{.r .cell-code}\ncolnames(mydata)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"year\"         \"year2\"        \"age\"          \"race\"         \"marriage\"    \n [6] \"grade\"        \"grade2\"       \"tumor_size\"   \"his\"          \"T_stage\"     \n[11] \"T_stage_plus\" \"N_stage\"      \"M_stage\"      \"figo\"         \"figo_plus\"   \n[16] \"peri\"         \"surg\"         \"alnd\"         \"plnd\"         \"lnd\"         \n[21] \"rad\"          \"chem\"         \"dead\"         \"status\"       \"time\"        \n[26] \"income\"      \n```\n:::\n\n```{.r .cell-code}\n#或者通过dput函数将所有变量名输出为向量\ndput(names(mydata))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\nc(\"year\", \"year2\", \"age\", \"race\", \"marriage\", \"grade\", \"grade2\", \n\"tumor_size\", \"his\", \"T_stage\", \"T_stage_plus\", \"N_stage\", \"M_stage\", \n\"figo\", \"figo_plus\", \"peri\", \"surg\", \"alnd\", \"plnd\", \"lnd\", \"rad\", \n\"chem\", \"dead\", \"status\", \"time\", \"income\")\n```\n:::\n:::\n\n\n### 展示所有行名称\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-7_aafb0fbb39e67a62a88d585a8656963f'}\n\n````{.cell-code}\n```{{r}}\n#| eval: false\nrownames(mydata)\n```\n````\n:::\n\n\n### 展示某个变量的所有值及其频数\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-8_483ae05e93ad87cc7c4eb326c8474e0a'}\n\n```{.r .cell-code}\ntable(mydata$his)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nLMS ESS \n448 285 \n```\n:::\n\n```{.r .cell-code}\nhist(mydata$age,col=\"coral\")#以直方图的形式展示\n```\n\n::: {.cell-output-display}\n![](basic_data_function_files/figure-html/unnamed-chunk-8-1.png){width=672}\n:::\n:::\n\n\n## 展示缺失值的构成\n\n加载案例数据：这里用VIM包内自带的sleep数据集为例进行演示。该数据集显示了两种安眠药对10名患者的影响(与对照组相比，睡眠时间的增加量)。其中就包含了很多缺失值。\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-9_b8f95a2bb54ee35b0824cc56d8f5e6f2'}\n\n```{.r .cell-code}\ndata(sleep, package=\"VIM\")\nhead(sleep)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   BodyWgt BrainWgt NonD Dream Sleep Span Gest Pred Exp Danger\n1 6654.000   5712.0   NA    NA   3.3 38.6  645    3   5      3\n2    1.000      6.6  6.3   2.0   8.3  4.5   42    3   1      3\n3    3.385     44.5   NA    NA  12.5 14.0   60    1   1      1\n4    0.920      5.7   NA    NA  16.5   NA   25    5   2      3\n5 2547.000   4603.0  2.1   1.8   3.9 69.0  624    3   5      4\n6   10.550    179.5  9.1   0.7   9.8 27.0  180    4   4      4\n```\n:::\n:::\n\n\n首先展示缺失值的比例。\n\n-   左侧直方图展示单个变量的缺失比例，其中NonD缺失比例大于20%。\n\n-   右侧直方图展示各个变量的缺失模式。如第一行表示NonD、Dream和Span 3个变量共同缺失的比例为1.6%。NonD的缺失比例=1.6%+3.2%+3.2%+14.5%=22.5%。所有变量均无缺失值的个案占67.7%\n\n输出的结果部分同样展示了各个变量缺失的具体比例\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-10_fbf43b2da5a0058051364efb41aabf76'}\n\n```{.r .cell-code}\nlibrary(VIM)\naggr_plot<-aggr(sleep,\n                prop=T,\n                numbers=T,\n                sortVars=TRUE,\n                gap=2,\n                ylab=c(\"Histogram of missing data\",\"Pattern\"))\n```\n\n::: {.cell-output-display}\n![](basic_data_function_files/figure-html/unnamed-chunk-10-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Variables sorted by number of missings: \n Variable      Count\n     NonD 0.22580645\n    Dream 0.19354839\n    Sleep 0.06451613\n     Span 0.06451613\n     Gest 0.06451613\n  BodyWgt 0.00000000\n BrainWgt 0.00000000\n     Pred 0.00000000\n      Exp 0.00000000\n   Danger 0.00000000\n```\n:::\n:::\n\n\n展示缺失值的数量。输出的结果部分展示了各个变量缺失的具体数量。\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-11_40f89a7107f04d9aef4396b665d2aa89'}\n\n```{.r .cell-code}\naggr_plot<-aggr(sleep,\n                prop=F,\n                numbers=T,\n                sortVars=TRUE,\n                gap=2,\n                ylab=c(\"Histogram of missing data\",\"Pattern\"))\n```\n\n::: {.cell-output-display}\n![](basic_data_function_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Variables sorted by number of missings: \n Variable Count\n     NonD    14\n    Dream    12\n    Sleep     4\n     Span     4\n     Gest     4\n  BodyWgt     0\n BrainWgt     0\n     Pred     0\n      Exp     0\n   Danger     0\n```\n:::\n:::\n\n\n以表格的形式展示各个变量的缺失模式（同右侧图形）\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-12_71035b8e9965cb4acfc0d338ddc4a351'}\n\n```{.r .cell-code}\nsummary(aggr_plot)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\n Missings per variable: \n Variable Count\n  BodyWgt     0\n BrainWgt     0\n     NonD    14\n    Dream    12\n    Sleep     4\n     Span     4\n     Gest     4\n     Pred     0\n      Exp     0\n   Danger     0\n\n Missings in combinations of variables: \n        Combinations Count   Percent\n 0:0:0:0:0:0:0:0:0:0    42 67.741935\n 0:0:0:0:0:0:1:0:0:0     3  4.838710\n 0:0:0:0:0:1:0:0:0:0     2  3.225806\n 0:0:0:0:0:1:1:0:0:0     1  1.612903\n 0:0:1:0:1:0:0:0:0:0     2  3.225806\n 0:0:1:1:0:0:0:0:0:0     9 14.516129\n 0:0:1:1:0:1:0:0:0:0     1  1.612903\n 0:0:1:1:1:0:0:0:0:0     2  3.225806\n```\n:::\n:::\n\n\n通过marginplot分析缺失值。空心的湖蓝色圆圈表示非缺失值，红色实心圆圈表示缺失值，深红色实心圆圈表示两个变量均缺失。图左侧的红色箱型图显示了在保留NonD缺失值的情况下Dream的分布，蓝色箱型图显示了删除NonD缺失值后Dream的分布。图表底部的框图正好相反，反映了在保留和删除Dreamq缺失值的情况下NonD的分布情况。如果数据是完全随机缺失(MCAR : missing completely at random)，那么红色和蓝色箱型图将十分接近\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-13_fac32015e00a2f387c6d01470b8087f3'}\n\n```{.r .cell-code}\nmarginplot(sleep[3:4])\n```\n\n::: {.cell-output-display}\n![](basic_data_function_files/figure-html/unnamed-chunk-13-1.png){width=672}\n:::\n:::\n\n\n删除所有缺失值\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-14_0a4e895e68fb52e26124e9b7fe667a5c'}\n\n```{.r .cell-code}\nsleep<-na.omit(sleep)\n```\n:::\n\n\n# 数据整理\n\n## 排序\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-15_0f321cb57d085f7d30b41f73965e15ab'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata <- arrange(mydata, age)#按照某列升序排序\nmydata$age[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 23 24 24 24 26 27 27 27 27 28\n```\n:::\n\n```{.r .cell-code}\nmydata <- arrange(mydata, desc(age))#按照某列降序排序\nmydata$age[1:10]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] 95 92 89 87 85 85 85 84 82 82\n```\n:::\n\n```{.r .cell-code}\nmydata <- arrange(mydata, his, tumor_size)#根据多列排序\nmydata[1:5,c(\"his\", \"tumor_size\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  his tumor_size\n1 LMS         10\n2 LMS         12\n3 LMS         12\n4 LMS         15\n5 LMS         17\n```\n:::\n\n```{.r .cell-code}\nmydata[445:455,c(\"his\", \"tumor_size\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n    his tumor_size\n445 LMS         NA\n446 LMS         NA\n447 LMS         NA\n448 LMS         NA\n449 ESS          4\n450 ESS          5\n451 ESS          5\n452 ESS          9\n453 ESS         10\n454 ESS         10\n455 ESS         12\n```\n:::\n:::\n\n\n也可用自带base包内的`order()`函数排序：\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-16_cf5a40fd25a3b830855d155132d647cf'}\n\n```{.r .cell-code}\nmydata <- mydata[order(mydata$age),]\nmydata <- mydata[order(-mydata$age),]\nmydata <- mydata[order(mydata$age, mydata$his, mydata$tumor_size),]\n```\n:::\n\n\n## 重新命名行、列\n\n### 重新命名变量（列）\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-17_faa4ced1476b8349b61ce8b6e64b3605'}\n\n```{.r .cell-code}\nnames(mydata) <- c(\"N\",\"patient_ID\",\"diagnosis\") # 连续命名\ncolnames(mydata)[2] <- 'patient_ID'# 重新命名指定列名\n```\n:::\n\n\n### 设置行名\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-18_692425d7da00b6454857cd60b9f26c77'}\n\n```{.r .cell-code}\nrownames(mydata) <- mydata$ID # 将ID列设置为行名（注意不能有重复值）\n```\n:::\n\n\n## 数据筛选\n\n### 提取某几列数据形成新的数据集\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-19_aa8a9d5b70a972a9cdb8205a51fd1731'}\n\n```{.r .cell-code}\nvnumber <- mydata[, 4:16] # 提取第4-16列的数据形成新的“vnumber”数据集\nvnumber <- mydata[,c(2:12,16)] # 提取2-12列和第16列的数据\n```\n:::\n\n\n### 提取指定行数的数据\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-20_b5809ba0218bc855f16d1a29e4a2960f'}\n\n```{.r .cell-code}\nmydata_less <- mydata[1:100, ]#提取1-100行的数据\n```\n:::\n\n\n### 筛选数据\n\n筛选出低级别、接受了放疗的病例，并生成新的\"new_data\"数据集\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-21_0f5dc3128fe44dceba8dd66a91567aac'}\n\n```{.r .cell-code}\n#方法一\nnew_data<-subset(mydata,grade == \"Well differentiated; Grade I\" & rad == \"Yes\")\nnew_data[,c(\"grade\", \"rad\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           grade rad\n140 Well differentiated; Grade I Yes\n160 Well differentiated; Grade I Yes\n486 Well differentiated; Grade I Yes\n541 Well differentiated; Grade I Yes\n593 Well differentiated; Grade I Yes\n697 Well differentiated; Grade I Yes\n```\n:::\n\n```{.r .cell-code}\n#也可用“｜”（或者），“！”（NOT）连接\n\n#方法二\nnew_data <- mydata[which((mydata$grade == \"Well differentiated; Grade I\") &\n                           (mydata$rad == \"Yes\")),] \nnew_data[,c(\"grade\", \"rad\")]\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n                           grade rad\n140 Well differentiated; Grade I Yes\n160 Well differentiated; Grade I Yes\n486 Well differentiated; Grade I Yes\n541 Well differentiated; Grade I Yes\n593 Well differentiated; Grade I Yes\n697 Well differentiated; Grade I Yes\n```\n:::\n:::\n\n\n## 合并两个数据集\n\n### 纵向合并\n\n即增加个案，要求两个数据集具有相同的列名及列数\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-22_37480f8280cf60fa003c19996dd96989'}\n\n```{.r .cell-code}\nrbind_data <- rbind(mydata, mydata2)\n```\n:::\n\n\n### 横向合并\n\n直接通过cbind()函数合并数据集，要求两个数据集具有相同的行数及顺序\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-23_b81fb64d54bfea6bd47a2aec4111c6a2'}\n\n```{.r .cell-code}\ntotal <- cbind(dataframeA, dataframeB)\n```\n:::\n\n\n### 以某一列（如学号等）匹配两个数据集\n\n详细解读：<https://blog.csdn.net/chongbaikaishi/article/details/115740560>\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-24_5c6c8a6e3f760e18b878cdbf2434372d'}\n\n```{.r .cell-code}\n# 以\"probe_id\"为匹配标准匹配探针id和gene symbol\nexptab1 <- merge(x = ids,\n                 y = expset1,#x、y为要合并的数据框或者对象\n                 by =\"probe_id\", #指定以哪一列为标准匹配两个数据集。\n                                 #如果有多个匹配项，则所有可能的匹配项各贡献一行。\n                 all.x=F,#是否将没有匹配到y数据集的行也保留下来，并以NA替代。\n                         #默认为FALSE，只有x与y数据框相匹配的行会被包含在输出结果中\n                 all.y=F)#与上面类似\n```\n:::\n\n\n如果两个数据集要用来匹配的列的列名不同则可用by.x和by.y指定。如下面的代码就是用id2symbol数据集中的ENSEMBL列去匹配rawcount数据集中的GeneID列\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-25_c72e02dcaf147b0018b43f70e0db52d8'}\n\n```{.r .cell-code}\nrawcount <- merge(id2symbol,\n                  rawcount,\n                  by.x=\"ENSEMBL\",\n                  by.y=\"GeneID\",\n                  all.y=T)#对于没有匹配到的GeneID以NA替代\n```\n:::\n\n\n![](images/20210416100511517.png)\n\n## 去重（保留唯一值）\n\n生成带有重复值的示例数据\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-26_77e1455abd61979a89f5f063a9c94a76'}\n\n```{.r .cell-code}\nset.seed(123)\nmydata = data.frame(ID = c(1:10,9,4,4,9,9,2), y = rnorm(16))\nmydata <- rbind(mydata, mydata)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ID           y\n1   1 -0.56047565\n2   2 -0.23017749\n3   3  1.55870831\n4   4  0.07050839\n5   5  0.12928774\n6   6  1.71506499\n7   7  0.46091621\n8   8 -1.26506123\n9   9 -0.68685285\n10 10 -0.44566197\n11  9  1.22408180\n12  4  0.35981383\n13  4  0.40077145\n14  9  0.11068272\n15  9 -0.55584113\n16  2  1.78691314\n17  1 -0.56047565\n18  2 -0.23017749\n19  3  1.55870831\n20  4  0.07050839\n21  5  0.12928774\n22  6  1.71506499\n23  7  0.46091621\n24  8 -1.26506123\n25  9 -0.68685285\n26 10 -0.44566197\n27  9  1.22408180\n28  4  0.35981383\n29  4  0.40077145\n30  9  0.11068272\n31  9 -0.55584113\n32  2  1.78691314\n```\n:::\n:::\n\n\n通过`duplicated()`函数检查某一列是否有重复值，及有多少重复值\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-27_d06d8a265af9269bd89af5d4c3b4aeba'}\n\n```{.r .cell-code}\ntable(duplicated(mydata$ID))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n\nFALSE  TRUE \n   10    22 \n```\n:::\n:::\n\n\n通过`unique()`函数去除完全相同的行。`unique()`函数：一行的所有数据都相同认定为重复\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-28_da759c2af469599086e6cc218ab9e4cc'}\n\n```{.r .cell-code}\nmydata <- unique(mydata)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ID           y\n1   1 -0.56047565\n2   2 -0.23017749\n3   3  1.55870831\n4   4  0.07050839\n5   5  0.12928774\n6   6  1.71506499\n7   7  0.46091621\n8   8 -1.26506123\n9   9 -0.68685285\n10 10 -0.44566197\n11  9  1.22408180\n12  4  0.35981383\n13  4  0.40077145\n14  9  0.11068272\n15  9 -0.55584113\n16  2  1.78691314\n```\n:::\n:::\n\n\n通过`distinct()`函数，去除ID列重复的数据\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-29_bbf2876b78aa7368df0d29ad1f8071e7'}\n\n```{.r .cell-code}\nlibrary(dplyr)\nmydata <- distinct(mydata, # 需要去重的数据集名称\n                   ID, # 按照哪一列去重（可为多个条件）\n                   .keep_all = T) # 去重后保留所有列\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ID           y\n1   1 -0.56047565\n2   2 -0.23017749\n3   3  1.55870831\n4   4  0.07050839\n5   5  0.12928774\n6   6  1.71506499\n7   7  0.46091621\n8   8 -1.26506123\n9   9 -0.68685285\n10 10 -0.44566197\n```\n:::\n:::\n\n\n## 变量的赋值/替换\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-30_9adb4343025b737af284a47628f83c41'}\n\n```{.r .cell-code}\nsavdata$low <- ifelse(savdata$low ==\"低出生体重\", 1, 0)#将结局变量low赋值为0和1\nmydata[is.na(mydata)] <- \"Unknown\"#替换缺失值\n```\n:::\n\n\n当需要对一个数据集的多个变量进行转换时，可通过`within(data, {expression})`函数将括号内的操作限定到当前数据集中，避免\"\\$\"的反复使用，简化代码。函数`within()`与函数`with()`类似，不同的是`within()`允许你修改数据框:\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-31_eed25beefb52ebaedd69234545ef3d90'}\n\n```{.r .cell-code}\nmydata <- within(mydata, {\n  ID <- ifelse(ID < 5, \"A\", \"B\")\n  y <- ifelse(y < 0, \"A\", \"B\")\n})\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n   ID y\n1   A A\n2   A A\n3   A B\n4   A B\n5   B B\n6   B B\n7   B B\n8   B A\n9   B A\n10  B A\n```\n:::\n:::\n\n\n## 转换变量类型\n\n将结局变量转换成因子变量,ordered=F,用于定义无序多分类变量，起到设置哑变量的作用；ordered=T用于定义有序多分类变量。如果变量的取值以英文字符表示，那么默认以变量首字母的顺序编号赋值；如果变量的取值已经转换成数字，那么默认按照编号的大小依次赋值。可以通过指定\"levels\"选项来覆盖默认排序。\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-32_6b1485bae4e73711b4648f1b244bb74d'}\n\n```{.r .cell-code}\nsavdata$stage <- factor(savdata$stage, \n                        levels = c(1,2,3,4),\n                        labels = c(\"I\",\"II\",\"III\",\"IV\"),\n                        ordered = T)\nsavdata$stage <- relevel(savdata$stage,ref=\"IV\") # 设置因子的参照水平，仅限无序因子变量\n```\n:::\n\n\n通过`lapply`函数批量转换因子变量\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-33_c34e8df7b6aaa9aed079360a3b36ec89'}\n\n```{.r .cell-code}\nmydata[2:14] <- lapply(mydata[2:14], factor) # 转换几个连续列的因子变量\n```\n:::\n\n\n批量转换多个指定因子变量\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-34_e4cb558b3447edbcdfa444bbecbd60fc'}\n\n```{.r .cell-code}\ncatvars<-c(\"year\", \"race\", \"single\", \"grade\", \"T_stage\", \"N_stage\", \"M_stage\",\n           \"surgery\", \"lymphadenectomy\", \"radiotherapy\", \"chemotherapy\")\nmydata[catvars] <- lapply(mydata[catvars], factor)\n```\n:::\n\n\n转换为数值型变量\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-35_6452249c3ec109c1b17acaabdfa32c7f'}\n\n```{.r .cell-code}\nmydata$grade <- as.numeric(mydata$grade)\nmydata = lapply(mydata, as.numeric) # 将所有的变量转换成数值型\n```\n:::\n\n\n## 哑变量设置\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-36_377dceae2058fdaf19032bee2078e937'}\n\n```{.r .cell-code}\n# 因种族为无序多分类变量，需要设置三个哑变量（race1～3）\nsavdata$race1 <- ifelse(savdata$race == \"白种人\", 1, 0)\nsavdata$race2 <- ifelse(savdata$race == \"黑种人\", 1, 0)\nsavdata$race3 <- ifelse(savdata$race == \"其他种族\", 1, 0)\n```\n:::\n\n\n# 数学函数\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-37_a932d58ea24a9aa73d25980a632f594d'}\n\n```{.r .cell-code}\nabs(-4) #取绝对值\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nsqrt(16) #开平方根\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nlog(4,base=2) #取2为底的对数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nlog10(100) #取10为底的对数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 2\n```\n:::\n\n```{.r .cell-code}\nlog(2) #取2的自然对数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0.6931472\n```\n:::\n\n```{.r .cell-code}\nexp(2) #取e的指数函数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 7.389056\n```\n:::\n\n```{.r .cell-code}\n#设置小数位数\nceiling(3.14159) #取不小于x的最小整数（有小数点一律进一位）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 4\n```\n:::\n\n```{.r .cell-code}\nfloor(3.99999) #取不大于x的最大整数（忽略小数点）\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3\n```\n:::\n\n```{.r .cell-code}\nsprintf(\"%0.3f\", 3.14159) #四舍五入保留3位小数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"3.142\"\n```\n:::\n\n```{.r .cell-code}\nround(3.14159,digits=3) #同上。注意该函数在处理科学计数法时无法有效保留目标小数位数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 3.142\n```\n:::\n:::\n\n\n# 管道操作符(%\\>%)的使用\n\n％\\>％为来自**dplyr包**的**管道操作符（pipe operator)**，我们可以将其理解为车间里的流水线，经过前一步加工的产品才能进入后一步进一步加工，其作用是将上一步的结果直接传参给下一步的函数，从而省略了中间的赋值步骤，可以大量减少内存中的对象，节省内存。\n\n> **将%\\>%左边的对象传递给右边的函数，作为第一个选项的设置（或剩下唯一一个选项的设置）。**\n>\n> a %\\>% f(b)等同于f(a,b)；b% \\> %f(a,.,c)等同于f(a,b,c)\n\n【例一】\n\n比如我们要算f(x)=sin((x+1)\\^2)在x=4的值，可以分为以下三步：\n\n1.  计算a = x+1的值；\n\n2.  计算b = a\\^2的值；\n\n3.  计算c = sin(b)的值\n\n这样一来，c就是我们需要的最终结果了。用R语言管道传参，只需要这样写：\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-38_fefc1b646178c8f631d515a73290bbb3'}\n\n```{.r .cell-code}\nf1 <- function(x){return(x+1)}\nf2 <- function(x){return(x^2)}\nf3 <- function(x){return(sin(x))}\nlibrary(dplyr)\nx <- 1\ny <- x %>% f1 %>% f2 %>% f3\nprint(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -0.7568025\n```\n:::\n:::\n\n\n【例二】\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-39_bc6ca093732bf56efc772e4f32df4ed1'}\n\n```{.r .cell-code}\nf1 <- function(x,y){return(x+y)}\nf2 <- function(x,y,z){return(x*y+z)}\nx <- 2\ny <- 3\nz <- 4\nx %>% f1(y)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 5\n```\n:::\n\n```{.r .cell-code}\ny %>% f2(x,.,5)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 11\n```\n:::\n\n```{.r .cell-code}\nz %>% f2(x,y,.)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 10\n```\n:::\n:::\n\n\n【例三】日期合并\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-40_65711d145036a8af82749b638bc0a894'}\n\n```{.r .cell-code}\ndate <- as.Date('2017-6-22')+0:14\nhour <- sample(1:24, 15)\nmin <- sample(1:60, 15)\nsecond <- sample(1:60, 15)\ndat <- data.frame(date,hour,min,second)\ndat\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n         date hour min second\n1  2017-06-22   19  23     18\n2  2017-06-23    4  27     33\n3  2017-06-24   14  53     57\n4  2017-06-25   17   7     27\n5  2017-06-26   11  58     25\n6  2017-06-27    7  59     38\n7  2017-06-28   12  32     21\n8  2017-06-29   15  38     15\n9  2017-06-30   16  25     41\n10 2017-07-01   10  34     47\n11 2017-07-02   13  29     26\n12 2017-07-03   24   5     31\n13 2017-07-04    9   8     16\n14 2017-07-05   18  12     30\n15 2017-07-06   21  13      6\n```\n:::\n\n```{.r .cell-code}\nlibrary(tidyr)\ndatstd <- dat %>% unite(\"datehour\",date,hour,sep = ' ',remove = T) %>% unite(\"datetime\",datehour,min,second,sep = ':',remove = T)\ndatstd\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n              datetime\n1  2017-06-22 19:23:18\n2   2017-06-23 4:27:33\n3  2017-06-24 14:53:57\n4   2017-06-25 17:7:27\n5  2017-06-26 11:58:25\n6   2017-06-27 7:59:38\n7  2017-06-28 12:32:21\n8  2017-06-29 15:38:15\n9  2017-06-30 16:25:41\n10 2017-07-01 10:34:47\n11 2017-07-02 13:29:26\n12  2017-07-03 24:5:31\n13   2017-07-04 9:8:16\n14 2017-07-05 18:12:30\n15  2017-07-06 21:13:6\n```\n:::\n:::\n\n\n# 自定义函数\n\nR语言可以自定义函数，也可以使用其自带的函数。\n\n```         \nR语言中，自定义函数的一般格式为：\n函数名 <- function（输入1，……，输入n）{\n     函数体\n     return（返回值）\n}\n```\n\n其中，return并不是必需的，默认函数体最后一行的值作为返回值，即return完全可以换成\"返回值\"。下面以判断score为优良及格差的代码进行讲解。案例来源：<https://zhuanlan.zhihu.com/p/441710174>。\n\n首先对于不用函数的情况\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-41_c79fb38bbf917d9555a343f041f861b4'}\n\n```{.r .cell-code}\nscore = 73\nif(score >= 90){\n  res = \"优\"\n  }else if(score >=70){\n    res = \"良\"\n    }else if(score >= 60){\n      res = \"及格\"\n      }else{\n        res = \"不及格\"\n        }\nres#输出判断结果\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"良\"\n```\n:::\n:::\n\n\n接下来我们自定义一个scorejudge()函数实现对单个成绩对判断。实际上就是把上面的代码封装起来\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-42_7bc2f3649bd6a83457b9675d5add22d9'}\n\n```{.r .cell-code}\nscorejudge<-function(x){\n  if(score >= 90){\n    res = \"优\"\n    }else if(score >=70){\n      res = \"良\"\n      }else if(score >= 60){\n        res = \"及格\"\n        }else{\n          res = \"不及格\"\n          }\n  paste0(\"该同学的分数等级为\",res)\n  }\nscorejudge(score)#就像调用R自带函数一样调用我们自己编写的函数\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"该同学的分数等级为良\"\n```\n:::\n:::\n\n\n如若想要同时查询多个分数，则需要对原来的代码进行修改，加入for循环语句\n\n\n::: {.cell hash='basic_data_function_cache/html/unnamed-chunk-43_2879c73da43638f28d119045f138d186'}\n\n```{.r .cell-code}\nscorejudge<-function(x){\n  n = length(x)#首先确定循环次数，即x中有多少个分数，下面的for循环就要运行多少次\n  res = vector(\"character\",n)#建立一个和输入的分数个数相同的空向量，用来放每次for循环的输出结果\n  for(i in 1:n){\n    if(x[i] >= 90){\n      res[i] = paste0(i,\"号同学的分数等级为\",\"优\")\n      } else if(x[i] >=70){\n        res[i] = paste0(i,\"号同学的分数等级为\",\"良\")\n        } else if(x[i] >= 60){\n          res[i] = paste0(i,\"号同学的分数等级为\",\"及格\")\n          } else{\n            res[i] = paste0(i,\"号同学的分数等级为\",\"不及格\")\n          }\n    }\n  res #输出最终的res向量\n  }\nscorejudge(c(34,67,89,95))\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] \"1号同学的分数等级为不及格\" \"2号同学的分数等级为及格\"  \n[3] \"3号同学的分数等级为良\"     \"4号同学的分数等级为优\"    \n```\n:::\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
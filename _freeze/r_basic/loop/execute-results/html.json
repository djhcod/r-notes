{
  "hash": "fdaf31a27f1c597ebfea7af4484b9c61",
  "result": {
    "markdown": "# 循环\n\n## `apply`函数家族\n\n主要应用apply()函数。apply()以数据帧或矩阵作为输入，并以向量、列表或数组的形式给出输出。apply()函数主要用于避免显式使用循环结构。与之类似的lapply()函数返回与输入列表对象长度相似的列表对象，其中的每个元素都是应用指定函数到列表中相应元素的结果，其作用相当于避免了for循环的使用，更适合转换数据类型等操作。\n\n生成案例数据\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-1_21f5009c3737f42d86c4a01851704c3b'}\n\n```{.r .cell-code}\nmydata <- matrix(1:9, ncol = 3,nrow = 6) #生成一个3列、6行的矩阵数据\nmydata[3,3] <- NA #生成一个缺失值\nmydata <- as.data.frame(mydata) #如果要生成新的一列需要转换为数据框形式\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3\n1  1  7  4\n2  2  8  5\n3  3  9 NA\n4  4  1  7\n5  5  2  8\n6  6  3  9\n```\n:::\n:::\n\n\n计算mydata数据集中每一行的均值并添加到每一行后面\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-2_6930bc4dc5b433064a04c7312f96cc31'}\n\n```{.r .cell-code}\nmydata$Row_Means <- apply(mydata,\n                          MARGIN = 1, #1:对每行进行运算；2:对列进行运算；MARGIN=c(1,2)对行、列运算\n                        mean, #要应用的函数\n                        na.rm = T) #是否忽略缺失值\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3 Row_Means\n1  1  7  4         4\n2  2  8  5         5\n3  3  9 NA         6\n4  4  1  7         4\n5  5  2  8         5\n6  6  3  9         6\n```\n:::\n:::\n\n\n对mydata的第一列和第二列数据求均值\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-3_73b13cb0e7bc797b2105cde902cae012'}\n\n```{.r .cell-code}\nmydata$Row_Means12 <- apply(mydata[, c(1:2)], MARGIN = 1, mean,na.rm = T)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3 Row_Means Row_Means12\n1  1  7  4         4         4.0\n2  2  8  5         5         5.0\n3  3  9 NA         6         6.0\n4  4  1  7         4         2.5\n5  5  2  8         5         3.5\n6  6  3  9         6         4.5\n```\n:::\n:::\n\n\n对mydata的每一列进行求和运算\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-4_88bc09a4b0e140ee4efd3d0647178516'}\n\n```{.r .cell-code}\nCol_Sums <- apply(mydata, MARGIN = 2, sum,na.rm = T)\nmydata <- rbind(mydata, Col_Sums)\nmydata\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n  V1 V2 V3 Row_Means Row_Means12\n1  1  7  4         4         4.0\n2  2  8  5         5         5.0\n3  3  9 NA         6         6.0\n4  4  1  7         4         2.5\n5  5  2  8         5         3.5\n6  6  3  9         6         4.5\n7 21 30 33        30        25.5\n```\n:::\n:::\n\n\n## 在循环语句中的其他常用函数\n\n### `assign()`函数\n\n`assign`函数能够将某个值赋值给指定名称，从而实现循环中将每次运行的结果保存到一个对象中，而不覆盖上一次运行的结果。\n\n-   `x`：变量名称/赋值对象/最后的新变量的名称\n\n-   `value`：需要赋给`x`的值\n\n下面的案例实现输出\"A\", \"B\", \"C\", \"D\"四个变量，每个变量就是一次循环的结果：\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-5_3ddea81ec296b1de3a59b73ea198bee0'}\n\n```{.r .cell-code}\nfor (x in c(\"A\", \"B\", \"C\", \"D\")){\n        y <- paste0(x, x)\n        assign(x = x, value = y)\n}\n```\n:::\n\n\n### `append`函数\n\n`append()`函数被广泛应用于将新的向量添加到现有的向量、列表或数据框中。\n\n-   将新向量添加到已有向量中：\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-6_64f9d811c5605e3d68753360b0e567ad'}\n\n```{.r .cell-code}\nv1 <- c(1, 2, 3, 4, 5)\nv2 <- c(6, 7, 8)\n\nv3 <- append(v1, v2)\nv3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2 3 4 5 6 7 8\n```\n:::\n\n```{.r .cell-code}\n#等价于\nv3 <- c(v1, v2)\n```\n:::\n\n\n-   将新列表添加到已有列表中：\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-7_373adc87371a5289fc2f841b3c10209b'}\n\n```{.r .cell-code}\nlist1 <- list(a = 1, b = 2, c = 3)\nlist2 <- list(d = 4, e = 5, f = 6)\nlist3 <- append(list1, list2)\nlist3\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n$a\n[1] 1\n\n$b\n[1] 2\n\n$c\n[1] 3\n\n$d\n[1] 4\n\n$e\n[1] 5\n\n$f\n[1] 6\n```\n:::\n:::\n\n\n实际应用场景：在批量读取构建Seurat对象时，通过append()函数将每次的Seurat对象添加到列表中，最终得到一个包含了所有样本的单细胞数据的列表：\n\n\n::: {.cell hash='loop_cache/html/unnamed-chunk-8_54558f3a7cf98a3460b839a7b6b90cd5'}\n\n```{.r .cell-code}\nfor (file in file_list) {\n  # 拼接文件路径\n  data.path <- paste0(\"data/other_single_cell_content/GSE234933_MGH_HNSCC_gex_raw_counts/\", file)\n  # 读取RDS文件数据\n  seurat_data <- readRDS(data.path)\n  # 创建Seurat对象，并指定项目名称为文件名（去除后缀）\n  sample_name <- file_path_sans_ext(file)\n  seurat_obj <- CreateSeuratObject(counts = seurat_data,\n                                   project = sample_name,\n                                   min.features = 200,\n                                   min.cells = 3)\n  # 将Seurat对象添加到列表中\n  seurat_list <- append(seurat_list, seurat_obj)\n}\n```\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "ad0ab0f7cefc494349995383225aa023",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"正则表达式\"\n---\n\n\n> 参考：<https://r4ds.hadley.nz/regexps>\n\n正则表达式是一种简洁而强大的语言，用于描述字符串中的模式。正则表达式（regular expressions）有时被缩写为 “regex” 或 “regexp”。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\n```\n:::\n\n\n# 轮流匹配（alternas）\n\n![](images/截屏2024-03-10%2011.16.05.png)\n\n用于模糊匹配。\n\n## `\"ab|d\"`\n\n`\"ab|d\"` 匹配“ab”或“d”：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nalternas <- c(\"abc\", \"abcde\", \"acbde\")\n\nstr_view(alternas, \"ab|d\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <ab>c\n[2] │ <ab>c<d>e\n[3] │ acb<d>e\n```\n\n\n:::\n:::\n\n\n## `\"[abd]\"`\n\n`\"[abd]\"` 匹配“a”、“b”和“c”中的任意一个：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(alternas, \"[abc]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a><b><c>\n[2] │ <a><b><c>de\n[3] │ <a><c><b>de\n```\n\n\n:::\n:::\n\n\n## `\"[a-c]\"`\n\n`\"[a-c]\"` 匹配包含“a”到“c”及其之间字母的字符，即匹配“a”、“b”或“c”：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(alternas, \"[a-c]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a><b><c>\n[2] │ <a><b><c>de\n[3] │ <a><c><b>de\n```\n\n\n:::\n:::\n\n\n## `\"[^abc]\"`\n\n`\"[^abc]\"` 匹配不包含“a”、“b”及“c”的字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(alternas, \"[^abc]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ abc<d><e>\n[3] │ acb<d><e>\n```\n\n\n:::\n:::\n\n\n::: {.callout-caution collapse=\"true\"}\n###### 区分大小写\n\n正则表达式是需要区分大小写的，例如：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(alternas, \"[ABc]\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ ab<c>\n[2] │ ab<c>de\n[3] │ a<c>bde\n```\n\n\n:::\n:::\n\n\n如果我们不需要区分大小写，有以下三种方法可以使用：\n\n1.  将大小写字母同时列出：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    str_view(alternas, \"[ABCabc]\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] │ <a><b><c>\n    [2] │ <a><b><c>de\n    [3] │ <a><c><b>de\n    ```\n    \n    \n    :::\n    :::\n\n\n2.  告诉正则表达式忽略大小写。在 `stringr` 中，可以通过将正则表达式封装到 `regex()` 中，从而调用一些参数来控制正则表达式的行为。例如通过添加 `ignore_case = TRUE`，就可以实现忽略大小写。其他编程语言中，这些参数通常被称为“**flag**”。\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    str_view(alternas, regex(\"[ABC]\", ignore_case = TRUE))\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] │ <a><b><c>\n    [2] │ <a><b><c>de\n    [3] │ <a><c><b>de\n    ```\n    \n    \n    :::\n    :::\n\n\n3.  使用 `str_to_lower()` 将待匹配字符全部转换为小写：\n\n\n    ::: {.cell}\n    \n    ```{.r .cell-code}\n    alternas %>% \n      str_to_lower() %>% \n      str_view(\"[abc]\")\n    ```\n    \n    ::: {.cell-output .cell-output-stdout}\n    \n    ```\n    [1] │ <a><b><c>\n    [2] │ <a><b><c>de\n    [3] │ <a><c><b>de\n    ```\n    \n    \n    :::\n    :::\n\n\n在具体应用中可根据实际情况选择其中一种方法。\n:::\n\n# 定量匹配（quantifiers）\n\n![](images/截屏2024-03-10%2011.12.45.png)\n\n## `\"a.\"`\n\n`\"a.\"` 匹配包含 \"a\" 和另**一个**任意字符的字符串：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"a\", \"ab\", \"ae\", \"bd\", \"ea\", \"eab\"), \"a.\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <ab>\n[3] │ <ae>\n[6] │ e<ab>\n```\n\n\n:::\n\n```{.r .cell-code}\n# 匹配开头为“a”，最后为”e”，并且中间包含任意三个字符的字符串：\nstr_view(fruit, \"a...e\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] │ <apple>\n [7] │ bl<ackbe>rry\n[48] │ mand<arine>\n[51] │ nect<arine>\n[62] │ pine<apple>\n[64] │ pomegr<anate>\n[70] │ r<aspbe>rry\n[73] │ sal<al be>rry\n```\n\n\n:::\n\n```{.r .cell-code}\n# 如果只写一个点\".\"则只要有任意字符（包括空格）的对象都会被匹配到，而空对象不会被匹配到：\nstr_view(c(\"\", \"a \", \"a b\", \"ae\", \"bd\", \"ea\", \"eab\", \"%\"), \".\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <a>< >\n[3] │ <a>< ><b>\n[4] │ <a><e>\n[5] │ <b><d>\n[6] │ <e><a>\n[7] │ <e><a><b>\n[8] │ <%>\n```\n\n\n:::\n:::\n\n\n## `\"ab?\"`\n\n`\"ab?\"` 匹配 “a\"或“ab”：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"a\", \"ac\", \"ab\", \"abb\", \"abc\", \"abcd\"), \"ab?\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a>\n[2] │ <a>c\n[3] │ <ab>\n[4] │ <ab>b\n[5] │ <ab>c\n[6] │ <ab>cd\n```\n\n\n:::\n:::\n\n\n## `\"ab+\"`\n\n`\"ab+\"` 匹配“ab”、“abb”、“abbb”……，即“a”后至少一个“b”：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"a\", \"ac\", \"ab\", \"abb\", \"abc\", \"abcd\"), \"ab+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[3] │ <ab>\n[4] │ <abb>\n[5] │ <ab>c\n[6] │ <ab>cd\n```\n\n\n:::\n:::\n\n\n## `\"ab*\"`\n\n\"ab\\*\" 匹配“a”、“ab”、“abb”、“abbb”……，即“a”或“a”后加任意数量的“b”：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"ab\", \"ac\", \"ab\", \"abb\", \"abc\", \"abcd\"), \"ab*\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <ab>\n[2] │ <a>c\n[3] │ <ab>\n[4] │ <abb>\n[5] │ <ab>c\n[6] │ <ab>cd\n```\n\n\n:::\n:::\n\n\n::: callout-tip\n匹配“ab”或以“a”开头“b”结尾的字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(c(\"ab\", \"acb\", \"a b\", \"acdb\"), \"a.*b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <ab>\n[2] │ <acb>\n[3] │ <a b>\n[4] │ <acdb>\n```\n\n\n:::\n:::\n\n:::\n\n## `\"a{n}\"`\n\n除了上面任意数量字符的匹配，我们还可以使用 `{}` 精确指定字符的匹配数量：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr <- c(\"a\", \"aab\", \"aba\", \"aaa.b\", \"aaaabc\")\n\n# 匹配“aa”\nstr_view(chr, \"a{2}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <aa>b\n[4] │ <aa>a.b\n[5] │ <aa><aa>bc\n```\n\n\n:::\n\n```{.r .cell-code}\n# 等价于\nstr_view(chr, \"aa\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <aa>b\n[4] │ <aa>a.b\n[5] │ <aa><aa>bc\n```\n\n\n:::\n:::\n\n\n## `\"a{n,}\"`\n\n`\"a{2,}\"` 匹配“aa”、“aaa”、“aaaa”……，即匹配连续**≥2次**“a”的字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"a{2,}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <aa>b\n[4] │ <aaa>.b\n[5] │ <aaaa>bc\n```\n\n\n:::\n:::\n\n\n## `\"a{n,m}\"`\n\n`\"a{n,m}\"` 匹配连续n-m个“a”：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 匹配“aaa”和“aaaa”\nstr_view(chr, \"a{3,4}\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[4] │ <aaa>.b\n[5] │ <aaaa>bc\n```\n\n\n:::\n:::\n\n\n# 锚点匹配（anchors）\n\n![](images/截屏2024-03-10%2013.06.57.png){width=\"573\"}\n\n## `\"^a\"` 和 `\"a$\"`\n\n给匹配字符加上了位置锚点，只匹配开头（`\"^a\"`）或结尾（\"`a$`\"）字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(fruit, \"^a\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <a>pple\n[2] │ <a>pricot\n[3] │ <a>vocado\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(fruit, \"a$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [4] │ banan<a>\n[15] │ cherimoy<a>\n[30] │ feijo<a>\n[36] │ guav<a>\n[56] │ papay<a>\n[74] │ satsum<a>\n```\n\n\n:::\n\n```{.r .cell-code}\n# 强制完全匹配\nstr_view(fruit, \"^apple$\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <apple>\n```\n\n\n:::\n:::\n\n\n## `\"\\\\b\"`\n\n`\"\\\\b\"` 是**字符边界标志**，匹配单词之间的边界（即单词的开始或结束）。例如，我们要匹配以“The”开头的对象，如果直接写 `\"^The\"`，则还会匹配到“These”、“There”、“Their”等单词，所以这个时候我们可以在“The”的后面加上边界标志 `\"\\\\b\"` ，表示这是一个独立的单词：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr <- sentences[1:10]\nchr\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n [1] \"The birch canoe slid on the smooth planks.\" \n [2] \"Glue the sheet to the dark blue background.\"\n [3] \"It's easy to tell the depth of a well.\"     \n [4] \"These days a chicken leg is a rare dish.\"   \n [5] \"Rice is often served in round bowls.\"       \n [6] \"The juice of lemons makes fine punch.\"      \n [7] \"The box was thrown beside the parked truck.\"\n [8] \"The hogs were fed chopped corn and garbage.\"\n [9] \"Four hours of steady work faced us.\"        \n[10] \"A large size in stockings is hard to sell.\" \n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"^The\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <The> birch canoe slid on the smooth planks.\n[4] │ <The>se days a chicken leg is a rare dish.\n[6] │ <The> juice of lemons makes fine punch.\n[7] │ <The> box was thrown beside the parked truck.\n[8] │ <The> hogs were fed chopped corn and garbage.\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"^The\\\\b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <The> birch canoe slid on the smooth planks.\n[6] │ <The> juice of lemons makes fine punch.\n[7] │ <The> box was thrown beside the parked truck.\n[8] │ <The> hogs were fed chopped corn and garbage.\n```\n\n\n:::\n\n```{.r .cell-code}\n# 或者限定“The”后面必须有至少一个空格\nstr_view(chr, \"^The\\\\s+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <The >birch canoe slid on the smooth planks.\n[6] │ <The >juice of lemons makes fine punch.\n[7] │ <The >box was thrown beside the parked truck.\n[8] │ <The >hogs were fed chopped corn and garbage.\n```\n\n\n:::\n:::\n\n\n# 转译符（escape）\n\n以上的这些符号称为**元字符（metacharacters）**，它们在正则表达式中起到类似函数名的作用，不参与字面匹配。所有的元字符包括：`.^$\\|*+?{}[]()`。如果我们想匹配元字符本身时应该怎么做呢？这时候就需要引入**转译符（escape）**。**有两种转译符：`\"\\\\\"` 和 `\"[]\"`：**\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr <- c(\"abc\", \"a.bc\", \"a^bc\", \"a|bc\", \"a*bc\", \"a?bc\", \"a\\\\bc\", \"a\\bc\")\nstr_view(chr, \"a\\\\.b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <a.b>c\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"a\\\\^b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[3] │ <a^b>c\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"a\\\\|b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[4] │ <a|b>c\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"a\\\\*b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[5] │ <a*b>c\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"a\\\\?b\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[6] │ <a?b>c\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr, \"\\\\\\\\\") \n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[7] │ a<\\>bc\n```\n\n\n:::\n:::\n\n\n**`\"[]\"`** 的的效果和上面一样，但是它不能用于匹配转译符`\"//\"`：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"a[.]b\")\nstr_view(chr, \"a[*]b\")\nstr_view(chr, \"a[?]b\")\n```\n:::\n\n\n# 字符类别（character class/character set）匹配\n\n匹配某种类型的字符，如 `[a-z]` 匹配任何小写字母， `[0-9]` 匹配任何数字。比较特殊的有：\n\n## `\"\\\\d+\"`\n\n匹配任意数字字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr <- \"abcd ABCD  12345 -!@#%.\"\nstr_view(chr, \"\\\\d+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ abcd ABCD  <12345> -!@#%.\n```\n\n\n:::\n\n```{.r .cell-code}\n# 等价\nstr_view(chr, \"[0-9]+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ abcd ABCD  <12345> -!@#%.\n```\n\n\n:::\n:::\n\n\n## `\"\\\\D+\"`\n\n匹配任何非数字字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"\\\\D+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <abcd ABCD  >12345< -!@#%.>\n```\n\n\n:::\n:::\n\n\n## `\"\\\\s+\"`\n\n匹配空格（whitespaces），包括制表和换行符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"\\\\s+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ abcd< >ABCD<  >12345< >-!@#%.\n```\n\n\n:::\n\n```{.r .cell-code}\n# 或者直接输入空格\nstr_view(chr, \" +\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ abcd< >ABCD<  >12345< >-!@#%.\n```\n\n\n:::\n:::\n\n\n## `\"\\\\S+\"`\n\n匹配任何非空格字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"\\\\S+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <abcd> <ABCD>  <12345> <-!@#%.>\n```\n\n\n:::\n:::\n\n\n::: {.callout-caution collapse=\"true\"}\n###### 区分 `\"\\\\S+\"` 和 `\".+\"`\n\n`\".+\"` ：非空匹配，即只要有任意字符**及空格**的对象都会被匹配到，而**空对象**不会被匹配到：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nchr2 <- c(\"\", \"  \", \"a \", \"a b\", \"ae\", \"bd\", \"ea\", \"eab\", \" %\")\nstr_view(chr2, \".+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[2] │ <  >\n[3] │ <a >\n[4] │ <a b>\n[5] │ <ae>\n[6] │ <bd>\n[7] │ <ea>\n[8] │ <eab>\n[9] │ < %>\n```\n\n\n:::\n\n```{.r .cell-code}\nstr_view(chr2, \"\\\\S+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[3] │ <a> \n[4] │ <a> <b>\n[5] │ <ae>\n[6] │ <bd>\n[7] │ <ea>\n[8] │ <eab>\n[9] │  <%>\n```\n\n\n:::\n:::\n\n\n注意第二个对象 `\"  \"` 为只包含了空格的对象，`\".+\"` 会匹配到该对象，而 `\"\\S+\"` 则不会。\n:::\n\n## `\"\\\\w+\"`\n\n匹配任何单词字符，即字母和数字：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"\\\\w+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ <abcd> <ABCD>  <12345> -!@#%.\n```\n\n\n:::\n:::\n\n\n## `\"\\\\W+\"`\n\n匹配任何“非单词”字符，即一些特殊字符：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nstr_view(chr, \"\\\\W+\")\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n[1] │ abcd< >ABCD<  >12345< -!@#%.>\n```\n\n\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n::: callout-tip\n###### 实践\n\n《R for Data Science》的 ”Regular expressions“ 一章的最后部分有几个[案例](https://r4ds.hadley.nz/regexps#practice)帮助进一步熟练掌握正则表达式的应用，可以参考。\n:::\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.3 (2024-02-29)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.4\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] lubridate_1.9.3 forcats_1.0.0   stringr_1.5.1   dplyr_1.1.4    \n [5] purrr_1.0.2     readr_2.1.5     tidyr_1.3.1     tibble_3.2.1   \n [9] ggplot2_3.5.0   tidyverse_2.0.0\n\nloaded via a namespace (and not attached):\n [1] gtable_0.3.4      jsonlite_1.8.8    compiler_4.3.3    tidyselect_1.2.0 \n [5] scales_1.3.0      yaml_2.3.8        fastmap_1.1.1     R6_2.5.1         \n [9] generics_0.1.3    knitr_1.45        htmlwidgets_1.6.4 munsell_0.5.0    \n[13] pillar_1.9.0      tzdb_0.4.0        rlang_1.1.3       utf8_1.2.4       \n[17] stringi_1.8.3     xfun_0.42         timechange_0.3.0  cli_3.6.2        \n[21] withr_3.0.0       magrittr_2.0.3    digest_0.6.34     grid_4.3.3       \n[25] rstudioapi_0.15.0 hms_1.1.3         lifecycle_1.0.4   vctrs_0.6.5      \n[29] evaluate_0.23     glue_1.7.0        codetools_0.2-19  fansi_1.0.6      \n[33] colorspace_2.1-0  rmarkdown_2.25    tools_4.3.3       pkgconfig_2.0.3  \n[37] htmltools_0.5.7  \n```\n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "64d3c16699eb3129305b4e7a6eceeb4f",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"数据可视化\"\n---\n\n\n> 参考：<https://r4ds.hadley.nz/data-visualize>\n\n本章介绍基于ggplot2包的数据可视化基本语法，主要介绍几个常用图形的语法。\n\n# 加载包\n\n\n::: {.cell}\n\n```{.r .cell-code}\nlibrary(tidyverse)\nlibrary(palmerpenguins) # 提供案例数据\nlibrary(ggthemes) # 提供调色板\n```\n:::\n\n\n案例数据为Palmer Archipelago三个岛屿上企鹅的身体测量数据，这是一个tibble类型的数据集：\n\n\n::: {.cell}\n\n```{.r .cell-code}\npenguins\n```\n\n::: {.cell-output .cell-output-stdout}\n\n```\n# A tibble: 344 × 8\n   species island    bill_length_mm bill_depth_mm flipper_length_mm body_mass_g\n   <fct>   <fct>              <dbl>         <dbl>             <int>       <int>\n 1 Adelie  Torgersen           39.1          18.7               181        3750\n 2 Adelie  Torgersen           39.5          17.4               186        3800\n 3 Adelie  Torgersen           40.3          18                 195        3250\n 4 Adelie  Torgersen           NA            NA                  NA          NA\n 5 Adelie  Torgersen           36.7          19.3               193        3450\n 6 Adelie  Torgersen           39.3          20.6               190        3650\n 7 Adelie  Torgersen           38.9          17.8               181        3625\n 8 Adelie  Torgersen           39.2          19.6               195        4675\n 9 Adelie  Torgersen           34.1          18.1               193        3475\n10 Adelie  Torgersen           42            20.2               190        4250\n# ℹ 334 more rows\n# ℹ 2 more variables: sex <fct>, year <int>\n```\n\n\n:::\n:::\n\n\n# ggplot基本语法\n\n下面我们通过相关性散点图可视化企鹅的鳍长度和体重之间的关系，并通过不同的颜色和形状标注企鹅的种类。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguins,\n  aes(x = flipper_length_mm, \n      y = body_mass_g, \n      color = species,\n      shape = species)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-3-1.png){width=480}\n:::\n:::\n\n\n::: callout-tip\n`aes()` 函数定义了如何将数据集中的变量映射到绘图的可视化属性（即美学，aesthetics）上。\n:::\n\n可以看到，它给每个不同的企鹅类型都拟合了一条相关性趋势线。如果我们需要在整个数据集中拟合一条趋势线，则需要将区分企鹅类型的`color = species`和`shape = species`参数从全局的`ggplot()`中移动到`geom_point()`中：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  data = penguins,\n  aes(x = flipper_length_mm, \n      y = body_mass_g)\n) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\")\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-4-1.png){width=480}\n:::\n:::\n\n\n这是因为在`ggplot()`中定义了全局级别的美学映射后，这些映射会向下传递到绘图的每个后续geom层。不过，ggplot2 中的每个 geom 函数也可以接受一个映射参数，这样就可以在局部层级添加美学映射，并将其添加到从全局层级继承的映射中。由于我们希望根据企鹅种类定义每个点的颜色和形状，但不希望分别为每个企鹅种类绘制拟合线，因此我们应该只为 `geom_point()`指定 `color = species`和`shape = species`。\n\n最后，为其添加文字并调用调色板：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguins,\n  aes(x = flipper_length_mm, y = body_mass_g)\n) +\n  geom_point(aes(color = species, shape = species)) +\n  geom_smooth(method = \"lm\") +\n  labs(\n    title = \"Body mass and flipper length\",\n    subtitle = \"Dimensions for Adelie, Chinstrap, and Gentoo Penguins\",\n    x = \"Flipper length (mm)\", \n    y = \"Body mass (g)\",\n  ) +\n  scale_color_colorblind()\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-5-1.png){width=480}\n:::\n:::\n\n\n# 可视化分布\n\n## 可视化分类变量的分布\n\n用**条形图**可视化企鹅类型的分布：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species)) +\n  geom_bar(fill = \"red\")\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-6-1.png){width=480}\n:::\n:::\n\n\n按照每个类型企鹅数量的多少**重新排序条形图**。可以通过`fct_infreq()`对“species”按照其频数重新排序：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = fct_infreq(species))) +\n  geom_bar(fill = \"red\")\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-7-1.png){width=480}\n:::\n:::\n\n\n## 可视化数值变量的分布\n\n通过**直方图**可视化企鹅体重对分布情况：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g)) +\n  geom_histogram(binwidth = 200, \n                 fill = \"darkblue\") \n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-8-1.png){width=480}\n:::\n:::\n\n\n**密度图**是数值变量分布的另一种可视化方式。密度图是直方图的平滑化版本，与直方图相比，它显示的细节较少，但能让人更容易快速了解分布的形状。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g)) +\n  geom_density(color = \"darkblue\")\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-9-1.png){width=480}\n:::\n:::\n\n\n# 可视化关系\n\n## 一个数值变量和一个分类变量\n\n通过**箱型图**比较不同种类企鹅的体重：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = species, \n           y = body_mass_g)) +\n  geom_boxplot()\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-10-1.png){width=480}\n:::\n:::\n\n\n![箱型图的解释](images/EDA-boxplot.png){width=\"597\"}\n\n密度图：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = body_mass_g, \n           color = species, \n           fill = species)) +\n  geom_density(alpha = 0.5)\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-11-1.png){width=480}\n:::\n:::\n\n\n## 两个分类变量\n\n通过堆叠条形图比价不同岛屿上的企鹅类型分布情况：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = island, \n           fill = species)) +\n  geom_bar()\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-12-1.png){width=480}\n:::\n:::\n\n\n可以通过在 geom 中设置 `position = \"fill\"`（填充）绘制**相对频率图**，**它更适用于比较各岛屿的物种分布情况，因为它不会受到各岛屿企鹅数量不等的影响**。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = island, \n           fill = species)) +\n  geom_bar(position = \"fill\")\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-13-1.png){width=480}\n:::\n:::\n\n\n## 两个数值变量\n\n在上面的[ggplot基本语法]中我们已经介绍了通过**散点图**展示两个数值型变量关系的语法：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(\n  penguins,\n  aes(x = flipper_length_mm, \n      y = body_mass_g)\n) +\n  geom_point() +\n  geom_smooth(method = \"lm\") \n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-14-1.png){width=480}\n:::\n:::\n\n\n## 两个以上变量\n\n正如我们在[ggplot基本语法]中所看到的，我们可以通过将更多变量映射到其他美学元素中，从而将更多变量整合到散点图中。例如，在下面的散点图中，点的颜色代表企鹅种类，点的形状代表所在岛屿：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = flipper_length_mm, \n           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = island))\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-15-1.png){width=672}\n:::\n:::\n\n\n然而，在绘图中添加过多的美学映射会使绘图变得杂乱无章，难以理解。另一种方法对分类变量尤为有用，那就是通过`facet_wrap()`绘制**分面图**，即分别显示一个数据子集的子绘图。\n\n\n::: {.cell}\n\n```{.r .cell-code}\nggplot(penguins, \n       aes(x = flipper_length_mm, \n           y = body_mass_g)) +\n  geom_point(aes(color = species, \n                 shape = species)) +\n  geom_smooth(method = \"lm\") +\n  facet_wrap(~island)\n```\n\n::: {.cell-output-display}\n![](data_visualization_files/figure-html/unnamed-chunk-16-1.png){width=672}\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell}\n::: {.cell-output .cell-output-stdout}\n\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.3.1\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n [1] ggthemes_5.1.0       palmerpenguins_0.1.1 lubridate_1.9.3     \n [4] forcats_1.0.0        stringr_1.5.1        dplyr_1.1.4         \n [7] purrr_1.0.2          readr_2.1.5          tidyr_1.3.0         \n[10] tibble_3.2.1         ggplot2_3.4.4        tidyverse_2.0.0     \n\nloaded via a namespace (and not attached):\n [1] utf8_1.2.4        generics_0.1.3    stringi_1.8.3     lattice_0.22-5   \n [5] hms_1.1.3         digest_0.6.34     magrittr_2.0.3    evaluate_0.23    \n [9] grid_4.3.2        timechange_0.2.0  fastmap_1.1.1     Matrix_1.6-5     \n[13] jsonlite_1.8.8    mgcv_1.9-1        fansi_1.0.6       scales_1.3.0     \n[17] codetools_0.2-19  cli_3.6.2         rlang_1.1.3       munsell_0.5.0    \n[21] splines_4.3.2     withr_3.0.0       yaml_2.3.8        tools_4.3.2      \n[25] tzdb_0.4.0        colorspace_2.1-0  vctrs_0.6.5       R6_2.5.1         \n[29] lifecycle_1.0.4   htmlwidgets_1.6.4 pkgconfig_2.0.3   pillar_1.9.0     \n[33] gtable_0.3.4      glue_1.7.0        xfun_0.41         tidyselect_1.2.0 \n[37] rstudioapi_0.15.0 knitr_1.45        farver_2.1.1      htmltools_0.5.7  \n[41] nlme_3.1-164      rmarkdown_2.25    labeling_0.4.3    compiler_4.3.2   \n```\n\n\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
{
  "hash": "b6812708abc62fc8819cc517e3de6c2e",
  "result": {
    "engine": "knitr",
    "markdown": "---\ntitle: \"Rstudio环境配置\"\nexecute: \n  eval: false\neditor_options: \n  chunk_output_type: console\n---\n\n\n# 更新R\n\n在R原软件中逐个运行下面的代码（仅适用Windows系统）。macOS直接打开[CRAN官网](https://cran.r-project.org/bin/macosx/)下载最新版本的R覆盖安装，重启RStudio即可完成R的更新，原R包都在。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"installr\")\nlibrary(installr)\nupdateR()\n```\n:::\n\n\n# 更新R包\n\n运行下面的代码或通过右下角的Packages选项卡进行R包的更新\n\n\n::: {.cell}\n\n```{.r .cell-code}\nold.packages() # 检查是否有需要更新的R包\nupdate.packages(ask = F) # 更新所有R包\nnews(package = \"limma\") # 参看R包的更新内容\nBiocManager::valid() # 查看是否有需要更新的bioconductor包。根据提示安装更新\n```\n:::\n\n\n# 从bioconductor安装R包\n\n\n::: {.cell}\n\n```{.r .cell-code}\nBiocManager::install(\"biomaRt\",update = TRUE,ask = FALSE)\n```\n:::\n\n\n# 清除当前加载的程序包\n\n\n::: {.cell}\n\n```{.r .cell-code}\ndetach(\"package:dplyr\", unload=TRUE)\n# 或用pacman包内的p_unload函数\npacman::p_unload(\"dplyr\")\n```\n:::\n\n\n如果要从环境中移除所有用户包，则可通过`pacman`包的`p_loaded()`+`p_unload()`函数实现：\n\n\n::: {.cell}\n\n```{.r .cell-code}\npacman::p_unload(pacman::p_loaded(), character.only = TRUE)\n```\n:::\n\n\n# 更改当前R脚本运行目录\n\n\n::: {.cell}\n\n```{.r .cell-code}\nsetwd(\"/Users/totoshihiro/Library/Mobile Documents/com~apple~CloudDocs/Documents/科研/医学统计学/数据基本处理与标准化\")\ngetwd()#查看当前R脚本运行目录\n```\n:::\n\n\n# 环境查看和清理\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrm(mydata)\nrm(list = ls())#移除当前环境中的所有对象\ncat(\"\\014\")#清空所有输出结果\nsessionInfo()#收集有关当前R项目的信息\n```\n:::\n\n\n# 自动安装所需的R包\n\n\n::: {.cell}\n\n```{.r .cell-code}\npackages <-c(\"GEOquery\", \"limma\",\"ggplot2\", \"pheatmap\")#列出所需的R包\n\n#检查所需的R包是否已安装，若未安装则从CRAN或Bioconductor安装包\npackagecheck <- function(x) {\n  if (!require(\"BiocManager\")) {\n    install.packages(\"BiocManager\")\n  } else if (!require(x, character.only = T)) {\n    CRANpackages <- available.packages()\n    if (x %in% rownames(CRANpackages)) {\n      install.packages(x)\n    } else {\n      BiocManager::install(x, update = TRUE, ask = FALSE)\n    }\n  }\n}\nlapply(packages, packagecheck)\n```\n:::\n\n\n# 调整矢量/内存分配上限\n\n## 提高矢量大小上限\n\n在R语言中如果我们要处理的数据集较大，如在[处理单细胞数据时](/single_cell/scRNA-seq_online/06_SC_SCT_normalization.qmd#re_sctransform)，可能会出现如下报错：\n\n``` md\nError: cannot allocate vector of size *** Mb\n```\n\n这是因为 R 中有对象大小的限制（默认值为 500 1024 \\^ 2 = 500 Mb）。可以通过如下代码进行调整：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 调整允许对象大小限制为6GB\noptions(future.globals.maxSize = 6 * 1024 * 1024^2)\n```\n:::\n\n\n## 提高R内存分配上限（macOS） {#sec-Raising_memory_limit}\n\n如果在运行大量的数据处理时，出现如下报错：\n\n``` md\nError: vector memory exhausted (limit reached?)\n```\n\n那么说明脚本的运行超出了R语言内存分配的上限，这一般就是Mac的物理内存大小。但是，我们可以通过如下的方式来通过分配SWAP虚拟内存的方式，使得代码能够继续运行（来自stackoverflow上的[这篇](https://stackoverflow.com/questions/51295402/r-on-macos-error-vector-memory-exhausted-limit-reached)帖子）。\n\n【方法一：通过[usethis](https://usethis.r-lib.org/)包配置】\n\n在R中运行：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_environ()\n```\n:::\n\n\n::: callout-tip\n`usethis` is a package that facilitates interactive workflows for R project creation and development\n:::\n\n运行后会在RStudio中以新标签页的方式打开一个.Renviron文件。在其中输入：\n\n``` md\nR_MAX_VSIZE=50Gb\n```\n\n::: callout-caution\n注意这里的内存数值包括了物理内存和虚拟内存，所以如果你的电脑的实际内存为16GB，那么在这里需要输入比16GB更大的数值，输入16GB是不会有帮助的。\n:::\n\n保存这个文件后，重启RStudio，这时候内存上限就被修改好了。\n\n![RStudio调用虚拟内存执行脚本](images/截屏2024-01-14%2010.33.37.png){width=\"290\"}\n\n【方法二：通过终端配置】\n\n打开终端（Terminal），在其中输入：\n\n``` md\ncd ~\ntouch .Renviron\nopen .Renviron\n```\n\n这时会打开.Renviron文件，在其中输入：\n\n``` md\nR_MAX_VSIZE=50Gb\n```\n\n保存文件，重启RStudio。\n\n# RStudio常用快捷键\n\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 操作                                              | MacOS快捷键                                                       |\n+===================================================+===================================================================+\n| 新建R脚本                                         | `Command` + `Shift` + `N`                                         |\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 多行注释                                          | 先选中所要注释的代码，然后按`Command` + `Shift` + `C`。\\          |\n|                                                   | 如果想取消注销，再选中代码，再后按`Command` + `Shift` + `C`。     |\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 插入[管道函数](/r_basic/dplyr.qmd#sec-管道操作符) | `Command` + `Shift` + `M`                                         |\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 赋值                                              | `Option` + `-`                                                    |\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 打开帮助                                          | 将光标放到函数中间，然后按`F1`键                                  |\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 复制并粘贴代码                                    | 在一行代码末尾或者选中需要复制的代码后按`Command` + `Shift` + `D` |\n+---------------------------------------------------+-------------------------------------------------------------------+\n| 创建可折叠注释                                    | `Command` + `Shift` + `R`                                         |\n+---------------------------------------------------+-------------------------------------------------------------------+\n\n: RStudio常用快捷键\n\n💡在Windows中相应的快捷键把上面的`Command`替换成`Control`，`Option`替换成`Alt`即可。\n\n# 自动整理代码\n\n[The tidyverse style guide](https://style.tidyverse.org/index.html)**对代码编写时的规范格式进行了详细说明。通过**[styler包](https://styler.r-lib.org)可以实现对代码的自动整理，有助于保持不同项目之间的代码风格一致，并促进协作。安装styler后通过运行下面的命令即可自动整理当前打开的文档的代码。\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\"styler\")\nstyler:::style_active_file()\n```\n:::\n\n\n也可以用通过打开Rstudio的插件（Addins），选择\"Style active file\"来实现对当前R脚本的代码整理。或者选择一段代码后，点击\"Style selection\"来对选中的代码进行整理。\n\n![Rstudio插件](images/screenshot_2023-11-14%2011.44.02.png){#fig-插件 width=\"219\"}\n\n::: callout-tip\n[R for Data Science](https://r4ds.hadley.nz/workflow-style)中详细说明了规范的代码风格。\n:::\n\n# Rstudio主题\n\n[`rsthemes`](https://www.garrickadenbuie.com/project/rsthemes/#installation)包提供了多种额外的主题。\n\n![](images/rsthemes.gif)\n\n该包通过[r-universe](https://gadenbuie.r-universe.dev/)进行安装：\n\n\n::: {.cell}\n\n```{.r .cell-code}\ninstall.packages(\n  \"rsthemes\",\n  repos = c(gadenbuie = 'https://gadenbuie.r-universe.dev', getOption(\"repos\"))\n)\n```\n:::\n\n\n然后安装主题：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nrsthemes::install_rsthemes()\n```\n:::\n\n\n使用：\n\n\n::: {.cell}\n\n```{.r .cell-code}\n# 列出所有来自rsthemes的主题\nrsthemes::list_rsthemes()\n\n# 依次尝试所有主题\nrsthemes::try_rsthemes()\n\n# 只尝试浅色主题\nrsthemes::try_rsthemes(\"light\")\n```\n:::\n\n\n通过Tools \\> Global Options \\> Appearance也可以浏览和应用这些主题。\n\n安装该包后还会在Rstudio的插件中显示，可以方便的进行深色和浅色模式的切换。要实现这一点，需要打开R的配置文件（\\~/.Rprofile），可以通过下面的方式快速打开：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nusethis::edit_r_profile()\n```\n:::\n\n\n然后将下面的代码粘贴进配置文件：\n\n\n::: {.cell}\n\n```{.r .cell-code}\nif (interactive()) {\n  rsthemes::set_theme_light(\"Chrome\") # 默认的浅色主题\n  rsthemes::set_theme_dark(\"Cobalt\") # 默认的深色主题\n  rsthemes::set_theme_favorite( # 再添加一些主题作为备选\n    c(\n      \"GitHub {rsthemes}\",\n      \"Material Palenight {rsthemes}\"\n    )\n  )\n}\n```\n:::\n\n\n现在就可以通过点击插件中的\"Toggle Dark Mode\"来一键切换深色和浅色主题了（@fig-插件 ）。同时，点击\"Next Favorite Theme\"可以切换上面设置的`set_theme_favorite()`里面的主题。\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}
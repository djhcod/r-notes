{
  "hash": "b0ce5ee28fa55662a583864b77d057df",
  "result": {
    "markdown": "---\ntitle: \"管道操作符(%>%)的使用\"\n---\n\n\n> 参考：[*生信菜鸟团-R tips: R管道的用法*](https://mp.weixin.qq.com/s?__biz=MzUzMTEwODk0Ng==&mid=2247512157&idx=1&sn=47466392bd7c54e17c57b232b29b551b&chksm=fa457560cd32fc76da55c346ef08917343322ecb5d24b3b591d9c65549ed1f0ca10f57f1105d&mpshare=1&scene=1&srcid=0407dIwqephXlKmnMrPSvpRb&sharer_sharetime=1680842848403&sharer_shareid=568f49cb24905bf546294e6985a632bf#rd)\n\nR中有两种管道操作符（pipe operator)，分别是R自带的来自`base`包的`|>`，和来自`magrittr`**包（上级包是**`dplyr`和`tidyverse`**）**的`%>%`。我们可以将管道操作符理解为车间里的流水线，经过前一步加工的产品才能进入后一步进一步加工，其作用是将上一步的结果直接传参给下一步的函数，从而**省略了中间的赋值步骤**，可以大量**减少中间变量**，节省内存。例如：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-1_e165a1bbeb449d15d8b926bc0d72fcf2'}\n\n```{.r .cell-code}\n# 不使用管道操作服\nx <- rnorm(10)\ny <- sort(x)\nplot(y)\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-1-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 管道调用\nrnorm(10) |> sort() |> plot()\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-1-2.png){width=672}\n:::\n\n```{.r .cell-code}\n# or\n10 |> rnorm() |> sort() |> plot()\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-1-3.png){width=672}\n:::\n:::\n\n\n如果`x`, `y`并不会被后面的代码用到的话，那么减少这种中间变量的产生是有利于代码的整洁和降低变量冲突的风险的。\n\n如果不使用管道操作，同时要避免产生中间变量的话就需要嵌套代码，而管道操作则通过一种链式调用的方式去写嵌套调用的代码，使代码更清晰和易于理解。比如：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-2_4a1d84dd01f52a73da41a23cc7bf6673'}\n\n```{.r .cell-code}\n# 嵌套调用\nplot(sort(rnorm(10)))\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-2-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 管道调用\nrnorm(10) |> sort() |> plot()\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-2-2.png){width=672}\n:::\n:::\n\n\n很明显管道的调用逻辑要比嵌套调用更加清晰而符合直觉。\n\n::: callout-tip\n来自`magrittr`**包**的管道符`%>%`比base包的`|>`功能更强大（见下文），同时支持快捷键`Command`+`Shift`+`M`快速插入`%>%`符号，而`|>`符号目前暂无快捷键。\n:::\n\n# 管道的基本用法\n\n管道的用法就是通过管道符`|>`或`%>%`串联起来前后的两个函数调用，先计算管道符号左边的函数调用，然后将其结果自动传递给管道符号右边函数的**第一个参数（默认）**，然后对运行这个函数，正如上面的例子中提到的一样。**如果不想把值传递给第一个参数，则可以用占位符`_`（适用于**`|>`）或**`.`（适用于`%>%`）的形式指定把前面的运算结果传递给哪个参数**。\n\n比如想在mtcars数据集的车名中寻找所有以“M”开头的车名，则可以通过如下方式寻找：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-3_35560ffbfe15eb21b9af72b4b65013a6'}\n\n```{.r .cell-code}\nmtcars |> rownames() |> grep(\"^M\", x = _)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  8  9 10 11 12 13 14 31\n```\n:::\n\n```{.r .cell-code}\n#或用%>%形式\nlibrary(magrittr) # 也可以直接加载dplyr或tidyverse包，便于后续调用其他tidyverse函数\nmtcars %>%  rownames() %>%  grep(pattern = \"^M\", x = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1]  1  2  8  9 10 11 12 13 14 31\n```\n:::\n:::\n\n\n解释如下：在`grep`函数那里，由于我们想在车名（这里是行名）中找到符合特定`pattern`的车名位置，因此需要把车名传给`grep`的第二个参数`x`，所以就可以`.`或`_`的形式将前面的值传给`grep`的`x`。\n\n**⚠️注意：传给其他位置的`.`必须是独立的**，不能在一个表达式（函数）中，比如如下情况，我只想寻找前10个车名中以“M”开头的车名位置：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-4_7b4edfa21764cd727de9cccae28da1d8'}\n\n```{.r .cell-code}\n# 错误 ---------------\nmtcars %>% rownames %>% grep(\"^M\", x = .[1:10])\n```\n\n::: {.cell-output .cell-output-stderr}\n```\nWarning in grep(., \"^M\", x = .[1:10]): argument 'pattern' has length > 1 and\nonly the first element will be used\n```\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 1 2\n```\n:::\n\n```{.r .cell-code}\n# 正确 ---------------\nmtcars[1:10, ] %>% rownames %>% grep(\"^M\", x = .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  1  2  8  9 10\n```\n:::\n:::\n\n\n上面的错误调用中，传递给`grep`的`x`参数的是一个表达式`.[1:10]`，不是一个单独的`.`了，因此失去了调整前面值的位置的作用，它就等价于如下调用：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-5_95e1a7901f83a9e1315974814a146e81'}\n\n```{.r .cell-code}\n# 错误  ---------------\nmtcars %>% rownames %>% grep(\"^M\", x = .[1:10])\n\n# 等价于 --------------\n# 还是把前面的值传递给第一个参数：\nmtcars %>% rownames %>% grep(., \"^M\", x = .[1:10])\n```\n:::\n\n\n# **管道的进阶用法**\n\n我们可以通过“{}”符号包裹后续函数，在“{}”内的代码，可以任意的使用多个占位符`.`去传递管道前的值。还是上面的例子：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-6_8fa596fa56ab38933b68b8374c7b2770'}\n\n```{.r .cell-code}\nmtcars[1:10, ] %>%  rownames() %>%  grep(\"^M\", x = .) %>% plot()\n\n# 用“{}”的形式 ---------------\nmtcars %>% rownames %>% {grep(\"^M\", x = .[1:10])} %>% plot()\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-6-1.png){width=672}\n:::\n:::\n\n\n⚠️注意，`|>`不支持“{}”形式：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-7_e4edfeba73e7fffec9952474540f6295'}\n\n```{.r .cell-code}\n# 错误：\nmtcars |> rownames() |> {grep(\"^M\", x = _[1:10])}\n```\n:::\n\n\n这也反映出`base`包`|>`功能的局限性。\n\n本质上“{}”是`magrittr`改写的一个匿名函数，只有唯一的一个参数，也就是`.` ：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-8_e83e7b0c24a8b8c5957fee32ed18bb1a'}\n\n```{.r .cell-code}\nfunction(.) {\n  # any code\n}\n```\n:::\n\n\n比如想要获取mtcars的前5行前5列，然后更改行名和列名后，再返回这个数据框：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-9_817e8cc8fbf44a3dacb8e6965f26769b'}\n\n```{.r .cell-code}\ndf <- mtcars %>% .[1:5, 1:5] %>%\n  {\n    rownames(.) <- paste0(\"row\", 1:5)\n    colnames(.) <- paste0(\"col\", 1:5)\n    . # <---------- 不要忘了返回这个数据框\n  }\ndf\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3 col4 col5\nrow1 21.0    6  160  110 3.90\nrow2 21.0    6  160  110 3.90\nrow3 22.8    4  108   93 3.85\nrow4 21.4    6  258  110 3.08\nrow5 18.7    8  360  175 3.15\n```\n:::\n:::\n\n\n⚠️注意，在整个“{}”包括的语句中，如果再使用管道要注意这时的占位符.代表的是“{}”内的对象。\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-10_bdb3242ad5ca9329da4bef3230c832d3'}\n\n```{.r .cell-code}\nmtcars %>% .[1:5, 1:5] %>%\n  {\n    rownames(.) <- paste0(\"row\", 1:5)\n    colnames(.) <- paste0(\"col\", 1:5)\n    .[1:3, ] %>% cbind(., .) # cbind里面的.不指代{}外面的值\n  }\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3 col4 col5 col1 col2 col3 col4 col5\nrow1 21.0    6  160  110 3.90 21.0    6  160  110 3.90\nrow2 21.0    6  160  110 3.90 21.0    6  160  110 3.90\nrow3 22.8    4  108   93 3.85 22.8    4  108   93 3.85\n```\n:::\n\n```{.r .cell-code}\n# 等价：\nmtcars %>% .[1:5, 1:5] %>%\n  {\n    rownames(.) <- paste0(\"row\", 1:5)\n    colnames(.) <- paste0(\"col\", 1:5)\n    .\n  } %>% \n  .[1:3, ] %>% \n  cbind(., .)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n     col1 col2 col3 col4 col5 col1 col2 col3 col4 col5\nrow1 21.0    6  160  110 3.90 21.0    6  160  110 3.90\nrow2 21.0    6  160  110 3.90 21.0    6  160  110 3.90\nrow3 22.8    4  108   93 3.85 22.8    4  108   93 3.85\n```\n:::\n:::\n\n\n# 特殊管道符\n\n`magrittr`包内除了`%>%`管道符外，还提供了`%$%`、`%<>%`、`%T>%`、`%!>%`，他们的作用简述如下：\n\n## `%$%`\n\n用于传递管道左侧数据的names：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-11_a4fd07b14264f9f49af46b7f5e393cef'}\n\n```{.r .cell-code}\ncolnames(mtcars)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n [1] \"mpg\"  \"cyl\"  \"disp\" \"hp\"   \"drat\" \"wt\"   \"qsec\" \"vs\"   \"am\"   \"gear\"\n[11] \"carb\"\n```\n:::\n\n```{.r .cell-code}\n# mtcars的每个元素都可以被后面的函数所使用\nmtcars %$% plot(mpg, cyl)\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-11-1.png){width=672}\n:::\n\n```{.r .cell-code}\n# 等价于\nmtcars %>% {plot(.[,\"mpg\"], .[, \"cyl\"])}\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-11-2.png){width=672}\n:::\n\n```{.r .cell-code}\nsum(mtcars$mpg, mtcars$cyl)\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 840.9\n```\n:::\n:::\n\n\n## `%<>%`\n\n将管道的结果最终再赋值回最左侧的变量：\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-12_fb188e0cbef828aafcf6fa486973bd23'}\n\n```{.r .cell-code}\nset.seed(1234)\nx <- rnorm(5)\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -1.2070657  0.2774292  1.0844412 -2.3456977  0.4291247\n```\n:::\n\n```{.r .cell-code}\n# x排序后加上10，最后再赋值给x\nx %<>% sort() %>% {. + 10}\nx\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1]  7.654302  8.792934 10.277429 10.429125 11.084441\n```\n:::\n:::\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-13_8d382b17872c64eaf78f625fee50e029'}\n\n```{.r .cell-code}\n# 等价于\nx <- x %>% sort() %>% {. + 10}\n```\n:::\n\n\n## `%T>%`\n\n分支管道，传入左侧的值并运算后将原始值而不是运算结果传递给后续管道。这在多个管道中间使用`print()`、`plot()`或`summary()`这些函数返回信息时非常有用。\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-14_5e48013cdf52b299ae9f167b47010183'}\n\n```{.r .cell-code}\n1:5 %>% plot() %>% sum() # 传递给sum()的是前面所有函数的运算结果，由于plot()不返回任何数值，所以sum()的结果为0\n```\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 0\n```\n:::\n\n```{.r .cell-code}\n1:5 %T>% plot() %>% sum() # 传递给sum()的是1:5\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-14-1.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] 15\n```\n:::\n\n```{.r .cell-code}\n# 另一个例子\nrnorm(200) %>%\n  matrix(ncol = 2) %T>%\n  plot %>% \n  colSums() # 传递给colSums()的是“rnorm(200) %>% matrix(ncol = 2)”\n```\n\n::: {.cell-output-display}\n![](pipe_operator_files/figure-html/unnamed-chunk-14-2.png){width=672}\n:::\n\n::: {.cell-output .cell-output-stdout}\n```\n[1] -15.23708   7.82692\n```\n:::\n:::\n\n\n------------------------------------------------------------------------\n\n::: {.callout-note collapse=\"true\" icon=\"false\"}\n## Session Info\n\n\n::: {.cell hash='pipe_operator_cache/html/unnamed-chunk-15_da4756ea3f7d1219e8588496085bc4b9'}\n::: {.cell-output .cell-output-stdout}\n```\nR version 4.3.2 (2023-10-31)\nPlatform: aarch64-apple-darwin20 (64-bit)\nRunning under: macOS Sonoma 14.3\n\nMatrix products: default\nBLAS:   /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRblas.0.dylib \nLAPACK: /Library/Frameworks/R.framework/Versions/4.3-arm64/Resources/lib/libRlapack.dylib;  LAPACK version 3.11.0\n\nlocale:\n[1] en_US.UTF-8/en_US.UTF-8/en_US.UTF-8/C/en_US.UTF-8/en_US.UTF-8\n\ntime zone: Asia/Shanghai\ntzcode source: internal\n\nattached base packages:\n[1] stats     graphics  grDevices utils     datasets  methods   base     \n\nother attached packages:\n[1] magrittr_2.0.3\n\nloaded via a namespace (and not attached):\n [1] htmlwidgets_1.6.4 compiler_4.3.2    fastmap_1.1.1     cli_3.6.2        \n [5] tools_4.3.2       htmltools_0.5.7   rstudioapi_0.15.0 yaml_2.3.8       \n [9] codetools_0.2-19  rmarkdown_2.25    knitr_1.45        jsonlite_1.8.8   \n[13] xfun_0.41         digest_0.6.34     rlang_1.1.3       evaluate_0.23    \n```\n:::\n:::\n\n:::\n",
    "supporting": [],
    "filters": [
      "rmarkdown/pagebreak.lua"
    ],
    "includes": {},
    "engineDependencies": {},
    "preserve": {},
    "postProcess": true
  }
}